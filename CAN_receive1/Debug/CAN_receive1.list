
CAN_receive1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08009854  08009854  00019854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099cc  080099cc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080099cc  080099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d4  080099d4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080099dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  2000005c  08009a38  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08009a38  00020420  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001098a  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8f  00000000  00000000  00030a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  000326f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091b  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb7e  00000000  00000000  00033be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001069a  00000000  00000000  00060761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e4ca  00000000  00000000  00070dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003794  00000000  00000000  0018f2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00192a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000005c 	.word	0x2000005c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800983c 	.word	0x0800983c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000060 	.word	0x20000060
 8000288:	0800983c 	.word	0x0800983c

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b982 	b.w	80005b8 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002d2:	460d      	mov	r5, r1
 80002d4:	4604      	mov	r4, r0
 80002d6:	460f      	mov	r7, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d146      	bne.n	800036a <__udivmoddi4+0x9e>
 80002dc:	428a      	cmp	r2, r1
 80002de:	4694      	mov	ip, r2
 80002e0:	d95e      	bls.n	80003a0 <__udivmoddi4+0xd4>
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	b143      	cbz	r3, 80002fa <__udivmoddi4+0x2e>
 80002e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	409c      	lsls	r4, r3
 80002f4:	fa20 f202 	lsr.w	r2, r0, r2
 80002f8:	4317      	orrs	r7, r2
 80002fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fe:	fa1f f58c 	uxth.w	r5, ip
 8000302:	0c22      	lsrs	r2, r4, #16
 8000304:	fbb7 f1fe 	udiv	r1, r7, lr
 8000308:	fb0e 7711 	mls	r7, lr, r1, r7
 800030c:	fb01 f005 	mul.w	r0, r1, r5
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x5e>
 8000318:	eb1c 0202 	adds.w	r2, ip, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x5c>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 8134 	bhi.w	8000590 <__udivmoddi4+0x2c4>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	b2a4      	uxth	r4, r4
 800032e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000332:	fb0e 2210 	mls	r2, lr, r0, r2
 8000336:	fb00 f505 	mul.w	r5, r0, r5
 800033a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033e:	42a5      	cmp	r5, r4
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x88>
 8000342:	eb1c 0404 	adds.w	r4, ip, r4
 8000346:	f100 32ff 	add.w	r2, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x86>
 800034c:	42a5      	cmp	r5, r4
 800034e:	f200 8119 	bhi.w	8000584 <__udivmoddi4+0x2b8>
 8000352:	4610      	mov	r0, r2
 8000354:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	2100      	movs	r1, #0
 800035c:	b11e      	cbz	r6, 8000366 <__udivmoddi4+0x9a>
 800035e:	40dc      	lsrs	r4, r3
 8000360:	2300      	movs	r3, #0
 8000362:	e9c6 4300 	strd	r4, r3, [r6]
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0xb4>
 800036e:	2e00      	cmp	r6, #0
 8000370:	f000 80fc 	beq.w	800056c <__udivmoddi4+0x2a0>
 8000374:	2100      	movs	r1, #0
 8000376:	e9c6 0500 	strd	r0, r5, [r6]
 800037a:	4608      	mov	r0, r1
 800037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14c      	bne.n	8000422 <__udivmoddi4+0x156>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2a6>
 800038e:	4282      	cmp	r2, r0
 8000390:	f240 80ef 	bls.w	8000572 <__udivmoddi4+0x2a6>
 8000394:	4608      	mov	r0, r1
 8000396:	2e00      	cmp	r6, #0
 8000398:	d0e5      	beq.n	8000366 <__udivmoddi4+0x9a>
 800039a:	e9c6 4700 	strd	r4, r7, [r6]
 800039e:	e7e2      	b.n	8000366 <__udivmoddi4+0x9a>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xd8>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f382 	clz	r3, r2
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 809f 	bne.w	80004ec <__udivmoddi4+0x220>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b4:	fa1f f78c 	uxth.w	r7, ip
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f5fe 	udiv	r5, r2, lr
 80003be:	fb0e 2015 	mls	r0, lr, r5, r2
 80003c2:	0c22      	lsrs	r2, r4, #16
 80003c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c8:	fb07 f005 	mul.w	r0, r7, r5
 80003cc:	4290      	cmp	r0, r2
 80003ce:	d90f      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003d0:	eb1c 0202 	adds.w	r2, ip, r2
 80003d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003d8:	bf2c      	ite	cs
 80003da:	f04f 0901 	movcs.w	r9, #1
 80003de:	f04f 0900 	movcc.w	r9, #0
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d903      	bls.n	80003ee <__udivmoddi4+0x122>
 80003e6:	f1b9 0f00 	cmp.w	r9, #0
 80003ea:	f000 80ce 	beq.w	800058a <__udivmoddi4+0x2be>
 80003ee:	4645      	mov	r5, r8
 80003f0:	1a12      	subs	r2, r2, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	42a7      	cmp	r7, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x14e>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x14c>
 8000412:	42a7      	cmp	r7, r4
 8000414:	f200 80b3 	bhi.w	800057e <__udivmoddi4+0x2b2>
 8000418:	4610      	mov	r0, r2
 800041a:	1be4      	subs	r4, r4, r7
 800041c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000420:	e79c      	b.n	800035c <__udivmoddi4+0x90>
 8000422:	f1c1 0420 	rsb	r4, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 fc01 	lsl.w	ip, r5, r1
 800042c:	fa22 f704 	lsr.w	r7, r2, r4
 8000430:	40e5      	lsrs	r5, r4
 8000432:	408a      	lsls	r2, r1
 8000434:	431f      	orrs	r7, r3
 8000436:	fa20 f304 	lsr.w	r3, r0, r4
 800043a:	4088      	lsls	r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea43 030c 	orr.w	r3, r3, ip
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fbb5 fef8 	udiv	lr, r5, r8
 8000450:	fb08 551e 	mls	r5, r8, lr, r5
 8000454:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a9      	cmp	r9, r5
 800045e:	d90e      	bls.n	800047e <__udivmoddi4+0x1b2>
 8000460:	197d      	adds	r5, r7, r5
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	45a9      	cmp	r9, r5
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b0>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 808d 	beq.w	8000596 <__udivmoddi4+0x2ca>
 800047c:	46d6      	mov	lr, sl
 800047e:	eba5 0509 	sub.w	r5, r5, r9
 8000482:	fa1f f983 	uxth.w	r9, r3
 8000486:	fbb5 f3f8 	udiv	r3, r5, r8
 800048a:	fb08 5513 	mls	r5, r8, r3, r5
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000496:	45ac      	cmp	ip, r5
 8000498:	d906      	bls.n	80004a8 <__udivmoddi4+0x1dc>
 800049a:	197d      	adds	r5, r7, r5
 800049c:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x1da>
 80004a2:	45ac      	cmp	ip, r5
 80004a4:	d87e      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004a6:	4643      	mov	r3, r8
 80004a8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004ac:	eba5 050c 	sub.w	r5, r5, ip
 80004b0:	fba3 9802 	umull	r9, r8, r3, r2
 80004b4:	4545      	cmp	r5, r8
 80004b6:	46ce      	mov	lr, r9
 80004b8:	46c4      	mov	ip, r8
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x1f6>
 80004bc:	d106      	bne.n	80004cc <__udivmoddi4+0x200>
 80004be:	4548      	cmp	r0, r9
 80004c0:	d204      	bcs.n	80004cc <__udivmoddi4+0x200>
 80004c2:	3b01      	subs	r3, #1
 80004c4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d06f      	beq.n	80005b0 <__udivmoddi4+0x2e4>
 80004d0:	ebb0 020e 	subs.w	r2, r0, lr
 80004d4:	eb65 050c 	sbc.w	r5, r5, ip
 80004d8:	40ca      	lsrs	r2, r1
 80004da:	fa05 f404 	lsl.w	r4, r5, r4
 80004de:	40cd      	lsrs	r5, r1
 80004e0:	4618      	mov	r0, r3
 80004e2:	4314      	orrs	r4, r2
 80004e4:	2100      	movs	r1, #0
 80004e6:	e9c6 4500 	strd	r4, r5, [r6]
 80004ea:	e73c      	b.n	8000366 <__udivmoddi4+0x9a>
 80004ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f0:	f1c3 0220 	rsb	r2, r3, #32
 80004f4:	4099      	lsls	r1, r3
 80004f6:	409c      	lsls	r4, r3
 80004f8:	40d5      	lsrs	r5, r2
 80004fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000502:	fa1f f78c 	uxth.w	r7, ip
 8000506:	fbb5 f0fe 	udiv	r0, r5, lr
 800050a:	430a      	orrs	r2, r1
 800050c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000510:	0c11      	lsrs	r1, r2, #16
 8000512:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000516:	fb00 f507 	mul.w	r5, r0, r7
 800051a:	428d      	cmp	r5, r1
 800051c:	d90e      	bls.n	800053c <__udivmoddi4+0x270>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	bf2c      	ite	cs
 8000528:	f04f 0901 	movcs.w	r9, #1
 800052c:	f04f 0900 	movcc.w	r9, #0
 8000530:	428d      	cmp	r5, r1
 8000532:	d902      	bls.n	800053a <__udivmoddi4+0x26e>
 8000534:	f1b9 0f00 	cmp.w	r9, #0
 8000538:	d031      	beq.n	800059e <__udivmoddi4+0x2d2>
 800053a:	4640      	mov	r0, r8
 800053c:	1b49      	subs	r1, r1, r5
 800053e:	b292      	uxth	r2, r2
 8000540:	fbb1 f5fe 	udiv	r5, r1, lr
 8000544:	fb0e 1115 	mls	r1, lr, r5, r1
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	fb05 f107 	mul.w	r1, r5, r7
 8000550:	4291      	cmp	r1, r2
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0x298>
 8000554:	eb1c 0202 	adds.w	r2, ip, r2
 8000558:	f105 38ff 	add.w	r8, r5, #4294967295
 800055c:	d201      	bcs.n	8000562 <__udivmoddi4+0x296>
 800055e:	4291      	cmp	r1, r2
 8000560:	d823      	bhi.n	80005aa <__udivmoddi4+0x2de>
 8000562:	4645      	mov	r5, r8
 8000564:	1a52      	subs	r2, r2, r1
 8000566:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800056a:	e726      	b.n	80003ba <__udivmoddi4+0xee>
 800056c:	4631      	mov	r1, r6
 800056e:	4630      	mov	r0, r6
 8000570:	e6f9      	b.n	8000366 <__udivmoddi4+0x9a>
 8000572:	1a84      	subs	r4, r0, r2
 8000574:	eb65 0203 	sbc.w	r2, r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	4617      	mov	r7, r2
 800057c:	e70b      	b.n	8000396 <__udivmoddi4+0xca>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14e>
 8000584:	4464      	add	r4, ip
 8000586:	3802      	subs	r0, #2
 8000588:	e6e4      	b.n	8000354 <__udivmoddi4+0x88>
 800058a:	3d02      	subs	r5, #2
 800058c:	4462      	add	r2, ip
 800058e:	e72f      	b.n	80003f0 <__udivmoddi4+0x124>
 8000590:	3902      	subs	r1, #2
 8000592:	4462      	add	r2, ip
 8000594:	e6c9      	b.n	800032a <__udivmoddi4+0x5e>
 8000596:	f1ae 0e02 	sub.w	lr, lr, #2
 800059a:	443d      	add	r5, r7
 800059c:	e76f      	b.n	800047e <__udivmoddi4+0x1b2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	e7cb      	b.n	800053c <__udivmoddi4+0x270>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443d      	add	r5, r7
 80005a8:	e77e      	b.n	80004a8 <__udivmoddi4+0x1dc>
 80005aa:	3d02      	subs	r5, #2
 80005ac:	4462      	add	r2, ip
 80005ae:	e7d9      	b.n	8000564 <__udivmoddi4+0x298>
 80005b0:	4618      	mov	r0, r3
 80005b2:	4631      	mov	r1, r6
 80005b4:	e6d7      	b.n	8000366 <__udivmoddi4+0x9a>
 80005b6:	bf00      	nop

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <send_flow_control_frame>:
}

/**
  * @brief Gửi frame Flow Control (FC) để báo cho bên gửi tiếp tục.
  */
void send_flow_control_frame(void) {
 80005bc:	b5b0      	push	{r4, r5, r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
    g_tx_header.Identifier = CAN_TP_RESPONSE_ID;
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <send_flow_control_frame+0x98>)
 80005c4:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 80005c8:	601a      	str	r2, [r3, #0]
    g_tx_header.IdType = FDCAN_STANDARD_ID;
 80005ca:	4b22      	ldr	r3, [pc, #136]	; (8000654 <send_flow_control_frame+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
    g_tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <send_flow_control_frame+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
    g_tx_header.DataLength = FDCAN_DLC_BYTES_3;
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <send_flow_control_frame+0x98>)
 80005d8:	2203      	movs	r2, #3
 80005da:	60da      	str	r2, [r3, #12]
    g_tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <send_flow_control_frame+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
    g_tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <send_flow_control_frame+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
    g_tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <send_flow_control_frame+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
    g_tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <send_flow_control_frame+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
    g_tx_header.MessageMarker = 0;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <send_flow_control_frame+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	621a      	str	r2, [r3, #32]

    uint8_t tx_data[3];
    // [PCI - 0x30]: FlowStatus = CTS, BlockSize = 0, STmin = 0
    tx_data[0] = 0x30; // 0b0011 0000: Flow Control, Continue To Send
 80005fa:	2330      	movs	r3, #48	; 0x30
 80005fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    tx_data[1] = 0x00; // Block Size (BS) = 0 (gửi tất cả mà không cần FC nữa)
 8000600:	2300      	movs	r3, #0
 8000602:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    tx_data[2] = 0x00; // Separation Time (STmin) = 0 ms
 8000606:	2300      	movs	r3, #0
 8000608:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &g_tx_header, tx_data) != HAL_OK) {
 800060c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000610:	461a      	mov	r2, r3
 8000612:	4910      	ldr	r1, [pc, #64]	; (8000654 <send_flow_control_frame+0x98>)
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <send_flow_control_frame+0x9c>)
 8000616:	f001 f8f9 	bl	800180c <HAL_FDCAN_AddMessageToTxFifoQ>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <send_flow_control_frame+0x68>
        Error_Handler();
 8000620:	f000 fb3a 	bl	8000c98 <Error_Handler>
    }

    char msg[] = "-> Sent Flow Control (CTS)\r\n";
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <send_flow_control_frame+0xa0>)
 8000626:	1d3c      	adds	r4, r7, #4
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000632:	c407      	stmia	r4!, {r0, r1, r2}
 8000634:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100); // Gửi log nhanh
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fe27 	bl	800028c <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	1d39      	adds	r1, r7, #4
 8000644:	2364      	movs	r3, #100	; 0x64
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <send_flow_control_frame+0xa4>)
 8000648:	f007 fe68 	bl	800831c <HAL_UART_Transmit>
}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bdb0      	pop	{r4, r5, r7, pc}
 8000654:	2000027c 	.word	0x2000027c
 8000658:	20000078 	.word	0x20000078
 800065c:	080098d0 	.word	0x080098d0
 8000660:	200000dc 	.word	0x200000dc

08000664 <process_can_tp_frame>:
/**
  * @brief Ngắt được g�?i khi có tin nhắn mới trong FIFO0 của FDCAN.
  *        �?ây là trái tim của bộ nhận CAN-TP.
  */

void process_can_tp_frame(FDCAN_RxHeaderTypeDef* rx_header, uint8_t* rx_data) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
    uint8_t pci_type = (rx_data[0] & 0xF0) >> 4;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	091b      	lsrs	r3, r3, #4
 8000674:	73fb      	strb	r3, [r7, #15]

    switch (g_tp_receiver_state) {
 8000676:	4b78      	ldr	r3, [pc, #480]	; (8000858 <process_can_tp_frame+0x1f4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <process_can_tp_frame+0x22>
 8000680:	2b01      	cmp	r3, #1
 8000682:	d04d      	beq.n	8000720 <process_can_tp_frame+0xbc>
 8000684:	e0e5      	b.n	8000852 <process_can_tp_frame+0x1ee>
        case TP_RECEIVER_IDLE:
        {
            if (pci_type == PCI_TYPE_SF) {
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d11b      	bne.n	80006c4 <process_can_tp_frame+0x60>
                uint8_t sf_len = rx_data[0] & 0x0F;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	f003 030f 	and.w	r3, r3, #15
 8000694:	737b      	strb	r3, [r7, #13]
                if (sf_len > 0 && sf_len < 8) {
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	2b00      	cmp	r3, #0
 800069a:	f000 80d5 	beq.w	8000848 <process_can_tp_frame+0x1e4>
 800069e:	7b7b      	ldrb	r3, [r7, #13]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	f200 80d1 	bhi.w	8000848 <process_can_tp_frame+0x1e4>
                    memcpy(g_tp_reassembly_buffer, &rx_data[1], sf_len);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	7b7a      	ldrb	r2, [r7, #13]
 80006ac:	4619      	mov	r1, r3
 80006ae:	486b      	ldr	r0, [pc, #428]	; (800085c <process_can_tp_frame+0x1f8>)
 80006b0:	f008 fc64 	bl	8008f7c <memcpy>
                    g_tp_total_size = sf_len;
 80006b4:	7b7b      	ldrb	r3, [r7, #13]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b69      	ldr	r3, [pc, #420]	; (8000860 <process_can_tp_frame+0x1fc>)
 80006ba:	801a      	strh	r2, [r3, #0]
                    g_tp_message_ready = 1;
 80006bc:	4b69      	ldr	r3, [pc, #420]	; (8000864 <process_can_tp_frame+0x200>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
                g_tp_expected_seq_num = 1;

                g_tp_receiver_state = TP_RECEIVER_WAIT_CF;
                send_flow_control_frame();
            }
            break;
 80006c2:	e0c1      	b.n	8000848 <process_can_tp_frame+0x1e4>
            } else if (pci_type == PCI_TYPE_FF) {
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	f040 80be 	bne.w	8000848 <process_can_tp_frame+0x1e4>
                g_tp_total_size = ((uint16_t)(rx_data[0] & 0x0F) << 8) | rx_data[1];
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	b21b      	sxth	r3, r3
 80006d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80006d8:	b21a      	sxth	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b5d      	ldr	r3, [pc, #372]	; (8000860 <process_can_tp_frame+0x1fc>)
 80006ea:	801a      	strh	r2, [r3, #0]
                if (g_tp_total_size > TP_BUFFER_SIZE) return;
 80006ec:	4b5c      	ldr	r3, [pc, #368]	; (8000860 <process_can_tp_frame+0x1fc>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006f6:	f200 80a9 	bhi.w	800084c <process_can_tp_frame+0x1e8>
                memcpy(g_tp_reassembly_buffer, &rx_data[2], 6);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	3302      	adds	r3, #2
 80006fe:	2206      	movs	r2, #6
 8000700:	4619      	mov	r1, r3
 8000702:	4856      	ldr	r0, [pc, #344]	; (800085c <process_can_tp_frame+0x1f8>)
 8000704:	f008 fc3a 	bl	8008f7c <memcpy>
                g_tp_bytes_received = 6;
 8000708:	4b57      	ldr	r3, [pc, #348]	; (8000868 <process_can_tp_frame+0x204>)
 800070a:	2206      	movs	r2, #6
 800070c:	801a      	strh	r2, [r3, #0]
                g_tp_expected_seq_num = 1;
 800070e:	4b57      	ldr	r3, [pc, #348]	; (800086c <process_can_tp_frame+0x208>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
                g_tp_receiver_state = TP_RECEIVER_WAIT_CF;
 8000714:	4b50      	ldr	r3, [pc, #320]	; (8000858 <process_can_tp_frame+0x1f4>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
                send_flow_control_frame();
 800071a:	f7ff ff4f 	bl	80005bc <send_flow_control_frame>
            break;
 800071e:	e093      	b.n	8000848 <process_can_tp_frame+0x1e4>
        }

        case TP_RECEIVER_WAIT_CF:
        {
            if (pci_type == PCI_TYPE_CF) {
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b02      	cmp	r3, #2
 8000724:	f040 808c 	bne.w	8000840 <process_can_tp_frame+0x1dc>
                uint8_t seq_num = rx_data[0] & 0x0F;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	f003 030f 	and.w	r3, r3, #15
 8000730:	73bb      	strb	r3, [r7, #14]
                if (seq_num != g_tp_expected_seq_num) {
 8000732:	4b4e      	ldr	r3, [pc, #312]	; (800086c <process_can_tp_frame+0x208>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	7bba      	ldrb	r2, [r7, #14]
 800073a:	429a      	cmp	r2, r3
 800073c:	d003      	beq.n	8000746 <process_can_tp_frame+0xe2>
                    g_tp_receiver_state = TP_RECEIVER_IDLE;
 800073e:	4b46      	ldr	r3, [pc, #280]	; (8000858 <process_can_tp_frame+0x1f4>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
                    return;
 8000744:	e085      	b.n	8000852 <process_can_tp_frame+0x1ee>
                }

                // Chuyển DLC sang byte
                uint32_t dlc_in_bytes;
                switch (rx_header->DataLength) {
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	3b01      	subs	r3, #1
 800074c:	2b07      	cmp	r3, #7
 800074e:	d82b      	bhi.n	80007a8 <process_can_tp_frame+0x144>
 8000750:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <process_can_tp_frame+0xf4>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	08000779 	.word	0x08000779
 800075c:	0800077f 	.word	0x0800077f
 8000760:	08000785 	.word	0x08000785
 8000764:	0800078b 	.word	0x0800078b
 8000768:	08000791 	.word	0x08000791
 800076c:	08000797 	.word	0x08000797
 8000770:	0800079d 	.word	0x0800079d
 8000774:	080007a3 	.word	0x080007a3
                    case FDCAN_DLC_BYTES_1: dlc_in_bytes = 1; break;
 8000778:	2301      	movs	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	e017      	b.n	80007ae <process_can_tp_frame+0x14a>
                    case FDCAN_DLC_BYTES_2: dlc_in_bytes = 2; break;
 800077e:	2302      	movs	r3, #2
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	e014      	b.n	80007ae <process_can_tp_frame+0x14a>
                    case FDCAN_DLC_BYTES_3: dlc_in_bytes = 3; break;
 8000784:	2303      	movs	r3, #3
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e011      	b.n	80007ae <process_can_tp_frame+0x14a>
                    case FDCAN_DLC_BYTES_4: dlc_in_bytes = 4; break;
 800078a:	2304      	movs	r3, #4
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	e00e      	b.n	80007ae <process_can_tp_frame+0x14a>
                    case FDCAN_DLC_BYTES_5: dlc_in_bytes = 5; break;
 8000790:	2305      	movs	r3, #5
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e00b      	b.n	80007ae <process_can_tp_frame+0x14a>
                    case FDCAN_DLC_BYTES_6: dlc_in_bytes = 6; break;
 8000796:	2306      	movs	r3, #6
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e008      	b.n	80007ae <process_can_tp_frame+0x14a>
                    case FDCAN_DLC_BYTES_7: dlc_in_bytes = 7; break;
 800079c:	2307      	movs	r3, #7
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e005      	b.n	80007ae <process_can_tp_frame+0x14a>
                    case FDCAN_DLC_BYTES_8: dlc_in_bytes = 8; break;
 80007a2:	2308      	movs	r3, #8
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	e002      	b.n	80007ae <process_can_tp_frame+0x14a>
                    default: dlc_in_bytes = 0; break;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	bf00      	nop
                }

                uint32_t bytes_to_copy = dlc_in_bytes - 1;
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
                if (g_tp_bytes_received + bytes_to_copy > g_tp_total_size) {
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <process_can_tp_frame+0x204>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	4413      	add	r3, r2
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <process_can_tp_frame+0x1fc>)
 80007c2:	8812      	ldrh	r2, [r2, #0]
 80007c4:	b292      	uxth	r2, r2
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d908      	bls.n	80007dc <process_can_tp_frame+0x178>
                    bytes_to_copy = g_tp_total_size - g_tp_bytes_received;
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <process_can_tp_frame+0x1fc>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <process_can_tp_frame+0x204>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	613b      	str	r3, [r7, #16]
                }

                memcpy(&g_tp_reassembly_buffer[g_tp_bytes_received], &rx_data[1], bytes_to_copy);
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <process_can_tp_frame+0x204>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <process_can_tp_frame+0x1f8>)
 80007e6:	18d0      	adds	r0, r2, r3
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4619      	mov	r1, r3
 80007f0:	f008 fbc4 	bl	8008f7c <memcpy>
                g_tp_bytes_received += bytes_to_copy;
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <process_can_tp_frame+0x204>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	4413      	add	r3, r2
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <process_can_tp_frame+0x204>)
 8000804:	801a      	strh	r2, [r3, #0]
                g_tp_expected_seq_num = (g_tp_expected_seq_num + 1) % 16;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <process_can_tp_frame+0x208>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	3301      	adds	r3, #1
 800080e:	425a      	negs	r2, r3
 8000810:	f003 030f 	and.w	r3, r3, #15
 8000814:	f002 020f 	and.w	r2, r2, #15
 8000818:	bf58      	it	pl
 800081a:	4253      	negpl	r3, r2
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <process_can_tp_frame+0x208>)
 8000820:	701a      	strb	r2, [r3, #0]

                if (g_tp_bytes_received >= g_tp_total_size) {
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <process_can_tp_frame+0x204>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b29a      	uxth	r2, r3
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <process_can_tp_frame+0x1fc>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	b29b      	uxth	r3, r3
 800082e:	429a      	cmp	r2, r3
 8000830:	d30e      	bcc.n	8000850 <process_can_tp_frame+0x1ec>
                    g_tp_message_ready = 1;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <process_can_tp_frame+0x200>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
                    g_tp_receiver_state = TP_RECEIVER_IDLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <process_can_tp_frame+0x1f4>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
                }
            } else {
                g_tp_receiver_state = TP_RECEIVER_IDLE;
            }
            break;
 800083e:	e007      	b.n	8000850 <process_can_tp_frame+0x1ec>
                g_tp_receiver_state = TP_RECEIVER_IDLE;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <process_can_tp_frame+0x1f4>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
            break;
 8000846:	e003      	b.n	8000850 <process_can_tp_frame+0x1ec>
            break;
 8000848:	bf00      	nop
 800084a:	e002      	b.n	8000852 <process_can_tp_frame+0x1ee>
                if (g_tp_total_size > TP_BUFFER_SIZE) return;
 800084c:	bf00      	nop
 800084e:	e000      	b.n	8000852 <process_can_tp_frame+0x1ee>
            break;
 8000850:	bf00      	nop
        }
    }
}
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000170 	.word	0x20000170
 800085c:	20000174 	.word	0x20000174
 8000860:	20000274 	.word	0x20000274
 8000864:	20000279 	.word	0x20000279
 8000868:	20000276 	.word	0x20000276
 800086c:	20000278 	.word	0x20000278

08000870 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09e      	sub	sp, #120	; 0x78
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	2b00      	cmp	r3, #0
 8000882:	f000 8084 	beq.w	800098e <HAL_FDCAN_RxFifo0Callback+0x11e>
    {
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &g_rx_header, g_rx_data) != HAL_OK) {
 8000886:	4b43      	ldr	r3, [pc, #268]	; (8000994 <HAL_FDCAN_RxFifo0Callback+0x124>)
 8000888:	4a43      	ldr	r2, [pc, #268]	; (8000998 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800088a:	2140      	movs	r1, #64	; 0x40
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f001 f801 	bl	8001894 <HAL_FDCAN_GetRxMessage>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d003      	beq.n	80008a0 <HAL_FDCAN_RxFifo0Callback+0x30>
            g_tp_receiver_state = TP_RECEIVER_IDLE;
 8000898:	4b40      	ldr	r3, [pc, #256]	; (800099c <HAL_FDCAN_RxFifo0Callback+0x12c>)
 800089a:	2200      	movs	r2, #0
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e076      	b.n	800098e <HAL_FDCAN_RxFifo0Callback+0x11e>

        // --- In log xác nhận frame đã nhận ---
        char log_msg[100];

        // In ID
        snprintf(log_msg, sizeof(log_msg), "\r\n[CAN RX] ID: 0x%03lX | Data: ", (unsigned long)g_rx_header.Identifier);
 80008a0:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f107 000c 	add.w	r0, r7, #12
 80008a8:	4a3d      	ldr	r2, [pc, #244]	; (80009a0 <HAL_FDCAN_RxFifo0Callback+0x130>)
 80008aa:	2164      	movs	r1, #100	; 0x64
 80008ac:	f008 fade 	bl	8008e6c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)log_msg, strlen(log_msg), 100);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fce9 	bl	800028c <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	4837      	ldr	r0, [pc, #220]	; (80009a4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 80008c6:	f007 fd29 	bl	800831c <HAL_UART_Transmit>

        // In dữ liệu theo độ dài thực tế (DLC)
        uint32_t dlc_in_bytes;
        switch (g_rx_header.DataLength) {
 80008ca:	4b33      	ldr	r3, [pc, #204]	; (8000998 <HAL_FDCAN_RxFifo0Callback+0x128>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	2b08      	cmp	r3, #8
 80008d0:	d82f      	bhi.n	8000932 <HAL_FDCAN_RxFifo0Callback+0xc2>
 80008d2:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	080008fd 	.word	0x080008fd
 80008dc:	08000903 	.word	0x08000903
 80008e0:	08000909 	.word	0x08000909
 80008e4:	0800090f 	.word	0x0800090f
 80008e8:	08000915 	.word	0x08000915
 80008ec:	0800091b 	.word	0x0800091b
 80008f0:	08000921 	.word	0x08000921
 80008f4:	08000927 	.word	0x08000927
 80008f8:	0800092d 	.word	0x0800092d
            case FDCAN_DLC_BYTES_0: dlc_in_bytes = 0; break;
 80008fc:	2300      	movs	r3, #0
 80008fe:	677b      	str	r3, [r7, #116]	; 0x74
 8000900:	e01a      	b.n	8000938 <HAL_FDCAN_RxFifo0Callback+0xc8>
            case FDCAN_DLC_BYTES_1: dlc_in_bytes = 1; break;
 8000902:	2301      	movs	r3, #1
 8000904:	677b      	str	r3, [r7, #116]	; 0x74
 8000906:	e017      	b.n	8000938 <HAL_FDCAN_RxFifo0Callback+0xc8>
            case FDCAN_DLC_BYTES_2: dlc_in_bytes = 2; break;
 8000908:	2302      	movs	r3, #2
 800090a:	677b      	str	r3, [r7, #116]	; 0x74
 800090c:	e014      	b.n	8000938 <HAL_FDCAN_RxFifo0Callback+0xc8>
            case FDCAN_DLC_BYTES_3: dlc_in_bytes = 3; break;
 800090e:	2303      	movs	r3, #3
 8000910:	677b      	str	r3, [r7, #116]	; 0x74
 8000912:	e011      	b.n	8000938 <HAL_FDCAN_RxFifo0Callback+0xc8>
            case FDCAN_DLC_BYTES_4: dlc_in_bytes = 4; break;
 8000914:	2304      	movs	r3, #4
 8000916:	677b      	str	r3, [r7, #116]	; 0x74
 8000918:	e00e      	b.n	8000938 <HAL_FDCAN_RxFifo0Callback+0xc8>
            case FDCAN_DLC_BYTES_5: dlc_in_bytes = 5; break;
 800091a:	2305      	movs	r3, #5
 800091c:	677b      	str	r3, [r7, #116]	; 0x74
 800091e:	e00b      	b.n	8000938 <HAL_FDCAN_RxFifo0Callback+0xc8>
            case FDCAN_DLC_BYTES_6: dlc_in_bytes = 6; break;
 8000920:	2306      	movs	r3, #6
 8000922:	677b      	str	r3, [r7, #116]	; 0x74
 8000924:	e008      	b.n	8000938 <HAL_FDCAN_RxFifo0Callback+0xc8>
            case FDCAN_DLC_BYTES_7: dlc_in_bytes = 7; break;
 8000926:	2307      	movs	r3, #7
 8000928:	677b      	str	r3, [r7, #116]	; 0x74
 800092a:	e005      	b.n	8000938 <HAL_FDCAN_RxFifo0Callback+0xc8>
            case FDCAN_DLC_BYTES_8: dlc_in_bytes = 8; break;
 800092c:	2308      	movs	r3, #8
 800092e:	677b      	str	r3, [r7, #116]	; 0x74
 8000930:	e002      	b.n	8000938 <HAL_FDCAN_RxFifo0Callback+0xc8>
            default: dlc_in_bytes = 0; break;
 8000932:	2300      	movs	r3, #0
 8000934:	677b      	str	r3, [r7, #116]	; 0x74
 8000936:	bf00      	nop
        }

        for (uint32_t i = 0; i < dlc_in_bytes; i++) {
 8000938:	2300      	movs	r3, #0
 800093a:	673b      	str	r3, [r7, #112]	; 0x70
 800093c:	e019      	b.n	8000972 <HAL_FDCAN_RxFifo0Callback+0x102>
            snprintf(log_msg, sizeof(log_msg), "%02X ", g_rx_data[i]);
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <HAL_FDCAN_RxFifo0Callback+0x124>)
 8000940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	f107 000c 	add.w	r0, r7, #12
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_FDCAN_RxFifo0Callback+0x138>)
 800094c:	2164      	movs	r1, #100	; 0x64
 800094e:	f008 fa8d 	bl	8008e6c <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)log_msg, strlen(log_msg), 100);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fc98 	bl	800028c <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	f107 010c 	add.w	r1, r7, #12
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	480f      	ldr	r0, [pc, #60]	; (80009a4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000968:	f007 fcd8 	bl	800831c <HAL_UART_Transmit>
        for (uint32_t i = 0; i < dlc_in_bytes; i++) {
 800096c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800096e:	3301      	adds	r3, #1
 8000970:	673b      	str	r3, [r7, #112]	; 0x70
 8000972:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000976:	429a      	cmp	r2, r3
 8000978:	d3e1      	bcc.n	800093e <HAL_FDCAN_RxFifo0Callback+0xce>
        }
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 100);
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	2202      	movs	r2, #2
 800097e:	490b      	ldr	r1, [pc, #44]	; (80009ac <HAL_FDCAN_RxFifo0Callback+0x13c>)
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <HAL_FDCAN_RxFifo0Callback+0x134>)
 8000982:	f007 fccb 	bl	800831c <HAL_UART_Transmit>

        // --- G�?i hàm xử lý CAN-TP ---
        process_can_tp_frame(&g_rx_header, g_rx_data);
 8000986:	4903      	ldr	r1, [pc, #12]	; (8000994 <HAL_FDCAN_RxFifo0Callback+0x124>)
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <HAL_FDCAN_RxFifo0Callback+0x128>)
 800098a:	f7ff fe6b 	bl	8000664 <process_can_tp_frame>
    }
}
 800098e:	3778      	adds	r7, #120	; 0x78
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200002c8 	.word	0x200002c8
 8000998:	200002a0 	.word	0x200002a0
 800099c:	20000170 	.word	0x20000170
 80009a0:	080098f0 	.word	0x080098f0
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	080098a0 	.word	0x080098a0
 80009ac:	08009910 	.word	0x08009910

080009b0 <FDCAN_ConfigFilter>:


void FDCAN_ConfigFilter(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
    FDCAN_FilterTypeDef sFilterConfig;
    sFilterConfig.IdType = FDCAN_STANDARD_ID;               // L�?c ID 11-bit
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;                          // Filter đầu tiên
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;           // Dùng chế độ mask
 80009be:	2302      	movs	r3, #2
 80009c0:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;   // Frame hợp lệ sẽ vào FIFO0
 80009c2:	2301      	movs	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]

    sFilterConfig.FilterID1 = 0x000;    // Giá trị so sánh = 0
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x000;    // Mask = 0 -> b�? qua so sánh tất cả bit
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <FDCAN_ConfigFilter+0x3c>)
 80009d4:	f000 fe98 	bl	8001708 <HAL_FDCAN_ConfigFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <FDCAN_ConfigFilter+0x32>
    {
        Error_Handler();
 80009de:	f000 f95b 	bl	8000c98 <Error_Handler>
    }
}
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000078 	.word	0x20000078

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b09a      	sub	sp, #104	; 0x68
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fba1 	bl	800113c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f833 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f000 f931 	bl	8000c64 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000a02:	f000 f89d 	bl	8000b40 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 8000a06:	f000 f8e1 	bl	8000bcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  FDCAN_ConfigFilter();
 8000a0a:	f7ff ffd1 	bl	80009b0 <FDCAN_ConfigFilter>

  // Khởi động FDCAN
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <main+0x68>)
 8000a10:	f000 fed4 	bl	80017bc <HAL_FDCAN_Start>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <main+0x2e>
  {
      Error_Handler();
 8000a1a:	f000 f93d 	bl	8000c98 <Error_Handler>
  }

  // Kích hoạt ngắt báo có tin nhắn mới trong FIFO0
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2101      	movs	r1, #1
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <main+0x68>)
 8000a24:	f001 f83e 	bl	8001aa4 <HAL_FDCAN_ActivateNotification>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <main+0x42>
  {
      Error_Handler();
 8000a2e:	f000 f933 	bl	8000c98 <Error_Handler>
  }

  char uartBuf[100];
  sprintf(uartBuf, "CAN-TP Receiver Ready. Listening on ID 0x%03X...\r\n", CAN_TP_REQUEST_ID);
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	f240 72df 	movw	r2, #2015	; 0x7df
 8000a38:	4908      	ldr	r1, [pc, #32]	; (8000a5c <main+0x6c>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 fa4a 	bl	8008ed4 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uartBuf, strlen(uartBuf), 100);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fc22 	bl	800028c <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	1d39      	adds	r1, r7, #4
 8000a4e:	2364      	movs	r3, #100	; 0x64
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <main+0x70>)
 8000a52:	f007 fc63 	bl	800831c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <main+0x66>
 8000a58:	20000078 	.word	0x20000078
 8000a5c:	08009914 	.word	0x08009914
 8000a60:	200000dc 	.word	0x200000dc

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b09c      	sub	sp, #112	; 0x70
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0320 	add.w	r3, r7, #32
 8000a6e:	2250      	movs	r2, #80	; 0x50
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f008 fa4e 	bl	8008f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <SystemClock_Config+0xd8>)
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	; (8000b3c <SystemClock_Config+0xd8>)
 8000a90:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a94:	6113      	str	r3, [r2, #16]
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <SystemClock_Config+0xd8>)
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa2:	bf00      	nop
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <SystemClock_Config+0xd8>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	f003 0308 	and.w	r3, r3, #8
 8000aac:	2b08      	cmp	r3, #8
 8000aae:	d1f9      	bne.n	8000aa4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 8000ab0:	2312      	movs	r3, #18
 8000ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000ad6:	232a      	movs	r3, #42	; 0x2a
 8000ad8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fc6c 	bl	80023d4 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b02:	f000 f8c9 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	231f      	movs	r3, #31
 8000b08:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	2101      	movs	r1, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 f88d 	bl	8002c44 <HAL_RCC_ClockConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b30:	f000 f8b2 	bl	8000c98 <Error_Handler>
  }
}
 8000b34:	bf00      	nop
 8000b36:	3770      	adds	r7, #112	; 0x70
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	44020800 	.word	0x44020800

08000b40 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b46:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <MX_FDCAN1_Init+0x88>)
 8000b48:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b56:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b70:	2203      	movs	r2, #3
 8000b72:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b82:	2203      	movs	r2, #3
 8000b84:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_FDCAN1_Init+0x84>)
 8000bb2:	f000 fc4f 	bl	8001454 <HAL_FDCAN_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000bbc:	f000 f86c 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000078 	.word	0x20000078
 8000bc8:	4000a400 	.word	0x4000a400

08000bcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <MX_USART2_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c16:	f007 fb31 	bl	800827c <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 f83a 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c28:	f008 f856 	bl	8008cd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 f831 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c3a:	f008 f88b 	bl	8008d54 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 f828 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_USART2_UART_Init+0x90>)
 8000c4a:	f008 f80c 	bl	8008c66 <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f820 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200000dc 	.word	0x200000dc
 8000c60:	40004400 	.word	0x40004400

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_GPIO_Init+0x30>)
 8000c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c70:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <MX_GPIO_Init+0x30>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_GPIO_Init+0x30>)
 8000c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	44020c00 	.word	0x44020c00

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>

08000ca2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0cc      	sub	sp, #304	; 0x130
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cbe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000cd4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000cde:	461a      	mov	r2, r3
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f008 f917 	bl	8008f14 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000cea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a3c      	ldr	r2, [pc, #240]	; (8000de4 <HAL_FDCAN_MspInit+0x134>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d16f      	bne.n	8000dd8 <HAL_FDCAN_MspInit+0x128>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000cfc:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	f04f 0304 	mov.w	r3, #4
 8000d08:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000d10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d18:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 fad1 	bl	80032c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_FDCAN_MspInit+0x80>
    {
      Error_Handler();
 8000d2c:	f7ff ffb4 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <HAL_FDCAN_MspInit+0x138>)
 8000d32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000d36:	4a2c      	ldr	r2, [pc, #176]	; (8000de8 <HAL_FDCAN_MspInit+0x138>)
 8000d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <HAL_FDCAN_MspInit+0x138>)
 8000d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000d46:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8000d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000d4e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000d58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000d5c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <HAL_FDCAN_MspInit+0x138>)
 8000d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_FDCAN_MspInit+0x138>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <HAL_FDCAN_MspInit+0x138>)
 8000d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d74:	f003 0201 	and.w	r2, r3, #1
 8000d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000d7c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000d86:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000d8a:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000da6:	2309      	movs	r3, #9
 8000da8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000db0:	4619      	mov	r1, r3
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <HAL_FDCAN_MspInit+0x13c>)
 8000db4:	f001 f9bc 	bl	8002130 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2027      	movs	r0, #39	; 0x27
 8000dbe:	f000 fb14 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000dc2:	2027      	movs	r0, #39	; 0x27
 8000dc4:	f000 fb2b 	bl	800141e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2028      	movs	r0, #40	; 0x28
 8000dce:	f000 fb0c 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000dd2:	2028      	movs	r0, #40	; 0x28
 8000dd4:	f000 fb23 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	4000a400 	.word	0x4000a400
 8000de8:	44020c00 	.word	0x44020c00
 8000dec:	42020000 	.word	0x42020000

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0cc      	sub	sp, #304	; 0x130
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000dfe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000e1e:	461a      	mov	r2, r3
 8000e20:	2100      	movs	r1, #0
 8000e22:	f008 f877 	bl	8008f14 <memset>
  if(huart->Instance==USART2)
 8000e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a32      	ldr	r2, [pc, #200]	; (8000efc <HAL_UART_MspInit+0x10c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d15c      	bne.n	8000ef2 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e3c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000e40:	f04f 0202 	mov.w	r2, #2
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e50:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e54:	2200      	movs	r2, #0
 8000e56:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fa33 	bl	80032c8 <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000e68:	f7ff ff16 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_UART_MspInit+0x110>)
 8000e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_UART_MspInit+0x110>)
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_UART_MspInit+0x110>)
 8000e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e82:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8000e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e8a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e98:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_UART_MspInit+0x110>)
 8000e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_UART_MspInit+0x110>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_UART_MspInit+0x110>)
 8000eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eb0:	f003 0201 	and.w	r2, r3, #1
 8000eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000eb8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ec2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ec6:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_UART_MspInit+0x114>)
 8000eee:	f001 f91f 	bl	8002130 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40004400 	.word	0x40004400
 8000f00:	44020c00 	.word	0x44020c00
 8000f04:	42020000 	.word	0x42020000

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 f94e 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <FDCAN1_IT0_IRQHandler+0x10>)
 8000f62:	f000 fe85 	bl	8001c70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000078 	.word	0x20000078

08000f70 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <FDCAN1_IT1_IRQHandler+0x10>)
 8000f76:	f000 fe7b 	bl	8001c70 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000078 	.word	0x20000078

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f007 ffb6 	bl	8008f24 <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200a0000 	.word	0x200a0000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200002d0 	.word	0x200002d0
 8000fec:	20000420 	.word	0x20000420

08000ff0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <SystemInit+0xdc>)
 8000ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffc:	4a33      	ldr	r2, [pc, #204]	; (80010cc <SystemInit+0xdc>)
 8000ffe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001002:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001006:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <SystemInit+0xe0>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800100c:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <SystemInit+0xe0>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001012:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <SystemInit+0xe0>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001018:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <SystemInit+0xe0>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	492c      	ldr	r1, [pc, #176]	; (80010d0 <SystemInit+0xe0>)
 800101e:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <SystemInit+0xe4>)
 8001020:	4013      	ands	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <SystemInit+0xe0>)
 8001026:	2200      	movs	r2, #0
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <SystemInit+0xe0>)
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <SystemInit+0xe0>)
 8001032:	2200      	movs	r2, #0
 8001034:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <SystemInit+0xe0>)
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <SystemInit+0xe8>)
 800103a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <SystemInit+0xe0>)
 800103e:	2200      	movs	r2, #0
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <SystemInit+0xe0>)
 8001044:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <SystemInit+0xe8>)
 8001046:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <SystemInit+0xe0>)
 800104a:	2200      	movs	r2, #0
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <SystemInit+0xe0>)
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <SystemInit+0xe8>)
 8001052:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <SystemInit+0xe0>)
 8001056:	2200      	movs	r2, #0
 8001058:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <SystemInit+0xe0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <SystemInit+0xe0>)
 8001060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001064:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <SystemInit+0xe0>)
 8001068:	2200      	movs	r2, #0
 800106a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <SystemInit+0xdc>)
 800106e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001072:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <SystemInit+0xec>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800107c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001084:	d003      	beq.n	800108e <SystemInit+0x9e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800108c:	d117      	bne.n	80010be <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <SystemInit+0xec>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <SystemInit+0xec>)
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <SystemInit+0xf0>)
 800109e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <SystemInit+0xec>)
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <SystemInit+0xf4>)
 80010a4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <SystemInit+0xec>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <SystemInit+0xec>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <SystemInit+0xec>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <SystemInit+0xec>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	61d3      	str	r3, [r2, #28]
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	44020c00 	.word	0x44020c00
 80010d4:	eae2eae3 	.word	0xeae2eae3
 80010d8:	01010280 	.word	0x01010280
 80010dc:	40022000 	.word	0x40022000
 80010e0:	08192a3b 	.word	0x08192a3b
 80010e4:	4c5d6e7f 	.word	0x4c5d6e7f

080010e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ee:	e003      	b.n	80010f8 <LoopCopyDataInit>

080010f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010f6:	3104      	adds	r1, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <LoopForever+0xe>)
	adds	r2, r0, r1
 80010fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001100:	d3f6      	bcc.n	80010f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001104:	e002      	b.n	800110c <LoopFillZerobss>

08001106 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001106:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001108:	f842 3b04 	str.w	r3, [r2], #4

0800110c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <LoopForever+0x16>)
	cmp	r2, r3
 800110e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001110:	d3f9      	bcc.n	8001106 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001112:	f7ff ff6d 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f007 ff0b 	bl	8008f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800111a:	f7ff fc69 	bl	80009f0 <main>

0800111e <LoopForever>:

LoopForever:
    b LoopForever
 800111e:	e7fe      	b.n	800111e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001120:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001124:	080099dc 	.word	0x080099dc
	ldr	r0, =_sdata
 8001128:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800112c:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 8001130:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 8001134:	20000420 	.word	0x20000420

08001138 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_IRQHandler>
	...

0800113c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f947 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001146:	f001 ff35 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 800114a:	4602      	mov	r2, r0
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x40>)
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	f003 030f 	and.w	r3, r3, #15
 8001154:	490a      	ldr	r1, [pc, #40]	; (8001180 <HAL_Init+0x44>)
 8001156:	5ccb      	ldrb	r3, [r1, r3]
 8001158:	fa22 f303 	lsr.w	r3, r2, r3
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_Init+0x48>)
 800115e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001160:	200f      	movs	r0, #15
 8001162:	f000 f811 	bl	8001188 <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e002      	b.n	8001176 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fd97 	bl	8000ca2 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	44020c00 	.word	0x44020c00
 8001180:	08009948 	.word	0x08009948
 8001184:	20000000 	.word	0x20000000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_InitTick+0x60>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e021      	b.n	80011e0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <HAL_InitTick+0x64>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_InitTick+0x60>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f941 	bl	800143a <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f90b 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x68>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000004 	.word	0x20000004

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008
 8001218:	200002d4 	.word	0x200002d4

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200002d4 	.word	0x200002d4

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff29 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff40 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff90 	bl	8001328 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5f 	bl	80012d4 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff33 	bl	8001298 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa4 	bl	8001390 <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e147      	b.n	80016f6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fc18 	bl	8000cb0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699a      	ldr	r2, [r3, #24]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0210 	bic.w	r2, r2, #16
 800148e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001490:	f7ff fec4 	bl	800121c <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001496:	e012      	b.n	80014be <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001498:	f7ff fec0 	bl	800121c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b0a      	cmp	r3, #10
 80014a4:	d90b      	bls.n	80014be <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2203      	movs	r2, #3
 80014b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e11b      	b.n	80016f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d0e5      	beq.n	8001498 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014dc:	f7ff fe9e 	bl	800121c <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80014e2:	e012      	b.n	800150a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80014e4:	f7ff fe9a 	bl	800121c <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b0a      	cmp	r3, #10
 80014f0:	d90b      	bls.n	800150a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2203      	movs	r2, #3
 8001502:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e0f5      	b.n	80016f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0e5      	beq.n	80014e4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	699a      	ldr	r2, [r3, #24]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0202 	orr.w	r2, r2, #2
 8001526:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a74      	ldr	r2, [pc, #464]	; (8001700 <HAL_FDCAN_Init+0x2ac>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d103      	bne.n	800153a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001532:	4a74      	ldr	r2, [pc, #464]	; (8001704 <HAL_FDCAN_Init+0x2b0>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7c1b      	ldrb	r3, [r3, #16]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d108      	bne.n	8001554 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	e007      	b.n	8001564 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001562:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7c5b      	ldrb	r3, [r3, #17]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d108      	bne.n	800157e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	699a      	ldr	r2, [r3, #24]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800157a:	619a      	str	r2, [r3, #24]
 800157c:	e007      	b.n	800158e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699a      	ldr	r2, [r3, #24]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800158c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7c9b      	ldrb	r3, [r3, #18]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015a4:	619a      	str	r2, [r3, #24]
 80015a6:	e007      	b.n	80015b8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699a      	ldr	r2, [r3, #24]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015b6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	699a      	ldr	r2, [r3, #24]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80015dc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691a      	ldr	r2, [r3, #16]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0210 	bic.w	r2, r2, #16
 80015ec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d108      	bne.n	8001608 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699a      	ldr	r2, [r3, #24]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0204 	orr.w	r2, r2, #4
 8001604:	619a      	str	r2, [r3, #24]
 8001606:	e02c      	b.n	8001662 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d028      	beq.n	8001662 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d01c      	beq.n	8001652 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699a      	ldr	r2, [r3, #24]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001626:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0210 	orr.w	r2, r2, #16
 8001636:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d110      	bne.n	8001662 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	699a      	ldr	r2, [r3, #24]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0220 	orr.w	r2, r2, #32
 800164e:	619a      	str	r2, [r3, #24]
 8001650:	e007      	b.n	8001662 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699a      	ldr	r2, [r3, #24]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0220 	orr.w	r2, r2, #32
 8001660:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	3b01      	subs	r3, #1
 8001668:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	3b01      	subs	r3, #1
 8001670:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001672:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800167a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	3b01      	subs	r3, #1
 8001684:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800168a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800168c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001696:	d115      	bne.n	80016c4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	3b01      	subs	r3, #1
 80016a4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016a6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	3b01      	subs	r3, #1
 80016ae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80016b0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	3b01      	subs	r3, #1
 80016ba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80016c0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80016c2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fc56 	bl	8001f8c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	4000a400 	.word	0x4000a400
 8001704:	4000a500 	.word	0x4000a500

08001708 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001718:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d002      	beq.n	8001726 <HAL_FDCAN_ConfigFilter+0x1e>
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d13d      	bne.n	80017a2 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d119      	bne.n	8001762 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800173a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001742:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e01d      	b.n	800179e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	075a      	lsls	r2, r3, #29
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	079a      	lsls	r2, r3, #30
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4413      	add	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	3304      	adds	r3, #4
 8001796:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e006      	b.n	80017b0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	f043 0202 	orr.w	r2, r3, #2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
  }
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d110      	bne.n	80017f2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e006      	b.n	8001800 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	f043 0204 	orr.w	r2, r3, #4
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
  }
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d12c      	bne.n	800187e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001838:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e023      	b.n	800188c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fbec 	bl	8002038 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001870:	2201      	movs	r2, #1
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	409a      	lsls	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e006      	b.n	800188c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	f043 0208 	orr.w	r2, r3, #8
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
  }
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001894:	b480      	push	{r7}
 8001896:	b08b      	sub	sp, #44	; 0x2c
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80018ac:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80018ae:	7efb      	ldrb	r3, [r7, #27]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	f040 80e8 	bne.w	8001a86 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b40      	cmp	r3, #64	; 0x40
 80018ba:	d137      	bne.n	800192c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d107      	bne.n	80018dc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0db      	b.n	8001a94 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e4:	0e1b      	lsrs	r3, r3, #24
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d10a      	bne.n	8001904 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	0a5b      	lsrs	r3, r3, #9
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001900:	2301      	movs	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	4413      	add	r3, r2
 8001916:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	e036      	b.n	800199a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	2b00      	cmp	r3, #0
 800193a:	d107      	bne.n	800194c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001940:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0a3      	b.n	8001a94 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001954:	0e1b      	lsrs	r3, r3, #24
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b01      	cmp	r3, #1
 800195c:	d10a      	bne.n	8001974 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001970:	2301      	movs	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	4413      	add	r3, r2
 8001986:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d107      	bne.n	80019be <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0c9b      	lsrs	r3, r3, #18
 80019b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e005      	b.n	80019ca <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	3304      	adds	r3, #4
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0c1b      	lsrs	r3, r3, #16
 80019f8:	f003 020f 	and.w	r2, r3, #15
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0e1b      	lsrs	r3, r3, #24
 8001a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0fda      	lsrs	r2, r3, #31
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	3304      	adds	r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
 8001a3e:	e00a      	b.n	8001a56 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	441a      	add	r2, r3
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	440b      	add	r3, r1
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	3301      	adds	r3, #1
 8001a54:	623b      	str	r3, [r7, #32]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d3ec      	bcc.n	8001a40 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b40      	cmp	r3, #64	; 0x40
 8001a6a:	d105      	bne.n	8001a78 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8001a76:	e004      	b.n	8001a82 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e006      	b.n	8001a94 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	f043 0208 	orr.w	r2, r3, #8
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	372c      	adds	r7, #44	; 0x2c
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	08009960 	.word	0x08009960

08001aa4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ab6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d003      	beq.n	8001ac6 <HAL_FDCAN_ActivateNotification+0x22>
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	f040 80c8 	bne.w	8001c56 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d03b      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d031      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d027      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d004      	beq.n	8001b1e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01d      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d013      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d004      	beq.n	8001b46 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f003 0320 	and.w	r3, r3, #32
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00c      	beq.n	8001b6a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d13b      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d131      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d127      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d11d      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d113      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0202 	orr.w	r2, r2, #2
 8001c04:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e006      	b.n	8001c64 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	f043 0202 	orr.w	r2, r3, #2
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8001cca:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd2:	6a3a      	ldr	r2, [r7, #32]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cde:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ce2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfe:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00b      	beq.n	8001d22 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2240      	movs	r2, #64	; 0x40
 8001d1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f916 	bl	8001f4e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d019      	beq.n	8001d60 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d014      	beq.n	8001d60 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d3e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d56:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001d58:	6939      	ldr	r1, [r7, #16]
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8d8 	bl	8001f10 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d007      	beq.n	8001d76 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001d6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8a2 	bl	8001eba <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d82:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7fe fd72 	bl	8000870 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d98:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001d9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f897 	bl	8001ed0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00c      	beq.n	8001dc6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dbe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f890 	bl	8001ee6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d018      	beq.n	8001e02 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d013      	beq.n	8001e02 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001de2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f87c 	bl	8001efa <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f880 	bl	8001f26 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00c      	beq.n	8001e4a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e42:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f878 	bl	8001f3a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00f      	beq.n	8001e74 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e82:	69f9      	ldr	r1, [r7, #28]
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f876 	bl	8001f76 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a3a      	ldr	r2, [r7, #32]
 8001e96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f858 	bl	8001f62 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3730      	adds	r7, #48	; 0x30
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001f96:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fa6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	041a      	lsls	r2, r3, #16
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fcc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	061a      	lsls	r2, r3, #24
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e005      	b.n	800201a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3304      	adds	r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3f3      	bcc.n	800200e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8002026:	bf00      	nop
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	4000ac00 	.word	0x4000ac00

08002038 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10a      	bne.n	8002064 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002056:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800205e:	4313      	orrs	r3, r2
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	e00a      	b.n	800207a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800206c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002072:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002078:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002084:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800208a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002090:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	3304      	adds	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	3304      	adds	r3, #4
 80020c4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	e020      	b.n	800210e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3303      	adds	r3, #3
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3302      	adds	r3, #2
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	440b      	add	r3, r1
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020e4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3301      	adds	r3, #1
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	440b      	add	r3, r1
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80020f2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	440a      	add	r2, r1
 80020fa:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80020fc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	3304      	adds	r3, #4
 8002106:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3304      	adds	r3, #4
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	4a06      	ldr	r2, [pc, #24]	; (800212c <FDCAN_CopyMessageToRAM+0xf4>)
 8002114:	5cd3      	ldrb	r3, [r2, r3]
 8002116:	461a      	mov	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	4293      	cmp	r3, r2
 800211c:	d3d6      	bcc.n	80020cc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	3724      	adds	r7, #36	; 0x24
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	08009960 	.word	0x08009960

08002130 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800213e:	e136      	b.n	80023ae <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8128 	beq.w	80023a8 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x38>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b12      	cmp	r3, #18
 8002166:	d125      	bne.n	80021b4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002174:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f003 020f 	and.w	r2, r3, #15
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	08da      	lsrs	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3208      	adds	r2, #8
 80021ae:	6979      	ldr	r1, [r7, #20]
 80021b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	4013      	ands	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0203 	and.w	r2, r3, #3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d00b      	beq.n	8002208 <HAL_GPIO_Init+0xd8>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d007      	beq.n	8002208 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021fc:	2b11      	cmp	r3, #17
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b12      	cmp	r3, #18
 8002206:	d130      	bne.n	800226a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4013      	ands	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800223e:	2201      	movs	r2, #1
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4013      	ands	r3, r2
 800224c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 0201 	and.w	r2, r3, #1
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d017      	beq.n	80022a2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	4013      	ands	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d07c      	beq.n	80023a8 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80022ae:	4a47      	ldr	r2, [pc, #284]	; (80023cc <HAL_GPIO_Init+0x29c>)
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3318      	adds	r3, #24
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4013      	ands	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	0a9a      	lsrs	r2, r3, #10
 80022d6:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <HAL_GPIO_Init+0x2a0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	f002 0203 	and.w	r2, r2, #3
 80022e0:	00d2      	lsls	r2, r2, #3
 80022e2:	4093      	lsls	r3, r2
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022ea:	4938      	ldr	r1, [pc, #224]	; (80023cc <HAL_GPIO_Init+0x29c>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3318      	adds	r3, #24
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022f8:	4b34      	ldr	r3, [pc, #208]	; (80023cc <HAL_GPIO_Init+0x29c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43db      	mvns	r3, r3
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4013      	ands	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <HAL_GPIO_Init+0x29c>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_GPIO_Init+0x29c>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43db      	mvns	r3, r3
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	4013      	ands	r3, r2
 8002330:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <HAL_GPIO_Init+0x29c>)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800234c:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_GPIO_Init+0x29c>)
 800234e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002352:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4013      	ands	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002372:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_GPIO_Init+0x29c>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <HAL_GPIO_Init+0x29c>)
 800237c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002380:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	43db      	mvns	r3, r3
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	4013      	ands	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_GPIO_Init+0x29c>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	3301      	adds	r3, #1
 80023ac:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f47f aec1 	bne.w	8002140 <HAL_GPIO_Init+0x10>
  }
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	44022000 	.word	0x44022000
 80023d0:	002f7f7f 	.word	0x002f7f7f

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f000 bc28 	b.w	8002c38 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023e8:	4b94      	ldr	r3, [pc, #592]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f003 0318 	and.w	r3, r3, #24
 80023f0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80023f2:	4b92      	ldr	r3, [pc, #584]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05b      	beq.n	80024c0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b08      	cmp	r3, #8
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x46>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b18      	cmp	r3, #24
 8002412:	d114      	bne.n	800243e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d111      	bne.n	800243e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f000 bc08 	b.w	8002c38 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002428:	4b84      	ldr	r3, [pc, #528]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4981      	ldr	r1, [pc, #516]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002438:	4313      	orrs	r3, r2
 800243a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800243c:	e040      	b.n	80024c0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d023      	beq.n	800248e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002446:	4b7d      	ldr	r3, [pc, #500]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a7c      	ldr	r2, [pc, #496]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800244c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe fee3 	bl	800121c <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800245a:	f7fe fedf 	bl	800121c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e3e5      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800246c:	4b73      	ldr	r3, [pc, #460]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002478:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	496d      	ldr	r1, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002488:	4313      	orrs	r3, r2
 800248a:	618b      	str	r3, [r1, #24]
 800248c:	e018      	b.n	80024c0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800248e:	4b6b      	ldr	r3, [pc, #428]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6a      	ldr	r2, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe febf 	bl	800121c <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80024a2:	f7fe febb 	bl	800121c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e3c1      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a0 	beq.w	800260e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_OscConfig+0x10c>
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b18      	cmp	r3, #24
 80024d8:	d109      	bne.n	80024ee <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 8092 	bne.w	800260e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e3a4      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x132>
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4f      	ldr	r2, [pc, #316]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e058      	b.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d112      	bne.n	8002534 <HAL_RCC_OscConfig+0x160>
 800250e:	4b4b      	ldr	r3, [pc, #300]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a4a      	ldr	r2, [pc, #296]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a47      	ldr	r2, [pc, #284]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002520:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b45      	ldr	r3, [pc, #276]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a44      	ldr	r2, [pc, #272]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800252c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	e041      	b.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800253c:	d112      	bne.n	8002564 <HAL_RCC_OscConfig+0x190>
 800253e:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a3e      	ldr	r2, [pc, #248]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b3c      	ldr	r3, [pc, #240]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a3b      	ldr	r2, [pc, #236]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002550:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a38      	ldr	r2, [pc, #224]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e029      	b.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800256c:	d112      	bne.n	8002594 <HAL_RCC_OscConfig+0x1c0>
 800256e:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a32      	ldr	r2, [pc, #200]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a2f      	ldr	r2, [pc, #188]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2c      	ldr	r2, [pc, #176]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e011      	b.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
 8002594:	4b29      	ldr	r3, [pc, #164]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a28      	ldr	r2, [pc, #160]	; (800263c <HAL_RCC_OscConfig+0x268>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a25      	ldr	r2, [pc, #148]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80025a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a22      	ldr	r2, [pc, #136]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80025b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fe2c 	bl	800121c <HAL_GetTick>
 80025c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fe28 	bl	800121c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e32e      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_RCC_OscConfig+0x268>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1f4>
 80025e6:	e012      	b.n	800260e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fe18 	bl	800121c <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80025f0:	f7fe fe14 	bl	800121c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e31a      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HAL_RCC_OscConfig+0x268>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 809a 	beq.w	8002750 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x25a>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	2b18      	cmp	r3, #24
 8002626:	d149      	bne.n	80026bc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d146      	bne.n	80026bc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e2fe      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
 800263a:	bf00      	nop
 800263c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11c      	bne.n	8002680 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002646:	4b9a      	ldr	r3, [pc, #616]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0218 	and.w	r2, r3, #24
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	429a      	cmp	r2, r3
 8002654:	d014      	beq.n	8002680 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002656:	4b96      	ldr	r3, [pc, #600]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0218 	bic.w	r2, r3, #24
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	4993      	ldr	r1, [pc, #588]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002668:	f000 fdd0 	bl	800320c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800266c:	4b91      	ldr	r3, [pc, #580]	; (80028b4 <HAL_RCC_OscConfig+0x4e0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fd89 	bl	8001188 <HAL_InitTick>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e2db      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fdcc 	bl	800121c <HAL_GetTick>
 8002684:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002688:	f7fe fdc8 	bl	800121c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e2ce      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800269a:	4b85      	ldr	r3, [pc, #532]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80026a6:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	497e      	ldr	r1, [pc, #504]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80026ba:	e049      	b.n	8002750 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02c      	beq.n	800271e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80026c4:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0218 	bic.w	r2, r3, #24
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4977      	ldr	r1, [pc, #476]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7fe fd9b 	bl	800121c <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80026ea:	f7fe fd97 	bl	800121c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e29d      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026fc:	4b6c      	ldr	r3, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002708:	4b69      	ldr	r3, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	4966      	ldr	r1, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	610b      	str	r3, [r1, #16]
 800271c:	e018      	b.n	8002750 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271e:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fd77 	bl	800121c <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002732:	f7fe fd73 	bl	800121c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e279      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002744:	4b5a      	ldr	r3, [pc, #360]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01c      	beq.n	800279e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002764:	4b52      	ldr	r3, [pc, #328]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800276a:	4a51      	ldr	r2, [pc, #324]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800276c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002770:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fd52 	bl	800121c <HAL_GetTick>
 8002778:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800277c:	f7fe fd4e 	bl	800121c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e254      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800278e:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <HAL_RCC_OscConfig+0x3a8>
 800279c:	e01b      	b.n	80027d6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279e:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80027a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027a4:	4a42      	ldr	r2, [pc, #264]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80027a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7fe fd35 	bl	800121c <HAL_GetTick>
 80027b2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80027b6:	f7fe fd31 	bl	800121c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e237      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80027ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ef      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80d2 	beq.w	8002988 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80027e4:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d118      	bne.n	8002822 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80027f0:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	4a30      	ldr	r2, [pc, #192]	; (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fc:	f7fe fd0e 	bl	800121c <HAL_GetTick>
 8002800:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f7fe fd0a 	bl	800121c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e210      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d108      	bne.n	800283c <HAL_RCC_OscConfig+0x468>
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800282c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002830:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800283a:	e074      	b.n	8002926 <HAL_RCC_OscConfig+0x552>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d118      	bne.n	8002876 <HAL_RCC_OscConfig+0x4a2>
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800284a:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800285a:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800285c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002860:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800286a:	4a11      	ldr	r2, [pc, #68]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002874:	e057      	b.n	8002926 <HAL_RCC_OscConfig+0x552>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d11e      	bne.n	80028bc <HAL_RCC_OscConfig+0x4e8>
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002884:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 8002896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800289a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80028a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028a4:	4a02      	ldr	r2, [pc, #8]	; (80028b0 <HAL_RCC_OscConfig+0x4dc>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028ae:	e03a      	b.n	8002926 <HAL_RCC_OscConfig+0x552>
 80028b0:	44020c00 	.word	0x44020c00
 80028b4:	20000004 	.word	0x20000004
 80028b8:	44020800 	.word	0x44020800
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b85      	cmp	r3, #133	; 0x85
 80028c2:	d118      	bne.n	80028f6 <HAL_RCC_OscConfig+0x522>
 80028c4:	4ba2      	ldr	r3, [pc, #648]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ca:	4aa1      	ldr	r2, [pc, #644]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028d4:	4b9e      	ldr	r3, [pc, #632]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028da:	4a9d      	ldr	r2, [pc, #628]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028e4:	4b9a      	ldr	r3, [pc, #616]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ea:	4a99      	ldr	r2, [pc, #612]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028f4:	e017      	b.n	8002926 <HAL_RCC_OscConfig+0x552>
 80028f6:	4b96      	ldr	r3, [pc, #600]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028fc:	4a94      	ldr	r2, [pc, #592]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002906:	4b92      	ldr	r3, [pc, #584]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800290c:	4a90      	ldr	r2, [pc, #576]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002916:	4b8e      	ldr	r3, [pc, #568]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800291c:	4a8c      	ldr	r2, [pc, #560]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800291e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002922:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fc75 	bl	800121c <HAL_GetTick>
 8002932:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fc71 	bl	800121c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e175      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294c:	4b80      	ldr	r3, [pc, #512]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800294e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ed      	beq.n	8002936 <HAL_RCC_OscConfig+0x562>
 800295a:	e015      	b.n	8002988 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fc5e 	bl	800121c <HAL_GetTick>
 8002960:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fe fc5a 	bl	800121c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e15e      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297a:	4b75      	ldr	r3, [pc, #468]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800297c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ed      	bne.n	8002964 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d036      	beq.n	8002a02 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	2b00      	cmp	r3, #0
 800299a:	d019      	beq.n	80029d0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800299c:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6b      	ldr	r2, [pc, #428]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe fc38 	bl	800121c <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80029b0:	f7fe fc34 	bl	800121c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e13a      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x5dc>
 80029ce:	e018      	b.n	8002a02 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029d0:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a5e      	ldr	r2, [pc, #376]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe fc1e 	bl	800121c <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80029e4:	f7fe fc1a 	bl	800121c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e120      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029f6:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8115 	beq.w	8002c36 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b18      	cmp	r3, #24
 8002a10:	f000 80af 	beq.w	8002b72 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	f040 8086 	bne.w	8002b2a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fbf7 	bl	800121c <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002a32:	f7fe fbf3 	bl	800121c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0f9      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a44:	4b42      	ldr	r3, [pc, #264]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002a50:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a58:	f023 0303 	bic.w	r3, r3, #3
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a64:	0212      	lsls	r2, r2, #8
 8002a66:	430a      	orrs	r2, r1
 8002a68:	4939      	ldr	r1, [pc, #228]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	628b      	str	r3, [r1, #40]	; 0x28
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	025b      	lsls	r3, r3, #9
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	3b01      	subs	r3, #1
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a9e:	492c      	ldr	r1, [pc, #176]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002aaa:	f023 0310 	bic.w	r3, r3, #16
 8002aae:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	4a24      	ldr	r2, [pc, #144]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f023 020c 	bic.w	r2, r3, #12
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	491f      	ldr	r1, [pc, #124]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	f023 0220 	bic.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae4:	491a      	ldr	r1, [pc, #104]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002aea:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002afc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe fb8b 	bl	800121c <HAL_GetTick>
 8002b06:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe fb87 	bl	800121c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e08d      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x736>
 8002b28:	e085      	b.n	8002c36 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <HAL_RCC_OscConfig+0x77c>)
 8002b30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe fb71 	bl	800121c <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe fb6d 	bl	800121c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d903      	bls.n	8002b54 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e073      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
 8002b50:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	4a36      	ldr	r2, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b66:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	6293      	str	r3, [r2, #40]	; 0x28
 8002b70:	e061      	b.n	8002c36 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b78:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d031      	beq.n	8002bea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f003 0203 	and.w	r2, r3, #3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d12a      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d122      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d11a      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	0a5b      	lsrs	r3, r3, #9
 8002bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d111      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d108      	bne.n	8002bea <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	0e1b      	lsrs	r3, r3, #24
 8002bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e024      	b.n	8002c38 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	08db      	lsrs	r3, r3, #3
 8002bf4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d01a      	beq.n	8002c36 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c06:	f023 0310 	bic.w	r3, r3, #16
 8002c0a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fb06 	bl	800121c <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002c12:	bf00      	nop
 8002c14:	f7fe fb02 	bl	800121c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d0f9      	beq.n	8002c14 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <HAL_RCC_OscConfig+0x86c>)
 8002c30:	f043 0310 	orr.w	r3, r3, #16
 8002c34:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	44020c00 	.word	0x44020c00

08002c44 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e19e      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b83      	ldr	r3, [pc, #524]	; (8002e68 <HAL_RCC_ClockConfig+0x224>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d910      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b80      	ldr	r3, [pc, #512]	; (8002e68 <HAL_RCC_ClockConfig+0x224>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 020f 	bic.w	r2, r3, #15
 8002c6e:	497e      	ldr	r1, [pc, #504]	; (8002e68 <HAL_RCC_ClockConfig+0x224>)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b7c      	ldr	r3, [pc, #496]	; (8002e68 <HAL_RCC_ClockConfig+0x224>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e186      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d012      	beq.n	8002cba <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	4b74      	ldr	r3, [pc, #464]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d909      	bls.n	8002cba <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002ca6:	4b71      	ldr	r3, [pc, #452]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	496d      	ldr	r1, [pc, #436]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d012      	beq.n	8002cec <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d909      	bls.n	8002cec <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002cd8:	4b64      	ldr	r3, [pc, #400]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4961      	ldr	r1, [pc, #388]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	4b5b      	ldr	r3, [pc, #364]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d908      	bls.n	8002d1a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d08:	4b58      	ldr	r3, [pc, #352]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4955      	ldr	r1, [pc, #340]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d908      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d36:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 020f 	bic.w	r2, r3, #15
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	494a      	ldr	r1, [pc, #296]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 8093 	beq.w	8002e7c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d5e:	4b43      	ldr	r3, [pc, #268]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d121      	bne.n	8002dae <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e113      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d76:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d115      	bne.n	8002dae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e107      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0fb      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9e:	4b33      	ldr	r3, [pc, #204]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0f3      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	492c      	ldr	r1, [pc, #176]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fa2c 	bl	800121c <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d112      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd0:	f7fe fa24 	bl	800121c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0d7      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de6:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0318 	and.w	r3, r3, #24
 8002dee:	2b18      	cmp	r3, #24
 8002df0:	d1ee      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x18c>
 8002df2:	e043      	b.n	8002e7c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d112      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfe:	f7fe fa0d 	bl	800121c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0c0      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f003 0318 	and.w	r3, r3, #24
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d1ee      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1ba>
 8002e20:	e02c      	b.n	8002e7c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d122      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2c:	f7fe f9f6 	bl	800121c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0a9      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_RCC_ClockConfig+0x228>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 0318 	and.w	r3, r3, #24
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d1ee      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1e8>
 8002e4e:	e015      	b.n	8002e7c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe f9e4 	bl	800121c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d906      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e097      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
 8002e66:	bf00      	nop
 8002e68:	40022000 	.word	0x40022000
 8002e6c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e70:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f003 0318 	and.w	r3, r3, #24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e9      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d010      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	4b44      	ldr	r3, [pc, #272]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d208      	bcs.n	8002eaa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002e98:	4b41      	ldr	r3, [pc, #260]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f023 020f 	bic.w	r2, r3, #15
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	493e      	ldr	r1, [pc, #248]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	; (8002fa4 <HAL_RCC_ClockConfig+0x360>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d210      	bcs.n	8002eda <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb8:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCC_ClockConfig+0x360>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 020f 	bic.w	r2, r3, #15
 8002ec0:	4938      	ldr	r1, [pc, #224]	; (8002fa4 <HAL_RCC_ClockConfig+0x360>)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_ClockConfig+0x360>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d001      	beq.n	8002eda <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e05d      	b.n	8002f96 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d208      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002ef6:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	4927      	ldr	r1, [pc, #156]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d209      	bcs.n	8002f3a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002f26:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	491a      	ldr	r1, [pc, #104]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d209      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f6c:	f000 f822 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_ClockConfig+0x35c>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	490b      	ldr	r1, [pc, #44]	; (8002fa8 <HAL_RCC_ClockConfig+0x364>)
 8002f7c:	5ccb      	ldrb	r3, [r1, r3]
 8002f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_RCC_ClockConfig+0x368>)
 8002f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <HAL_RCC_ClockConfig+0x36c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe f8fc 	bl	8001188 <HAL_InitTick>
 8002f90:	4603      	mov	r3, r0
 8002f92:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002f94:	7afb      	ldrb	r3, [r7, #11]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	44020c00 	.word	0x44020c00
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	08009948 	.word	0x08009948
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	20000004 	.word	0x20000004

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002fba:	4b8c      	ldr	r3, [pc, #560]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 0318 	and.w	r3, r3, #24
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d102      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002fc6:	4b8a      	ldr	r3, [pc, #552]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e107      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fcc:	4b87      	ldr	r3, [pc, #540]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f003 0318 	and.w	r3, r3, #24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d112      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002fd8:	4b84      	ldr	r3, [pc, #528]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002fe4:	4b81      	ldr	r3, [pc, #516]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	4a81      	ldr	r2, [pc, #516]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e0f1      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002ff8:	4b7e      	ldr	r3, [pc, #504]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x240>)
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	e0ee      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ffe:	4b7b      	ldr	r3, [pc, #492]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0318 	and.w	r3, r3, #24
 8003006:	2b10      	cmp	r3, #16
 8003008:	d102      	bne.n	8003010 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800300a:	4b7b      	ldr	r3, [pc, #492]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x244>)
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e0e5      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003010:	4b76      	ldr	r3, [pc, #472]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f003 0318 	and.w	r3, r3, #24
 8003018:	2b18      	cmp	r3, #24
 800301a:	f040 80dd 	bne.w	80031d8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800301e:	4b73      	ldr	r3, [pc, #460]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003028:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003032:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003034:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003044:	08db      	lsrs	r3, r3, #3
 8003046:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003058:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 80b7 	beq.w	80031d2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d003      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0xbe>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d056      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x16a>
 8003070:	e077      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003072:	4b5e      	ldr	r3, [pc, #376]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d02d      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	08db      	lsrs	r3, r3, #3
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	4a5a      	ldr	r2, [pc, #360]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x240>)
 800308a:	fa22 f303 	lsr.w	r3, r2, r3
 800308e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a8:	4b50      	ldr	r3, [pc, #320]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80030bc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80031fc <HAL_RCC_GetSysClockFreq+0x248>
 80030c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80030d8:	e065      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003200 <HAL_RCC_GetSysClockFreq+0x24c>
 80030e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ec:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 80030ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80030fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003100:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80031fc <HAL_RCC_GetSysClockFreq+0x248>
 8003104:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003108:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800310c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003110:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003118:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800311c:	e043      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	ee07 3a90 	vmov	s15, r3
 8003124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003128:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003204 <HAL_RCC_GetSysClockFreq+0x250>
 800312c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003138:	ee07 3a90 	vmov	s15, r3
 800313c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003140:	ed97 6a02 	vldr	s12, [r7, #8]
 8003144:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80031fc <HAL_RCC_GetSysClockFreq+0x248>
 8003148:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800314c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003154:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003160:	e021      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316c:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003208 <HAL_RCC_GetSysClockFreq+0x254>
 8003170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003184:	ed97 6a02 	vldr	s12, [r7, #8]
 8003188:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80031fc <HAL_RCC_GetSysClockFreq+0x248>
 800318c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003190:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003198:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800319c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80031a4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <HAL_RCC_GetSysClockFreq+0x238>)
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031aa:	0a5b      	lsrs	r3, r3, #9
 80031ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b0:	3301      	adds	r3, #1
 80031b2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031be:	edd7 6a06 	vldr	s13, [r7, #24]
 80031c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ca:	ee17 3a90 	vmov	r3, s15
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	e004      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	e001      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x240>)
 80031da:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80031dc:	69fb      	ldr	r3, [r7, #28]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	; 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	44020c00 	.word	0x44020c00
 80031f0:	003d0900 	.word	0x003d0900
 80031f4:	03d09000 	.word	0x03d09000
 80031f8:	017d7840 	.word	0x017d7840
 80031fc:	46000000 	.word	0x46000000
 8003200:	4c742400 	.word	0x4c742400
 8003204:	4bbebc20 	.word	0x4bbebc20
 8003208:	4a742400 	.word	0x4a742400

0800320c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003210:	f7ff fed0 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800321a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800321e:	4907      	ldr	r1, [pc, #28]	; (800323c <HAL_RCC_GetHCLKFreq+0x30>)
 8003220:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003222:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a05      	ldr	r2, [pc, #20]	; (8003240 <HAL_RCC_GetHCLKFreq+0x34>)
 800322c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <HAL_RCC_GetHCLKFreq+0x34>)
 8003230:	681b      	ldr	r3, [r3, #0]
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	44020c00 	.word	0x44020c00
 800323c:	08009948 	.word	0x08009948
 8003240:	20000000 	.word	0x20000000

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003248:	f7ff ffe0 	bl	800320c <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4904      	ldr	r1, [pc, #16]	; (800326c <HAL_RCC_GetPCLK1Freq+0x28>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	44020c00 	.word	0x44020c00
 800326c:	08009958 	.word	0x08009958

08003270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003274:	f7ff ffca 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	44020c00 	.word	0x44020c00
 8003298:	08009958 	.word	0x08009958

0800329c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80032a0:	f7ff ffb4 	bl	800320c <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	0b1b      	lsrs	r3, r3, #12
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4904      	ldr	r1, [pc, #16]	; (80032c4 <HAL_RCC_GetPCLK3Freq+0x28>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	44020c00 	.word	0x44020c00
 80032c4:	08009958 	.word	0x08009958

080032c8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80032c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032cc:	b0d6      	sub	sp, #344	; 0x158
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 80032ec:	2500      	movs	r5, #0
 80032ee:	ea54 0305 	orrs.w	r3, r4, r5
 80032f2:	d00b      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80032f4:	4bcd      	ldr	r3, [pc, #820]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032fa:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80032fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	4ac9      	ldr	r2, [pc, #804]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003306:	430b      	orrs	r3, r1
 8003308:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800330c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f002 0801 	and.w	r8, r2, #1
 8003318:	f04f 0900 	mov.w	r9, #0
 800331c:	ea58 0309 	orrs.w	r3, r8, r9
 8003320:	d042      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003322:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	2b05      	cmp	r3, #5
 800332a:	d823      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xac>
 800332c:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	0800337d 	.word	0x0800337d
 8003338:	0800334d 	.word	0x0800334d
 800333c:	08003361 	.word	0x08003361
 8003340:	0800337d 	.word	0x0800337d
 8003344:	0800337d 	.word	0x0800337d
 8003348:	0800337d 	.word	0x0800337d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800334c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003350:	3308      	adds	r3, #8
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fe62 	bl	800801c <RCCEx_PLL2_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 800335e:	e00e      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003360:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003364:	3330      	adds	r3, #48	; 0x30
 8003366:	4618      	mov	r0, r3
 8003368:	f004 fef0 	bl	800814c <RCCEx_PLL3_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8003372:	e004      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800337a:	e000      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800337c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003386:	4ba9      	ldr	r3, [pc, #676]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800338c:	f023 0107 	bic.w	r1, r3, #7
 8003390:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003396:	4aa5      	ldr	r2, [pc, #660]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003398:	430b      	orrs	r3, r1
 800339a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800339e:	e003      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80033a4:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f002 0a02 	and.w	sl, r2, #2
 80033b4:	f04f 0b00 	mov.w	fp, #0
 80033b8:	ea5a 030b 	orrs.w	r3, sl, fp
 80033bc:	f000 8088 	beq.w	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80033c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80033c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c6:	2b28      	cmp	r3, #40	; 0x28
 80033c8:	d868      	bhi.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80033ca:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	080034a5 	.word	0x080034a5
 80033d4:	0800349d 	.word	0x0800349d
 80033d8:	0800349d 	.word	0x0800349d
 80033dc:	0800349d 	.word	0x0800349d
 80033e0:	0800349d 	.word	0x0800349d
 80033e4:	0800349d 	.word	0x0800349d
 80033e8:	0800349d 	.word	0x0800349d
 80033ec:	0800349d 	.word	0x0800349d
 80033f0:	08003475 	.word	0x08003475
 80033f4:	0800349d 	.word	0x0800349d
 80033f8:	0800349d 	.word	0x0800349d
 80033fc:	0800349d 	.word	0x0800349d
 8003400:	0800349d 	.word	0x0800349d
 8003404:	0800349d 	.word	0x0800349d
 8003408:	0800349d 	.word	0x0800349d
 800340c:	0800349d 	.word	0x0800349d
 8003410:	08003489 	.word	0x08003489
 8003414:	0800349d 	.word	0x0800349d
 8003418:	0800349d 	.word	0x0800349d
 800341c:	0800349d 	.word	0x0800349d
 8003420:	0800349d 	.word	0x0800349d
 8003424:	0800349d 	.word	0x0800349d
 8003428:	0800349d 	.word	0x0800349d
 800342c:	0800349d 	.word	0x0800349d
 8003430:	080034a5 	.word	0x080034a5
 8003434:	0800349d 	.word	0x0800349d
 8003438:	0800349d 	.word	0x0800349d
 800343c:	0800349d 	.word	0x0800349d
 8003440:	0800349d 	.word	0x0800349d
 8003444:	0800349d 	.word	0x0800349d
 8003448:	0800349d 	.word	0x0800349d
 800344c:	0800349d 	.word	0x0800349d
 8003450:	080034a5 	.word	0x080034a5
 8003454:	0800349d 	.word	0x0800349d
 8003458:	0800349d 	.word	0x0800349d
 800345c:	0800349d 	.word	0x0800349d
 8003460:	0800349d 	.word	0x0800349d
 8003464:	0800349d 	.word	0x0800349d
 8003468:	0800349d 	.word	0x0800349d
 800346c:	0800349d 	.word	0x0800349d
 8003470:	080034a5 	.word	0x080034a5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003474:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003478:	3308      	adds	r3, #8
 800347a:	4618      	mov	r0, r3
 800347c:	f004 fdce 	bl	800801c <RCCEx_PLL2_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8003486:	e00e      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003488:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800348c:	3330      	adds	r3, #48	; 0x30
 800348e:	4618      	mov	r0, r3
 8003490:	f004 fe5c 	bl	800814c <RCCEx_PLL3_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 800349a:	e004      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80034a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80034ae:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80034b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034b4:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80034b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80034bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034be:	4a5b      	ldr	r2, [pc, #364]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034c6:	e003      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80034cc:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f002 0304 	and.w	r3, r2, #4
 80034dc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80034e6:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80034ea:	460b      	mov	r3, r1
 80034ec:	4313      	orrs	r3, r2
 80034ee:	d04e      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80034f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80034f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80034fa:	d02c      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80034fc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003500:	d825      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003506:	d028      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350c:	d81f      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800350e:	2bc0      	cmp	r3, #192	; 0xc0
 8003510:	d025      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003512:	2bc0      	cmp	r3, #192	; 0xc0
 8003514:	d81b      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003516:	2b80      	cmp	r3, #128	; 0x80
 8003518:	d00f      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d817      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01f      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d113      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003526:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800352a:	3308      	adds	r3, #8
 800352c:	4618      	mov	r0, r3
 800352e:	f004 fd75 	bl	800801c <RCCEx_PLL2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8003538:	e014      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800353a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800353e:	3330      	adds	r3, #48	; 0x30
 8003540:	4618      	mov	r0, r3
 8003542:	f004 fe03 	bl	800814c <RCCEx_PLL3_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 800354c:	e00a      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003554:	e006      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003556:	bf00      	nop
 8003558:	e004      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003564:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10c      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800356c:	4b2f      	ldr	r3, [pc, #188]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800356e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003572:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003576:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800357a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357c:	4a2b      	ldr	r2, [pc, #172]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800357e:	430b      	orrs	r3, r1
 8003580:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003584:	e003      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800358a:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800358e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f002 0308 	and.w	r3, r2, #8
 800359a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80035a4:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80035a8:	460b      	mov	r3, r1
 80035aa:	4313      	orrs	r3, r2
 80035ac:	d056      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80035ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80035b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035b8:	d031      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80035ba:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035be:	d82a      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80035c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035c4:	d02d      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80035c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ca:	d824      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80035cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035d0:	d029      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80035d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035d6:	d81e      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035dc:	d011      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80035de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e2:	d818      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d023      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80035e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ec:	d113      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80035f2:	3308      	adds	r3, #8
 80035f4:	4618      	mov	r0, r3
 80035f6:	f004 fd11 	bl	800801c <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8003600:	e017      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003602:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003606:	3330      	adds	r3, #48	; 0x30
 8003608:	4618      	mov	r0, r3
 800360a:	f004 fd9f 	bl	800814c <RCCEx_PLL3_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8003614:	e00d      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800361c:	e009      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800361e:	bf00      	nop
 8003620:	e007      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003622:	bf00      	nop
 8003624:	e005      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003626:	bf00      	nop
 8003628:	e003      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800362a:	bf00      	nop
 800362c:	44020c00 	.word	0x44020c00
        break;
 8003630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003632:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10c      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800363a:	4bbb      	ldr	r3, [pc, #748]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800363c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003640:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003644:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800364a:	4ab7      	ldr	r2, [pc, #732]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800364c:	430b      	orrs	r3, r1
 800364e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003652:	e003      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003654:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003658:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800365c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f002 0310 	and.w	r3, r2, #16
 8003668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003672:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8003676:	460b      	mov	r3, r1
 8003678:	4313      	orrs	r3, r2
 800367a:	d053      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800367c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003686:	d031      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003688:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800368c:	d82a      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800368e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003692:	d02d      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003698:	d824      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800369a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800369e:	d029      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80036a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036a4:	d81e      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036aa:	d011      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80036ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b0:	d818      	bhi.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ba:	d113      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80036c0:	3308      	adds	r3, #8
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 fcaa 	bl	800801c <RCCEx_PLL2_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 80036ce:	e014      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80036d4:	3330      	adds	r3, #48	; 0x30
 80036d6:	4618      	mov	r0, r3
 80036d8:	f004 fd38 	bl	800814c <RCCEx_PLL3_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 80036e2:	e00a      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80036ea:	e006      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80036ec:	bf00      	nop
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10c      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003702:	4b89      	ldr	r3, [pc, #548]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003708:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800370c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003712:	4a85      	ldr	r2, [pc, #532]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003714:	430b      	orrs	r3, r1
 8003716:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800371a:	e003      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003720:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003724:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f002 0320 	and.w	r3, r2, #32
 8003730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800373a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800373e:	460b      	mov	r3, r1
 8003740:	4313      	orrs	r3, r2
 8003742:	d053      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003744:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800374e:	d031      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003750:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003754:	d82a      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800375a:	d02d      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800375c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003760:	d824      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003762:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003766:	d029      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003768:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800376c:	d81e      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d011      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d818      	bhi.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d020      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800377e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003782:	d113      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003784:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003788:	3308      	adds	r3, #8
 800378a:	4618      	mov	r0, r3
 800378c:	f004 fc46 	bl	800801c <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 8003796:	e014      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003798:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800379c:	3330      	adds	r3, #48	; 0x30
 800379e:	4618      	mov	r0, r3
 80037a0:	f004 fcd4 	bl	800814c <RCCEx_PLL3_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 80037aa:	e00a      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80037b2:	e006      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80037b4:	bf00      	nop
 80037b6:	e004      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80037b8:	bf00      	nop
 80037ba:	e002      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80037bc:	bf00      	nop
 80037be:	e000      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80037c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80037ca:	4b57      	ldr	r3, [pc, #348]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80037cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037d0:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80037d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a53      	ldr	r2, [pc, #332]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80037dc:	430b      	orrs	r3, r1
 80037de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037e2:	e003      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80037e8:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80037f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003802:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8003806:	460b      	mov	r3, r1
 8003808:	4313      	orrs	r3, r2
 800380a:	d053      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800380c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003812:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003816:	d031      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003818:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800381c:	d82a      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800381e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003822:	d02d      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003828:	d824      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800382a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800382e:	d029      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003830:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003834:	d81e      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003836:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800383a:	d011      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800383c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003840:	d818      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d020      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003846:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800384a:	d113      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800384c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003850:	3308      	adds	r3, #8
 8003852:	4618      	mov	r0, r3
 8003854:	f004 fbe2 	bl	800801c <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 800385e:	e014      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003860:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003864:	3330      	adds	r3, #48	; 0x30
 8003866:	4618      	mov	r0, r3
 8003868:	f004 fc70 	bl	800814c <RCCEx_PLL3_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 8003872:	e00a      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800387a:	e006      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800387c:	bf00      	nop
 800387e:	e004      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003880:	bf00      	nop
 8003882:	e002      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003884:	bf00      	nop
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10c      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003892:	4b25      	ldr	r3, [pc, #148]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003894:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003898:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 800389c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	4a21      	ldr	r2, [pc, #132]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80038a4:	430b      	orrs	r3, r1
 80038a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80038aa:	e003      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80038b0:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80038c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80038ca:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80038ce:	460b      	mov	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	d055      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80038d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80038d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038da:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80038de:	d033      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80038e0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80038e4:	d82c      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80038e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ea:	d02f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x684>
 80038ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038f0:	d826      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80038f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038f6:	d02b      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80038f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038fc:	d820      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80038fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003902:	d013      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003908:	d81a      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d022      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800390e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003912:	d115      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003914:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003918:	3308      	adds	r3, #8
 800391a:	4618      	mov	r0, r3
 800391c:	f004 fb7e 	bl	800801c <RCCEx_PLL2_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 8003926:	e016      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003928:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800392c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003930:	3330      	adds	r3, #48	; 0x30
 8003932:	4618      	mov	r0, r3
 8003934:	f004 fc0a 	bl	800814c <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 800393e:	e00a      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003946:	e006      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003948:	bf00      	nop
 800394a:	e004      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800394c:	bf00      	nop
 800394e:	e002      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003950:	bf00      	nop
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003956:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800395e:	4bbb      	ldr	r3, [pc, #748]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003964:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003968:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800396c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396e:	4ab7      	ldr	r2, [pc, #732]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003970:	430b      	orrs	r3, r1
 8003972:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003976:	e003      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003978:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800397c:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003980:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800398c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003996:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800399a:	460b      	mov	r3, r1
 800399c:	4313      	orrs	r3, r2
 800399e:	d053      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80039a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80039a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80039aa:	d031      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80039ac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80039b0:	d82a      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80039b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b6:	d02d      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80039b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039bc:	d824      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80039be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039c2:	d029      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80039c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039c8:	d81e      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80039ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ce:	d011      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80039d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d4:	d818      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d020      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x754>
 80039da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039de:	d113      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80039e4:	3308      	adds	r3, #8
 80039e6:	4618      	mov	r0, r3
 80039e8:	f004 fb18 	bl	800801c <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 80039f2:	e014      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80039f8:	3330      	adds	r3, #48	; 0x30
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 fba6 	bl	800814c <RCCEx_PLL3_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8003a06:	e00a      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003a0e:	e006      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003a10:	bf00      	nop
 8003a12:	e004      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003a14:	bf00      	nop
 8003a16:	e002      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003a18:	bf00      	nop
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003a26:	4b89      	ldr	r3, [pc, #548]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a2c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003a30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a36:	4a85      	ldr	r2, [pc, #532]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003a3e:	e003      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003a44:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003a48:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003a54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a5e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003a62:	460b      	mov	r3, r1
 8003a64:	4313      	orrs	r3, r2
 8003a66:	d055      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003a68:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a70:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003a74:	d031      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003a76:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003a7a:	d82a      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a80:	d02d      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a86:	d824      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003a88:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003a8c:	d029      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003a8e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003a92:	d81e      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a98:	d011      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a9e:	d818      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d020      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aa8:	d113      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003aaa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003aae:	3308      	adds	r3, #8
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f004 fab3 	bl	800801c <RCCEx_PLL2_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8003abc:	e014      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003abe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ac2:	3330      	adds	r3, #48	; 0x30
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f004 fb41 	bl	800814c <RCCEx_PLL3_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003ada:	bf00      	nop
 8003adc:	e004      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10d      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003af0:	4b56      	ldr	r3, [pc, #344]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003af2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003af6:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8003afa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b02:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003b0a:	e003      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003b10:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003b14:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	d044      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003b34:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d823      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b91 	.word	0x08003b91
 8003b4c:	08003b61 	.word	0x08003b61
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b91 	.word	0x08003b91
 8003b58:	08003b91 	.word	0x08003b91
 8003b5c:	08003b91 	.word	0x08003b91
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b60:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b64:	3308      	adds	r3, #8
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 fa58 	bl	800801c <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8003b72:	e00e      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b74:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003b78:	3330      	adds	r3, #48	; 0x30
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 fae6 	bl	800814c <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8003b86:	e004      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003b8e:	e000      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b92:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10d      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003b9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003ba0:	f023 0107 	bic.w	r1, r3, #7
 8003ba4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bac:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003bb4:	e003      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003bba:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003bbe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003bca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	d04f      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003bde:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	2b50      	cmp	r3, #80	; 0x50
 8003be8:	d029      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003bea:	2b50      	cmp	r3, #80	; 0x50
 8003bec:	d823      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d027      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d81f      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003bf6:	2b30      	cmp	r3, #48	; 0x30
 8003bf8:	d025      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003bfa:	2b30      	cmp	r3, #48	; 0x30
 8003bfc:	d81b      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d00f      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d817      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d022      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d113      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c12:	3308      	adds	r3, #8
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fa01 	bl	800801c <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 8003c20:	e017      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c22:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c26:	3330      	adds	r3, #48	; 0x30
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f004 fa8f 	bl	800814c <RCCEx_PLL3_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 8003c34:	e00d      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003c3c:	e009      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003c3e:	bf00      	nop
 8003c40:	e007      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003c42:	bf00      	nop
 8003c44:	e005      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003c46:	bf00      	nop
 8003c48:	e003      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003c4a:	bf00      	nop
 8003c4c:	44020c00 	.word	0x44020c00
        break;
 8003c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c52:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003c5a:	4baf      	ldr	r3, [pc, #700]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c60:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003c64:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6c:	4aaa      	ldr	r2, [pc, #680]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c6e:	430b      	orrs	r3, r1
 8003c70:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003c74:	e003      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003c7a:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003c94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d055      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003c9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003caa:	d031      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003cac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003cb0:	d82a      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003cb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cb6:	d02d      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003cb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cbc:	d824      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003cbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cc2:	d029      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003cc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cc8:	d81e      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cce:	d011      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cd4:	d818      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d020      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003cda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cde:	d113      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ce0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 f998 	bl	800801c <RCCEx_PLL2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003cf2:	e014      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cf4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003cf8:	3330      	adds	r3, #48	; 0x30
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f004 fa26 	bl	800814c <RCCEx_PLL3_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003d06:	e00a      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003d0e:	e006      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003d10:	bf00      	nop
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003d14:	bf00      	nop
 8003d16:	e002      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003d26:	4b7c      	ldr	r3, [pc, #496]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d2c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003d30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d38:	4a77      	ldr	r2, [pc, #476]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003d46:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003d56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d60:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d03d      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003d6a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d76:	d01b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003d78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d7c:	d814      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d82:	d017      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d88:	d80e      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d014      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d92:	d109      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003d98:	3330      	adds	r3, #48	; 0x30
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f004 f9d6 	bl	800814c <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003da6:	e008      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003dae:	e004      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dba:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003dc2:	4b55      	ldr	r3, [pc, #340]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003dc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003dc8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003dcc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	4a50      	ldr	r2, [pc, #320]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ddc:	e003      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003de2:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003de6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003df6:	2300      	movs	r3, #0
 8003df8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003dfc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d03d      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003e06:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e12:	d01b      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003e14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e18:	d814      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003e1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e1e:	d017      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003e20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e24:	d80e      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d014      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e2e:	d109      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003e34:	3330      	adds	r3, #48	; 0x30
 8003e36:	4618      	mov	r0, r3
 8003e38:	f004 f988 	bl	800814c <RCCEx_PLL3_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003e42:	e008      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e64:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003e68:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e72:	430b      	orrs	r3, r1
 8003e74:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003e7e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e82:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003e8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e92:	2300      	movs	r3, #0
 8003e94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e98:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d040      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003ea2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eae:	d01b      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003eb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eb4:	d814      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eba:	d017      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ec0:	d80e      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d014      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eca:	d109      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ecc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ed0:	3330      	adds	r3, #48	; 0x30
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f004 f93a 	bl	800814c <RCCEx_PLL3_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003ee6:	e004      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003ee8:	bf00      	nop
 8003eea:	e002      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003eec:	bf00      	nop
 8003eee:	e000      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d110      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003efc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f00:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f04:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f0c:	4a02      	ldr	r2, [pc, #8]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003f14:	e006      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003f16:	bf00      	nop
 8003f18:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003f20:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f24:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8003f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4313      	orrs	r3, r2
 8003f42:	d03d      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003f44:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f50:	d01b      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003f52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f56:	d814      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003f58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f5c:	d017      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f62:	d80e      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d014      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f6e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003f72:	3330      	adds	r3, #48	; 0x30
 8003f74:	4618      	mov	r0, r3
 8003f76:	f004 f8e9 	bl	800814c <RCCEx_PLL3_Config>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003f80:	e008      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8003f88:	e004      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f94:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10d      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003f9c:	4bbe      	ldr	r3, [pc, #760]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fa2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003fa6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fae:	4aba      	ldr	r2, [pc, #744]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003fb6:	e003      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8003fbc:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003fc0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	d035      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003fe0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003fe4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fec:	d015      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003fee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ff2:	d80e      	bhi.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ffc:	d109      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ffe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004002:	3330      	adds	r3, #48	; 0x30
 8004004:	4618      	mov	r0, r3
 8004006:	f004 f8a1 	bl	800814c <RCCEx_PLL3_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004010:	e006      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004018:	e002      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800401a:	bf00      	nop
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800401e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004020:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10d      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004028:	4b9b      	ldr	r3, [pc, #620]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800402a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800402e:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8004032:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004036:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800403a:	4a97      	ldr	r2, [pc, #604]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800403c:	430b      	orrs	r3, r1
 800403e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004042:	e003      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004048:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800404c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	2100      	movs	r1, #0
 8004056:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800405a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004062:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004066:	460b      	mov	r3, r1
 8004068:	4313      	orrs	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800406c:	4b8a      	ldr	r3, [pc, #552]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	4a89      	ldr	r2, [pc, #548]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004072:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004076:	61d3      	str	r3, [r2, #28]
 8004078:	4b87      	ldr	r3, [pc, #540]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004080:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004084:	4a84      	ldr	r2, [pc, #528]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004086:	430b      	orrs	r3, r1
 8004088:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800408a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d055      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80040aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80040ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80040b6:	d031      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80040b8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80040bc:	d82a      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80040be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c2:	d02d      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d824      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80040ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ce:	d029      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80040d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d4:	d81e      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80040d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040da:	d011      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e0:	d818      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d020      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80040e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ea:	d113      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80040f0:	3308      	adds	r3, #8
 80040f2:	4618      	mov	r0, r3
 80040f4:	f003 ff92 	bl	800801c <RCCEx_PLL2_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80040fe:	e014      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004100:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004104:	3330      	adds	r3, #48	; 0x30
 8004106:	4618      	mov	r0, r3
 8004108:	f004 f820 	bl	800814c <RCCEx_PLL3_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004112:	e00a      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800411a:	e006      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800411c:	bf00      	nop
 800411e:	e004      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004120:	bf00      	nop
 8004122:	e002      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10d      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004132:	4b59      	ldr	r3, [pc, #356]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004134:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004138:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800413c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004144:	4a54      	ldr	r2, [pc, #336]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004146:	430b      	orrs	r3, r1
 8004148:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004152:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004156:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004162:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004166:	2300      	movs	r3, #0
 8004168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800416c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d055      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004176:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800417a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800417e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004182:	d031      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004184:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004188:	d82a      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800418a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418e:	d02d      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004194:	d824      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004196:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800419a:	d029      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800419c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041a0:	d81e      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80041a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a6:	d011      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80041a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ac:	d818      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d020      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	d113      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80041bc:	3308      	adds	r3, #8
 80041be:	4618      	mov	r0, r3
 80041c0:	f003 ff2c 	bl	800801c <RCCEx_PLL2_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80041ca:	e014      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80041d0:	3330      	adds	r3, #48	; 0x30
 80041d2:	4618      	mov	r0, r3
 80041d4:	f003 ffba 	bl	800814c <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80041de:	e00a      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80041e6:	e006      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80041e8:	bf00      	nop
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80041ec:	bf00      	nop
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10d      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80041fe:	4b26      	ldr	r3, [pc, #152]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004200:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004204:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004208:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800420c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004210:	4a21      	ldr	r2, [pc, #132]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004212:	430b      	orrs	r3, r1
 8004214:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800421e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004222:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	2100      	movs	r1, #0
 800422c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004238:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800423c:	460b      	mov	r3, r1
 800423e:	4313      	orrs	r3, r2
 8004240:	d057      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004242:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800424a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800424e:	d033      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004254:	d82c      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004256:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800425a:	d02f      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800425c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004260:	d826      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004262:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004266:	d02b      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004268:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800426c:	d820      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800426e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004272:	d013      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004278:	d81a      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d022      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800427e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004282:	d115      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004284:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004288:	3308      	adds	r3, #8
 800428a:	4618      	mov	r0, r3
 800428c:	f003 fec6 	bl	800801c <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004296:	e016      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004298:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800429c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80042a0:	3330      	adds	r3, #48	; 0x30
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 ff52 	bl	800814c <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80042ae:	e00a      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80042b6:	e006      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80042b8:	bf00      	nop
 80042ba:	e004      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80042c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10d      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80042ce:	4bbb      	ldr	r3, [pc, #748]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80042d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80042d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80042dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042e0:	4ab6      	ldr	r2, [pc, #728]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80042e8:	e003      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ea:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80042ee:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80042f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	2100      	movs	r1, #0
 80042fc:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004308:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800430c:	460b      	mov	r3, r1
 800430e:	4313      	orrs	r3, r2
 8004310:	d055      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004312:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800431a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800431e:	d031      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004320:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004324:	d82a      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800432a:	d02d      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004330:	d824      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004336:	d029      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800433c:	d81e      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800433e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004342:	d011      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004348:	d818      	bhi.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d020      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004352:	d113      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004354:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004358:	3308      	adds	r3, #8
 800435a:	4618      	mov	r0, r3
 800435c:	f003 fe5e 	bl	800801c <RCCEx_PLL2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004366:	e014      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004368:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800436c:	3330      	adds	r3, #48	; 0x30
 800436e:	4618      	mov	r0, r3
 8004370:	f003 feec 	bl	800814c <RCCEx_PLL3_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800437a:	e00a      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004382:	e006      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004384:	bf00      	nop
 8004386:	e004      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004388:	bf00      	nop
 800438a:	e002      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800438c:	bf00      	nop
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004392:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10d      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800439a:	4b88      	ldr	r3, [pc, #544]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800439c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80043a0:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80043a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043ac:	4a83      	ldr	r2, [pc, #524]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043ae:	430b      	orrs	r3, r1
 80043b0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80043b4:	e003      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80043ba:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80043be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	2100      	movs	r1, #0
 80043c8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043d4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80043d8:	460b      	mov	r3, r1
 80043da:	4313      	orrs	r3, r2
 80043dc:	d055      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80043de:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043e6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80043ea:	d031      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80043ec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80043f0:	d82a      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80043f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043f6:	d02d      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80043f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043fc:	d824      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80043fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004402:	d029      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004404:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004408:	d81e      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800440a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800440e:	d011      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004414:	d818      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d020      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800441a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800441e:	d113      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004420:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004424:	3308      	adds	r3, #8
 8004426:	4618      	mov	r0, r3
 8004428:	f003 fdf8 	bl	800801c <RCCEx_PLL2_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004432:	e014      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004434:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004438:	3330      	adds	r3, #48	; 0x30
 800443a:	4618      	mov	r0, r3
 800443c:	f003 fe86 	bl	800814c <RCCEx_PLL3_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004446:	e00a      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800444e:	e006      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004450:	bf00      	nop
 8004452:	e004      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004454:	bf00      	nop
 8004456:	e002      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004458:	bf00      	nop
 800445a:	e000      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800445c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004466:	4b55      	ldr	r3, [pc, #340]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004468:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800446c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004470:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004474:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004478:	4a50      	ldr	r2, [pc, #320]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800447a:	430b      	orrs	r3, r1
 800447c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004480:	e003      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004482:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004486:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800448a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	2100      	movs	r1, #0
 8004494:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80044a4:	460b      	mov	r3, r1
 80044a6:	4313      	orrs	r3, r2
 80044a8:	d055      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80044aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80044ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b6:	d031      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80044b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044bc:	d82a      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d02d      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d824      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80044ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044ce:	d029      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80044d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044d4:	d81e      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80044d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044da:	d011      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80044dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044e0:	d818      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80044e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ea:	d113      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80044f0:	3308      	adds	r3, #8
 80044f2:	4618      	mov	r0, r3
 80044f4:	f003 fd92 	bl	800801c <RCCEx_PLL2_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80044fe:	e014      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004500:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004504:	3330      	adds	r3, #48	; 0x30
 8004506:	4618      	mov	r0, r3
 8004508:	f003 fe20 	bl	800814c <RCCEx_PLL3_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004512:	e00a      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800451a:	e006      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800451c:	bf00      	nop
 800451e:	e004      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004520:	bf00      	nop
 8004522:	e002      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004524:	bf00      	nop
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10d      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004532:	4b22      	ldr	r3, [pc, #136]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004534:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004538:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800453c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004540:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004544:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004546:	430b      	orrs	r3, r1
 8004548:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004552:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004556:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800456c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004570:	460b      	mov	r3, r1
 8004572:	4313      	orrs	r3, r2
 8004574:	d055      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004576:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800457a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800457e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004582:	d035      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004588:	d82e      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800458a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800458e:	d031      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004590:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004594:	d828      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800459a:	d01b      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800459c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a0:	d822      	bhi.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045aa:	d009      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80045ac:	e01c      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ae:	4b03      	ldr	r3, [pc, #12]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	4a02      	ldr	r2, [pc, #8]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80045b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045ba:	e01c      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80045bc:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80045c4:	3308      	adds	r3, #8
 80045c6:	4618      	mov	r0, r3
 80045c8:	f003 fd28 	bl	800801c <RCCEx_PLL2_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045d2:	e010      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80045d8:	3330      	adds	r3, #48	; 0x30
 80045da:	4618      	mov	r0, r3
 80045dc:	f003 fdb6 	bl	800814c <RCCEx_PLL3_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045e6:	e006      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80045f0:	bf00      	nop
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80045f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10d      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80045fe:	4bc2      	ldr	r3, [pc, #776]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004600:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004604:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004608:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800460c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004610:	4abd      	ldr	r2, [pc, #756]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004612:	430b      	orrs	r3, r1
 8004614:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004618:	e003      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800461e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004622:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800462e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004630:	2300      	movs	r3, #0
 8004632:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004634:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d051      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x141a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800463e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004642:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800464a:	d033      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 800464c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004650:	d82c      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8004652:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004656:	d02d      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8004658:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800465c:	d826      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004662:	d019      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x13d0>
 8004664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004668:	d820      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x13ae>
 800466e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004672:	d007      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
 8004674:	e01a      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x13e4>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004676:	4ba4      	ldr	r3, [pc, #656]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	4aa3      	ldr	r2, [pc, #652]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800467c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004680:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004682:	e018      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004684:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004688:	3308      	adds	r3, #8
 800468a:	4618      	mov	r0, r3
 800468c:	f003 fcc6 	bl	800801c <RCCEx_PLL2_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004696:	e00e      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004698:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800469c:	3330      	adds	r3, #48	; 0x30
 800469e:	4618      	mov	r0, r3
 80046a0:	f003 fd54 	bl	800814c <RCCEx_PLL3_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 80046aa:	e004      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
        break;
 80046b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10d      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1412>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80046be:	4b92      	ldr	r3, [pc, #584]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80046c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046c4:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80046c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80046cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80046d0:	4a8d      	ldr	r2, [pc, #564]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80046d2:	430b      	orrs	r3, r1
 80046d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80046de:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80046e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80046ee:	673b      	str	r3, [r7, #112]	; 0x70
 80046f0:	2300      	movs	r3, #0
 80046f2:	677b      	str	r3, [r7, #116]	; 0x74
 80046f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d032      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x149c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80046fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004702:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004706:	2b05      	cmp	r3, #5
 8004708:	d80f      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1462>
 800470a:	2b03      	cmp	r3, #3
 800470c:	d211      	bcs.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x146a>
 800470e:	2b01      	cmp	r3, #1
 8004710:	d911      	bls.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8004712:	2b02      	cmp	r3, #2
 8004714:	d109      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1462>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004716:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800471a:	3308      	adds	r3, #8
 800471c:	4618      	mov	r0, r3
 800471e:	f003 fc7d 	bl	800801c <RCCEx_PLL2_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004728:	e006      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004730:	e002      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 8004736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004738:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10d      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1494>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004740:	4b71      	ldr	r3, [pc, #452]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004746:	f023 0107 	bic.w	r1, r3, #7
 800474a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800474e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004752:	4a6d      	ldr	r2, [pc, #436]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004754:	430b      	orrs	r3, r1
 8004756:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800475a:	e003      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x149c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004760:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004764:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	2100      	movs	r1, #0
 800476e:	66b9      	str	r1, [r7, #104]	; 0x68
 8004770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004774:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004776:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	d024      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004780:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004784:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x14d0>
 800478c:	2b08      	cmp	r3, #8
 800478e:	d005      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004796:	e002      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8004798:	bf00      	nop
 800479a:	e000      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 800479c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10d      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x14fa>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80047a6:	4b58      	ldr	r3, [pc, #352]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80047a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047ac:	f023 0108 	bic.w	r1, r3, #8
 80047b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80047b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80047b8:	4a53      	ldr	r2, [pc, #332]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80047ba:	430b      	orrs	r3, r1
 80047bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047c0:	e003      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1502>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80047c6:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80047d6:	663b      	str	r3, [r7, #96]	; 0x60
 80047d8:	2300      	movs	r3, #0
 80047da:	667b      	str	r3, [r7, #100]	; 0x64
 80047dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80047e0:	460b      	mov	r3, r1
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f000 80b9 	beq.w	800495a <HAL_RCCEx_PeriphCLKConfig+0x1692>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80047e8:	4b48      	ldr	r3, [pc, #288]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	4a47      	ldr	r2, [pc, #284]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047f4:	f7fc fd12 	bl	800121c <HAL_GetTick>
 80047f8:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80047fc:	e00b      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x154e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fe:	f7fc fd0d 	bl	800121c <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d903      	bls.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x154e>
      {
        ret = HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004814:	e005      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x155a>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004816:	4b3d      	ldr	r3, [pc, #244]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0ed      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1536>
      }
    }

    if (ret == HAL_OK)
 8004822:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 8093 	bne.w	8004952 <HAL_RCCEx_PeriphCLKConfig+0x168a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800482c:	4b36      	ldr	r3, [pc, #216]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800482e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800483a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800483e:	2b00      	cmp	r3, #0
 8004840:	d023      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x15c2>
 8004842:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004846:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800484a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800484e:	4293      	cmp	r3, r2
 8004850:	d01b      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x15c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004852:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004860:	4b29      	ldr	r3, [pc, #164]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004866:	4a28      	ldr	r2, [pc, #160]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004870:	4b25      	ldr	r3, [pc, #148]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004876:	4a24      	ldr	r2, [pc, #144]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004880:	4a21      	ldr	r2, [pc, #132]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004882:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004886:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800488a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d019      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1602>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fc fcc1 	bl	800121c <HAL_GetTick>
 800489a:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489e:	e00d      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x15f4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a0:	f7fc fcbc 	bl	800121c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d903      	bls.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x15f4>
          {
            ret = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
            break;
 80048ba:	e006      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1602>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048bc:	4b12      	ldr	r3, [pc, #72]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80048be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0ea      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
          }
        }
      }

      if (ret == HAL_OK)
 80048ca:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d13a      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x1680>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80048d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80048d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e2:	d115      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1648>
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80048ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80048f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80048fe:	4a02      	ldr	r2, [pc, #8]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004900:	430b      	orrs	r3, r1
 8004902:	61d3      	str	r3, [r2, #28]
 8004904:	e00a      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1654>
 8004906:	bf00      	nop
 8004908:	44020c00 	.word	0x44020c00
 800490c:	44020800 	.word	0x44020800
 8004910:	4bc6      	ldr	r3, [pc, #792]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	4ac5      	ldr	r2, [pc, #788]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004916:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800491a:	61d3      	str	r3, [r2, #28]
 800491c:	4bc3      	ldr	r3, [pc, #780]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800491e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004922:	4ac2      	ldr	r2, [pc, #776]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004928:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800492c:	4bbf      	ldr	r3, [pc, #764]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800492e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8004932:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004936:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800493a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493e:	4abb      	ldr	r2, [pc, #748]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004940:	430b      	orrs	r3, r1
 8004942:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004946:	e008      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004948:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800494c:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
 8004950:	e003      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004952:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004956:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800495a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004966:	65bb      	str	r3, [r7, #88]	; 0x58
 8004968:	2300      	movs	r3, #0
 800496a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800496c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004970:	460b      	mov	r3, r1
 8004972:	4313      	orrs	r3, r2
 8004974:	d035      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x171a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004976:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800497a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800497e:	2b30      	cmp	r3, #48	; 0x30
 8004980:	d014      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x16e4>
 8004982:	2b30      	cmp	r3, #48	; 0x30
 8004984:	d80e      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 8004986:	2b20      	cmp	r3, #32
 8004988:	d012      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800498a:	2b20      	cmp	r3, #32
 800498c:	d80a      	bhi.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d010      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004992:	2b10      	cmp	r3, #16
 8004994:	d106      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004996:	4ba5      	ldr	r3, [pc, #660]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	4aa4      	ldr	r2, [pc, #656]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800499c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a0:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80049a2:	e008      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x16ee>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80049aa:	e004      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 80049ac:	bf00      	nop
 80049ae:	e002      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 80049b0:	bf00      	nop
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 80049b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10d      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1712>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80049be:	4b9b      	ldr	r3, [pc, #620]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80049c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049c4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80049c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80049cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80049d0:	4a96      	ldr	r2, [pc, #600]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80049d2:	430b      	orrs	r3, r1
 80049d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049d8:	e003      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x171a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80049de:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80049ee:	653b      	str	r3, [r7, #80]	; 0x50
 80049f0:	2300      	movs	r3, #0
 80049f2:	657b      	str	r3, [r7, #84]	; 0x54
 80049f4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d033      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x179e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80049fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1748>
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d007      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1756>
 8004a0e:	e010      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x176a>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b86      	ldr	r3, [pc, #536]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	4a85      	ldr	r2, [pc, #532]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004a1c:	e00d      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1772>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a22:	3308      	adds	r3, #8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f003 faf9 	bl	800801c <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1772>

      default:
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a3a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10d      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1796>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004a42:	4b7a      	ldr	r3, [pc, #488]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004a44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a48:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004a4c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a50:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004a54:	4a75      	ldr	r2, [pc, #468]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004a56:	430b      	orrs	r3, r1
 8004a58:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004a5c:	e003      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x179e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004a62:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004a66:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004a72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a74:	2300      	movs	r3, #0
 8004a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a78:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	d048      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x184c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004a82:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004a86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d827      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1816>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <HAL_RCCEx_PeriphCLKConfig+0x17cc>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004aa9 	.word	0x08004aa9
 8004a98:	08004ab7 	.word	0x08004ab7
 8004a9c:	08004acb 	.word	0x08004acb
 8004aa0:	08004ae7 	.word	0x08004ae7
 8004aa4:	08004ae7 	.word	0x08004ae7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa8:	4b60      	ldr	r3, [pc, #384]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	4a5f      	ldr	r2, [pc, #380]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004ab4:	e018      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1820>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ab6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004aba:	3308      	adds	r3, #8
 8004abc:	4618      	mov	r0, r3
 8004abe:	f003 faad 	bl	800801c <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e00e      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1820>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004ace:	3330      	adds	r3, #48	; 0x30
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f003 fb3b 	bl	800814c <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004adc:	e004      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004ae4:	e000      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        break;
 8004ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae8:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10d      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1844>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004af0:	4b4e      	ldr	r3, [pc, #312]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004af6:	f023 0107 	bic.w	r1, r3, #7
 8004afa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004afe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004b02:	4a4a      	ldr	r2, [pc, #296]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004b04:	430b      	orrs	r3, r1
 8004b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b0a:	e003      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004b10:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004b14:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004b20:	643b      	str	r3, [r7, #64]	; 0x40
 8004b22:	2300      	movs	r3, #0
 8004b24:	647b      	str	r3, [r7, #68]	; 0x44
 8004b26:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f000 8083 	beq.w	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1970>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004b32:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d85f      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1936>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <HAL_RCCEx_PeriphCLKConfig+0x187c>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004bc9 	.word	0x08004bc9
 8004b48:	08004bff 	.word	0x08004bff
 8004b4c:	08004bff 	.word	0x08004bff
 8004b50:	08004bff 	.word	0x08004bff
 8004b54:	08004bff 	.word	0x08004bff
 8004b58:	08004bff 	.word	0x08004bff
 8004b5c:	08004bff 	.word	0x08004bff
 8004b60:	08004bff 	.word	0x08004bff
 8004b64:	08004bd7 	.word	0x08004bd7
 8004b68:	08004bff 	.word	0x08004bff
 8004b6c:	08004bff 	.word	0x08004bff
 8004b70:	08004bff 	.word	0x08004bff
 8004b74:	08004bff 	.word	0x08004bff
 8004b78:	08004bff 	.word	0x08004bff
 8004b7c:	08004bff 	.word	0x08004bff
 8004b80:	08004bff 	.word	0x08004bff
 8004b84:	08004beb 	.word	0x08004beb
 8004b88:	08004bff 	.word	0x08004bff
 8004b8c:	08004bff 	.word	0x08004bff
 8004b90:	08004bff 	.word	0x08004bff
 8004b94:	08004bff 	.word	0x08004bff
 8004b98:	08004bff 	.word	0x08004bff
 8004b9c:	08004bff 	.word	0x08004bff
 8004ba0:	08004bff 	.word	0x08004bff
 8004ba4:	08004c07 	.word	0x08004c07
 8004ba8:	08004bff 	.word	0x08004bff
 8004bac:	08004bff 	.word	0x08004bff
 8004bb0:	08004bff 	.word	0x08004bff
 8004bb4:	08004bff 	.word	0x08004bff
 8004bb8:	08004bff 	.word	0x08004bff
 8004bbc:	08004bff 	.word	0x08004bff
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004c07 	.word	0x08004c07
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc8:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e018      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1940>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bd6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004bda:	3308      	adds	r3, #8
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f003 fa1d 	bl	800801c <RCCEx_PLL2_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004be8:	e00e      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1940>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004bee:	3330      	adds	r3, #48	; 0x30
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f003 faab 	bl	800814c <RCCEx_PLL3_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004bfc:	e004      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        break;
 8004c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c08:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10f      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c16:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004c1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c22:	4a02      	ldr	r2, [pc, #8]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004c24:	430b      	orrs	r3, r1
 8004c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c2a:	e005      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1970>
 8004c2c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c30:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004c34:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c38:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c46:	2300      	movs	r3, #0
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	d04e      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004c54:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c60:	d02e      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
 8004c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c66:	d827      	bhi.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8004c68:	2bc0      	cmp	r3, #192	; 0xc0
 8004c6a:	d02b      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
 8004c6c:	2bc0      	cmp	r3, #192	; 0xc0
 8004c6e:	d823      	bhi.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d017      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
 8004c74:	2b80      	cmp	r3, #128	; 0x80
 8004c76:	d81f      	bhi.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d007      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x19c8>
 8004c80:	e01a      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c82:	4bb0      	ldr	r3, [pc, #704]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c86:	4aaf      	ldr	r2, [pc, #700]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004c8e:	e01a      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c90:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c94:	3308      	adds	r3, #8
 8004c96:	4618      	mov	r0, r3
 8004c98:	f003 f9c0 	bl	800801c <RCCEx_PLL2_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004ca2:	e010      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ca4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004ca8:	3330      	adds	r3, #48	; 0x30
 8004caa:	4618      	mov	r0, r3
 8004cac:	f003 fa4e 	bl	800814c <RCCEx_PLL3_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004cb6:	e006      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8004cc0:	bf00      	nop
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8004cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc6:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10d      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1a22>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004cce:	4b9d      	ldr	r3, [pc, #628]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cd4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004cd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004cdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ce0:	4a98      	ldr	r2, [pc, #608]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cea:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004cee:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004cf2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004d00:	2300      	movs	r3, #0
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
 8004d04:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	d055      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1af2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004d0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d16:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004d1a:	d031      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>
 8004d1c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004d20:	d82a      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8004d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d26:	d02d      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1abc>
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2c:	d824      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8004d2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d32:	d029      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
 8004d34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d38:	d81e      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3e:	d011      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
 8004d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d44:	d818      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d020      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1ac4>
 8004d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d4e:	d113      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d50:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d54:	3308      	adds	r3, #8
 8004d56:	4618      	mov	r0, r3
 8004d58:	f003 f960 	bl	800801c <RCCEx_PLL2_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004d62:	e014      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d64:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d68:	3330      	adds	r3, #48	; 0x30
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f003 f9ee 	bl	800814c <RCCEx_PLL3_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004d76:	e00a      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004d7e:	e006      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004d80:	bf00      	nop
 8004d82:	e004      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10d      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004d96:	4b6b      	ldr	r3, [pc, #428]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d9c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004da0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004da8:	4a66      	ldr	r2, [pc, #408]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004daa:	430b      	orrs	r3, r1
 8004dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004db0:	e003      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1af2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db2:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004db6:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004dba:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc8:	2300      	movs	r3, #0
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	d055      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004dd6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004dda:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004dde:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004de2:	d031      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1b80>
 8004de4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004de8:	d82a      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dee:	d02d      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1b84>
 8004df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004df4:	d824      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004df6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dfa:	d029      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8004dfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e00:	d81e      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	d011      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1b64>
 8004e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0c:	d818      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d020      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8c>
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d113      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e18:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f003 f8fc 	bl	800801c <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e2a:	e014      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004e30:	3330      	adds	r3, #48	; 0x30
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 f98a 	bl	800814c <RCCEx_PLL3_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004e46:	e006      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004e48:	bf00      	nop
 8004e4a:	e004      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004e4c:	bf00      	nop
 8004e4e:	e002      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004e50:	bf00      	nop
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e56:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10d      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004e5e:	4b39      	ldr	r3, [pc, #228]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e68:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004e6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004e70:	4934      	ldr	r1, [pc, #208]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004e78:	e003      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7a:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004e7e:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e82:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	6239      	str	r1, [r7, #32]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
 8004e94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d058      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004e9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ea6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004eaa:	d031      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004eac:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004eb0:	d82a      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb6:	d02d      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4c>
 8004eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ebc:	d824      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004ebe:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004ec2:	d029      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
 8004ec4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004ec8:	d81e      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ece:	d011      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c2c>
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d818      	bhi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d020      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1c54>
 8004eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ede:	d113      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ee0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f003 f898 	bl	800801c <RCCEx_PLL2_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ef2:	e014      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1c56>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ef4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004ef8:	3330      	adds	r3, #48	; 0x30
 8004efa:	4618      	mov	r0, r3
 8004efc:	f003 f926 	bl	800814c <RCCEx_PLL3_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f06:	e00a      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004f0e:	e006      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004f10:	bf00      	nop
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004f14:	bf00      	nop
 8004f16:	e002      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004f18:	bf00      	nop
 8004f1a:	e000      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d110      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004f26:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f2c:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004f30:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f38:	4902      	ldr	r1, [pc, #8]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
 8004f42:	bf00      	nop
 8004f44:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004f4c:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f50:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f58:	2100      	movs	r1, #0
 8004f5a:	61b9      	str	r1, [r7, #24]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d03d      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004f6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d81c      	bhi.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
 8004f78:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1cb8>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fbb 	.word	0x08004fbb
 8004f84:	08004f91 	.word	0x08004f91
 8004f88:	08004f9f 	.word	0x08004f9f
 8004f8c:	08004fbb 	.word	0x08004fbb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f90:	4b6f      	ldr	r3, [pc, #444]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f94:	4a6e      	ldr	r2, [pc, #440]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f9a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004f9c:	e00e      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1cf4>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 f839 	bl	800801c <RCCEx_PLL2_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004fb0:	e004      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 8004fb8:	e000      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
        break;
 8004fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fbc:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10d      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004fc4:	4b62      	ldr	r3, [pc, #392]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004fc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fca:	f023 0203 	bic.w	r2, r3, #3
 8004fce:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004fd6:	495e      	ldr	r1, [pc, #376]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004fde:	e003      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8004fe4:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fe8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	6139      	str	r1, [r7, #16]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ffe:	460b      	mov	r3, r1
 8005000:	4313      	orrs	r3, r2
 8005002:	d03a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005004:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005008:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800500c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005010:	d00e      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
 8005012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005016:	d815      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d017      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1d84>
 800501c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005020:	d110      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005022:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	4a4a      	ldr	r2, [pc, #296]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800502e:	e00e      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005030:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005034:	3308      	adds	r3, #8
 8005036:	4618      	mov	r0, r3
 8005038:	f002 fff0 	bl	800801c <RCCEx_PLL2_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005042:	e004      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      default:
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x1d86>
        break;
 800504c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504e:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10d      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1daa>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005056:	4b3e      	ldr	r3, [pc, #248]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800505c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005060:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005064:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005068:	4939      	ldr	r1, [pc, #228]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005070:	e003      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005072:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8005076:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800507a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	2100      	movs	r1, #0
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005090:	460b      	mov	r3, r1
 8005092:	4313      	orrs	r3, r2
 8005094:	d038      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005096:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800509a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800509e:	2b30      	cmp	r3, #48	; 0x30
 80050a0:	d01b      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x1e12>
 80050a2:	2b30      	cmp	r3, #48	; 0x30
 80050a4:	d815      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d002      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d007      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 80050ae:	e010      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	4a26      	ldr	r2, [pc, #152]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ba:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80050bc:	e00e      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1e14>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80050c2:	3330      	adds	r3, #48	; 0x30
 80050c4:	4618      	mov	r0, r3
 80050c6:	f003 f841 	bl	800814c <RCCEx_PLL3_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80050d0:	e004      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        break;
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        break;
 80050da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050dc:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10d      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80050e4:	4b1a      	ldr	r3, [pc, #104]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80050e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80050ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80050f2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80050f6:	4916      	ldr	r1, [pc, #88]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80050fe:	e003      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005100:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8005104:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005108:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	2100      	movs	r1, #0
 8005112:	6039      	str	r1, [r7, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800511e:	460b      	mov	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	d00c      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1e76>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800512a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800512e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005132:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005136:	4906      	ldr	r1, [pc, #24]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800513e:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
}
 8005142:	4618      	mov	r0, r3
 8005144:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8005148:	46bd      	mov	sp, r7
 800514a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800514e:	bf00      	nop
 8005150:	44020c00 	.word	0x44020c00

08005154 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005154:	b480      	push	{r7}
 8005156:	b08b      	sub	sp, #44	; 0x2c
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800515c:	4bad      	ldr	r3, [pc, #692]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800515e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005164:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005166:	4bab      	ldr	r3, [pc, #684]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005170:	4ba8      	ldr	r3, [pc, #672]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800517a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800517c:	4ba5      	ldr	r3, [pc, #660]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005186:	4ba3      	ldr	r3, [pc, #652]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	fb02 f303 	mul.w	r3, r2, r3
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8126 	beq.w	80053f6 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d053      	beq.n	8005258 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d86f      	bhi.n	8005296 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d003      	beq.n	80051c4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d02b      	beq.n	800521a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80051c2:	e068      	b.n	8005296 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051c4:	4b93      	ldr	r3, [pc, #588]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	08db      	lsrs	r3, r3, #3
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	4a92      	ldr	r2, [pc, #584]	; (8005418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	ee07 3a90 	vmov	s15, r3
 80051f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80051fc:	eddf 5a87 	vldr	s11, [pc, #540]	; 800541c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005214:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005218:	e068      	b.n	80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005224:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005420 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005236:	ed97 6a04 	vldr	s12, [r7, #16]
 800523a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800541c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005256:	e049      	b.n	80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005424 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	ee07 3a90 	vmov	s15, r3
 8005270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005274:	ed97 6a04 	vldr	s12, [r7, #16]
 8005278:	eddf 5a68 	vldr	s11, [pc, #416]	; 800541c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800527c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005290:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005294:	e02a      	b.n	80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005296:	4b5f      	ldr	r3, [pc, #380]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	08db      	lsrs	r3, r3, #3
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	4a5d      	ldr	r2, [pc, #372]	; (8005418 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052a2:	fa22 f303 	lsr.w	r3, r2, r3
 80052a6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	ee07 3a90 	vmov	s15, r3
 80052b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80052ce:	eddf 5a53 	vldr	s11, [pc, #332]	; 800541c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80052ea:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052ec:	4b49      	ldr	r3, [pc, #292]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f8:	d121      	bne.n	800533e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80052fa:	4b46      	ldr	r3, [pc, #280]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d017      	beq.n	8005336 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005306:	4b43      	ldr	r3, [pc, #268]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	0a5b      	lsrs	r3, r3, #9
 800530c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800531c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005320:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800532c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e002      	b.n	8005344 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005344:	4b33      	ldr	r3, [pc, #204]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005350:	d121      	bne.n	8005396 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005352:	4b30      	ldr	r3, [pc, #192]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d017      	beq.n	800538e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800535e:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	0c1b      	lsrs	r3, r3, #16
 8005364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005374:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005378:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800537c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005384:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	e006      	b.n	800539c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	605a      	str	r2, [r3, #4]
 8005394:	e002      	b.n	800539c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053a8:	d121      	bne.n	80053ee <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80053aa:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d017      	beq.n	80053e6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80053b6:	4b17      	ldr	r3, [pc, #92]	; (8005414 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	0e1b      	lsrs	r3, r3, #24
 80053bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80053c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80053d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80053d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053dc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80053e4:	e010      	b.n	8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	609a      	str	r2, [r3, #8]
}
 80053ec:	e00c      	b.n	8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	609a      	str	r2, [r3, #8]
}
 80053f4:	e008      	b.n	8005408 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	609a      	str	r2, [r3, #8]
}
 8005408:	bf00      	nop
 800540a:	372c      	adds	r7, #44	; 0x2c
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	44020c00 	.word	0x44020c00
 8005418:	03d09000 	.word	0x03d09000
 800541c:	46000000 	.word	0x46000000
 8005420:	4a742400 	.word	0x4a742400
 8005424:	4bbebc20 	.word	0x4bbebc20

08005428 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005428:	b480      	push	{r7}
 800542a:	b08b      	sub	sp, #44	; 0x2c
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005430:	4bad      	ldr	r3, [pc, #692]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005438:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800543a:	4bab      	ldr	r3, [pc, #684]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005444:	4ba8      	ldr	r3, [pc, #672]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	0a1b      	lsrs	r3, r3, #8
 800544a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800544e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005450:	4ba5      	ldr	r3, [pc, #660]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800545a:	4ba3      	ldr	r3, [pc, #652]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	08db      	lsrs	r3, r3, #3
 8005460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8126 	beq.w	80056ca <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d053      	beq.n	800552c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	2b03      	cmp	r3, #3
 8005488:	d86f      	bhi.n	800556a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d003      	beq.n	8005498 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d02b      	beq.n	80054ee <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005496:	e068      	b.n	800556a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005498:	4b93      	ldr	r3, [pc, #588]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	08db      	lsrs	r3, r3, #3
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	4a92      	ldr	r2, [pc, #584]	; (80056ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
 80054a8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	ee07 3a90 	vmov	s15, r3
 80054b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	ee07 3a90 	vmov	s15, r3
 80054c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80054d0:	eddf 5a87 	vldr	s11, [pc, #540]	; 80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80054d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80054ec:	e068      	b.n	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	ee07 3a90 	vmov	s15, r3
 80054f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80056f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80054fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550a:	ed97 6a04 	vldr	s12, [r7, #16]
 800550e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800551a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800551e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005526:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800552a:	e049      	b.n	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005536:	eddf 6a70 	vldr	s13, [pc, #448]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800553a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	ee07 3a90 	vmov	s15, r3
 8005544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005548:	ed97 6a04 	vldr	s12, [r7, #16]
 800554c:	eddf 5a68 	vldr	s11, [pc, #416]	; 80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800555c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005564:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005568:	e02a      	b.n	80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800556a:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	4a5d      	ldr	r2, [pc, #372]	; (80056ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005576:	fa22 f303 	lsr.w	r3, r2, r3
 800557a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559e:	ed97 6a04 	vldr	s12, [r7, #16]
 80055a2:	eddf 5a53 	vldr	s11, [pc, #332]	; 80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80055a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80055be:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055c0:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055cc:	d121      	bne.n	8005612 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80055ce:	4b46      	ldr	r3, [pc, #280]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80055da:	4b43      	ldr	r3, [pc, #268]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	0a5b      	lsrs	r3, r3, #9
 80055e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e4:	ee07 3a90 	vmov	s15, r3
 80055e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80055ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055f0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80055f4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80055f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005600:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	e006      	b.n	8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e002      	b.n	8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005618:	4b33      	ldr	r3, [pc, #204]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005624:	d121      	bne.n	800566a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005626:	4b30      	ldr	r3, [pc, #192]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d017      	beq.n	8005662 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005632:	4b2d      	ldr	r3, [pc, #180]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005648:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800564c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005658:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	e006      	b.n	8005670 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	e002      	b.n	8005670 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005670:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800567c:	d121      	bne.n	80056c2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d017      	beq.n	80056ba <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	0e1b      	lsrs	r3, r3, #24
 8005690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800569c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80056a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80056a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056b8:	e010      	b.n	80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	609a      	str	r2, [r3, #8]
}
 80056c0:	e00c      	b.n	80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	e008      	b.n	80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	609a      	str	r2, [r3, #8]
}
 80056dc:	bf00      	nop
 80056de:	372c      	adds	r7, #44	; 0x2c
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	44020c00 	.word	0x44020c00
 80056ec:	03d09000 	.word	0x03d09000
 80056f0:	46000000 	.word	0x46000000
 80056f4:	4a742400 	.word	0x4a742400
 80056f8:	4bbebc20 	.word	0x4bbebc20

080056fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b08b      	sub	sp, #44	; 0x2c
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005704:	4bad      	ldr	r3, [pc, #692]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800570e:	4bab      	ldr	r3, [pc, #684]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005718:	4ba8      	ldr	r3, [pc, #672]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	0a1b      	lsrs	r3, r3, #8
 800571e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005722:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005724:	4ba5      	ldr	r3, [pc, #660]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800572e:	4ba3      	ldr	r3, [pc, #652]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005732:	08db      	lsrs	r3, r3, #3
 8005734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005746:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8126 	beq.w	800599e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d053      	beq.n	8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2b03      	cmp	r3, #3
 800575c:	d86f      	bhi.n	800583e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d003      	beq.n	800576c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d02b      	beq.n	80057c2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800576a:	e068      	b.n	800583e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800576c:	4b93      	ldr	r3, [pc, #588]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	08db      	lsrs	r3, r3, #3
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	4a92      	ldr	r2, [pc, #584]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
 800577c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	ee07 3a90 	vmov	s15, r3
 8005784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	ee07 3a90 	vmov	s15, r3
 800579c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80057a4:	eddf 5a87 	vldr	s11, [pc, #540]	; 80059c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80057a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80057c0:	e068      	b.n	8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057cc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80059c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80057d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	ed97 6a04 	vldr	s12, [r7, #16]
 80057e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80057e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80057fe:	e049      	b.n	8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	eddf 6a70 	vldr	s13, [pc, #448]	; 80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	ee07 3a90 	vmov	s15, r3
 8005818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005820:	eddf 5a68 	vldr	s11, [pc, #416]	; 80059c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005838:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800583c:	e02a      	b.n	8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800583e:	4b5f      	ldr	r3, [pc, #380]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	08db      	lsrs	r3, r3, #3
 8005844:	f003 0303 	and.w	r3, r3, #3
 8005848:	4a5d      	ldr	r2, [pc, #372]	; (80059c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800584a:	fa22 f303 	lsr.w	r3, r2, r3
 800584e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	ee07 3a90 	vmov	s15, r3
 8005860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005872:	ed97 6a04 	vldr	s12, [r7, #16]
 8005876:	eddf 5a53 	vldr	s11, [pc, #332]	; 80059c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800587a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800587e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800588e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005892:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005894:	4b49      	ldr	r3, [pc, #292]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800589c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a0:	d121      	bne.n	80058e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80058a2:	4b46      	ldr	r3, [pc, #280]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d017      	beq.n	80058de <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80058ae:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	0a5b      	lsrs	r3, r3, #9
 80058b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b8:	ee07 3a90 	vmov	s15, r3
 80058bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80058c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058c4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80058c8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80058cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e006      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e002      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058ec:	4b33      	ldr	r3, [pc, #204]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f8:	d121      	bne.n	800593e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80058fa:	4b30      	ldr	r3, [pc, #192]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d017      	beq.n	8005936 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005906:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	0c1b      	lsrs	r3, r3, #16
 800590c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800591c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005920:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800592c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	605a      	str	r2, [r3, #4]
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	605a      	str	r2, [r3, #4]
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005944:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800594c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005950:	d121      	bne.n	8005996 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005952:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d017      	beq.n	800598e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800595e:	4b17      	ldr	r3, [pc, #92]	; (80059bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005962:	0e1b      	lsrs	r3, r3, #24
 8005964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005974:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005978:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800597c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005984:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800598c:	e010      	b.n	80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	609a      	str	r2, [r3, #8]
}
 8005994:	e00c      	b.n	80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	e008      	b.n	80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	bf00      	nop
 80059b2:	372c      	adds	r7, #44	; 0x2c
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	44020c00 	.word	0x44020c00
 80059c0:	03d09000 	.word	0x03d09000
 80059c4:	46000000 	.word	0x46000000
 80059c8:	4a742400 	.word	0x4a742400
 80059cc:	4bbebc20 	.word	0x4bbebc20

080059d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b08f      	sub	sp, #60	; 0x3c
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80059da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059de:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 80059e2:	4321      	orrs	r1, r4
 80059e4:	d150      	bne.n	8005a88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80059e6:	4b26      	ldr	r3, [pc, #152]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80059f2:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d108      	bne.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a06:	d104      	bne.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0e:	f002 baf6 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005a12:	4b1b      	ldr	r3, [pc, #108]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a20:	d108      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a28:	d104      	bne.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005a2a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a30:	f002 bae5 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005a34:	4b12      	ldr	r3, [pc, #72]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a40:	d119      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a48:	d115      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a56:	d30a      	bcc.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005a58:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a62:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a6a:	f002 bac8 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
      }
      else
      {
        frequency = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a72:	f002 bac4 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7a:	f002 bac0 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8005a7e:	bf00      	nop
 8005a80:	44020c00 	.word	0x44020c00
 8005a84:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a8c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8005a90:	ea50 0104 	orrs.w	r1, r0, r4
 8005a94:	f001 8242 	beq.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x154c>
 8005a98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a9c:	2801      	cmp	r0, #1
 8005a9e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8005aa2:	f082 82a9 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aaa:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8005aae:	ea50 0104 	orrs.w	r1, r0, r4
 8005ab2:	f001 8139 	beq.w	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 8005ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aba:	2801      	cmp	r0, #1
 8005abc:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8005ac0:	f082 829a 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac8:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8005acc:	ea50 0104 	orrs.w	r1, r0, r4
 8005ad0:	f001 85ce 	beq.w	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca0>
 8005ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ad8:	2801      	cmp	r0, #1
 8005ada:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8005ade:	f082 828b 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ae6:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8005aea:	ea50 0104 	orrs.w	r1, r0, r4
 8005aee:	f001 8518 	beq.w	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x1b52>
 8005af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005af6:	2801      	cmp	r0, #1
 8005af8:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8005afc:	f082 827c 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b04:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8005b08:	ea50 0104 	orrs.w	r1, r0, r4
 8005b0c:	f001 846a 	beq.w	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a14>
 8005b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b14:	2801      	cmp	r0, #1
 8005b16:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8005b1a:	f082 826d 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b22:	f1a1 0420 	sub.w	r4, r1, #32
 8005b26:	ea50 0104 	orrs.w	r1, r0, r4
 8005b2a:	f001 83b4 	beq.w	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x18c6>
 8005b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b32:	2801      	cmp	r0, #1
 8005b34:	f171 0120 	sbcs.w	r1, r1, #32
 8005b38:	f082 825e 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b40:	f1a1 0410 	sub.w	r4, r1, #16
 8005b44:	ea50 0104 	orrs.w	r1, r0, r4
 8005b48:	f002 8222 	beq.w	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x25c0>
 8005b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b50:	2801      	cmp	r0, #1
 8005b52:	f171 0110 	sbcs.w	r1, r1, #16
 8005b56:	f082 824f 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b5e:	f1a1 0408 	sub.w	r4, r1, #8
 8005b62:	ea50 0104 	orrs.w	r1, r0, r4
 8005b66:	f002 8198 	beq.w	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x24ca>
 8005b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b6e:	2801      	cmp	r0, #1
 8005b70:	f171 0108 	sbcs.w	r1, r1, #8
 8005b74:	f082 8240 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b7c:	1f0c      	subs	r4, r1, #4
 8005b7e:	ea50 0104 	orrs.w	r1, r0, r4
 8005b82:	f001 8614 	beq.w	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x1dde>
 8005b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b8a:	2801      	cmp	r0, #1
 8005b8c:	f171 0104 	sbcs.w	r1, r1, #4
 8005b90:	f082 8232 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b98:	1e8c      	subs	r4, r1, #2
 8005b9a:	ea50 0104 	orrs.w	r1, r0, r4
 8005b9e:	f002 810f 	beq.w	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8005ba2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba6:	2801      	cmp	r0, #1
 8005ba8:	f171 0102 	sbcs.w	r1, r1, #2
 8005bac:	f082 8224 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bb4:	1e4c      	subs	r4, r1, #1
 8005bb6:	ea50 0104 	orrs.w	r1, r0, r4
 8005bba:	f002 809a 	beq.w	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8005bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bc2:	2801      	cmp	r0, #1
 8005bc4:	f171 0101 	sbcs.w	r1, r1, #1
 8005bc8:	f082 8216 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005bd4:	4321      	orrs	r1, r4
 8005bd6:	f002 8025 	beq.w	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8005bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bde:	4cd6      	ldr	r4, [pc, #856]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	f171 0100 	sbcs.w	r1, r1, #0
 8005be6:	f082 8207 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bee:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005bf2:	4321      	orrs	r1, r4
 8005bf4:	f001 87a5 	beq.w	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x2172>
 8005bf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bfc:	4ccf      	ldr	r4, [pc, #828]	; (8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005bfe:	42a0      	cmp	r0, r4
 8005c00:	f171 0100 	sbcs.w	r1, r1, #0
 8005c04:	f082 81f8 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c0c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005c10:	4321      	orrs	r1, r4
 8005c12:	f001 871d 	beq.w	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2080>
 8005c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c1a:	4cc9      	ldr	r4, [pc, #804]	; (8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c1c:	42a0      	cmp	r0, r4
 8005c1e:	f171 0100 	sbcs.w	r1, r1, #0
 8005c22:	f082 81e9 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c2a:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8005c2e:	4321      	orrs	r1, r4
 8005c30:	f001 8666 	beq.w	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1f30>
 8005c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c38:	4cc2      	ldr	r4, [pc, #776]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005c3a:	42a0      	cmp	r0, r4
 8005c3c:	f171 0100 	sbcs.w	r1, r1, #0
 8005c40:	f082 81da 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c48:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8005c4c:	4321      	orrs	r1, r4
 8005c4e:	f001 85de 	beq.w	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3e>
 8005c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c56:	4cbc      	ldr	r4, [pc, #752]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005c58:	42a0      	cmp	r0, r4
 8005c5a:	f171 0100 	sbcs.w	r1, r1, #0
 8005c5e:	f082 81cb 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c66:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8005c6a:	4321      	orrs	r1, r4
 8005c6c:	f002 814a 	beq.w	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2534>
 8005c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c74:	4cb5      	ldr	r4, [pc, #724]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005c76:	42a0      	cmp	r0, r4
 8005c78:	f171 0100 	sbcs.w	r1, r1, #0
 8005c7c:	f082 81bc 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c84:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8005c88:	4321      	orrs	r1, r4
 8005c8a:	f000 826b 	beq.w	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c92:	4caf      	ldr	r4, [pc, #700]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005c94:	42a0      	cmp	r0, r4
 8005c96:	f171 0100 	sbcs.w	r1, r1, #0
 8005c9a:	f082 81ad 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca2:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8005ca6:	4321      	orrs	r1, r4
 8005ca8:	f000 87e9 	beq.w	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 8005cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cb0:	4ca8      	ldr	r4, [pc, #672]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005cb2:	42a0      	cmp	r0, r4
 8005cb4:	f171 0100 	sbcs.w	r1, r1, #0
 8005cb8:	f082 819e 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc0:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005cc4:	4321      	orrs	r1, r4
 8005cc6:	f000 81ce 	beq.w	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cce:	4ca2      	ldr	r4, [pc, #648]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005cd0:	42a0      	cmp	r0, r4
 8005cd2:	f171 0100 	sbcs.w	r1, r1, #0
 8005cd6:	f082 818f 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cde:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005ce2:	4321      	orrs	r1, r4
 8005ce4:	f000 8140 	beq.w	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cec:	4c9b      	ldr	r4, [pc, #620]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005cee:	42a0      	cmp	r0, r4
 8005cf0:	f171 0100 	sbcs.w	r1, r1, #0
 8005cf4:	f082 8180 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cfc:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8005d00:	4321      	orrs	r1, r4
 8005d02:	f001 8229 	beq.w	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>
 8005d06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d0a:	4c95      	ldr	r4, [pc, #596]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005d0c:	42a0      	cmp	r0, r4
 8005d0e:	f171 0100 	sbcs.w	r1, r1, #0
 8005d12:	f082 8171 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d1a:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8005d1e:	4321      	orrs	r1, r4
 8005d20:	f001 8173 	beq.w	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x163a>
 8005d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d28:	4c8e      	ldr	r4, [pc, #568]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005d2a:	42a0      	cmp	r0, r4
 8005d2c:	f171 0100 	sbcs.w	r1, r1, #0
 8005d30:	f082 8162 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d38:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8005d3c:	4321      	orrs	r1, r4
 8005d3e:	f001 8130 	beq.w	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8005d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d46:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8005d4a:	f171 0100 	sbcs.w	r1, r1, #0
 8005d4e:	f082 8153 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d56:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8005d5a:	4321      	orrs	r1, r4
 8005d5c:	f001 8093 	beq.w	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 8005d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d64:	f248 0401 	movw	r4, #32769	; 0x8001
 8005d68:	42a0      	cmp	r0, r4
 8005d6a:	f171 0100 	sbcs.w	r1, r1, #0
 8005d6e:	f082 8143 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d76:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8005d7a:	4321      	orrs	r1, r4
 8005d7c:	f001 8040 	beq.w	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 8005d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d84:	f244 0401 	movw	r4, #16385	; 0x4001
 8005d88:	42a0      	cmp	r0, r4
 8005d8a:	f171 0100 	sbcs.w	r1, r1, #0
 8005d8e:	f082 8133 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d96:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8005d9a:	4321      	orrs	r1, r4
 8005d9c:	f000 87ed 	beq.w	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 8005da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005da4:	f242 0401 	movw	r4, #8193	; 0x2001
 8005da8:	42a0      	cmp	r0, r4
 8005daa:	f171 0100 	sbcs.w	r1, r1, #0
 8005dae:	f082 8123 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005db6:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8005dba:	4321      	orrs	r1, r4
 8005dbc:	f000 86f9 	beq.w	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8005dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dc4:	f241 0401 	movw	r4, #4097	; 0x1001
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	f171 0100 	sbcs.w	r1, r1, #0
 8005dce:	f082 8113 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005dd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dd6:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005dda:	4321      	orrs	r1, r4
 8005ddc:	f000 8683 	beq.w	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8005de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005de4:	f640 0401 	movw	r4, #2049	; 0x801
 8005de8:	42a0      	cmp	r0, r4
 8005dea:	f171 0100 	sbcs.w	r1, r1, #0
 8005dee:	f082 8103 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005df6:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005dfa:	4321      	orrs	r1, r4
 8005dfc:	f000 860d 	beq.w	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x104a>
 8005e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e04:	f240 4401 	movw	r4, #1025	; 0x401
 8005e08:	42a0      	cmp	r0, r4
 8005e0a:	f171 0100 	sbcs.w	r1, r1, #0
 8005e0e:	f082 80f3 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e16:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005e1a:	4321      	orrs	r1, r4
 8005e1c:	f000 858b 	beq.w	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 8005e20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e24:	f240 2401 	movw	r4, #513	; 0x201
 8005e28:	42a0      	cmp	r0, r4
 8005e2a:	f171 0100 	sbcs.w	r1, r1, #0
 8005e2e:	f082 80e3 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e36:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005e3a:	4321      	orrs	r1, r4
 8005e3c:	f000 8510 	beq.w	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8005e40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e44:	f240 1401 	movw	r4, #257	; 0x101
 8005e48:	42a0      	cmp	r0, r4
 8005e4a:	f171 0100 	sbcs.w	r1, r1, #0
 8005e4e:	f082 80d3 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e56:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8005e5a:	4321      	orrs	r1, r4
 8005e5c:	f000 8495 	beq.w	800678a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e64:	2881      	cmp	r0, #129	; 0x81
 8005e66:	f171 0100 	sbcs.w	r1, r1, #0
 8005e6a:	f082 80c5 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e72:	2821      	cmp	r0, #33	; 0x21
 8005e74:	f171 0100 	sbcs.w	r1, r1, #0
 8005e78:	d254      	bcs.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e7e:	4301      	orrs	r1, r0
 8005e80:	f002 80ba 	beq.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e88:	1e42      	subs	r2, r0, #1
 8005e8a:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005e8e:	2a20      	cmp	r2, #32
 8005e90:	f173 0100 	sbcs.w	r1, r3, #0
 8005e94:	f082 80b0 	bcs.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e98:	2a1f      	cmp	r2, #31
 8005e9a:	f202 80ad 	bhi.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e9e:	a101      	add	r1, pc, #4	; (adr r1, 8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8005ea0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ea4:	080061a9 	.word	0x080061a9
 8005ea8:	08006289 	.word	0x08006289
 8005eac:	08007ff9 	.word	0x08007ff9
 8005eb0:	08006349 	.word	0x08006349
 8005eb4:	08007ff9 	.word	0x08007ff9
 8005eb8:	08007ff9 	.word	0x08007ff9
 8005ebc:	08007ff9 	.word	0x08007ff9
 8005ec0:	08006419 	.word	0x08006419
 8005ec4:	08007ff9 	.word	0x08007ff9
 8005ec8:	08007ff9 	.word	0x08007ff9
 8005ecc:	08007ff9 	.word	0x08007ff9
 8005ed0:	08007ff9 	.word	0x08007ff9
 8005ed4:	08007ff9 	.word	0x08007ff9
 8005ed8:	08007ff9 	.word	0x08007ff9
 8005edc:	08007ff9 	.word	0x08007ff9
 8005ee0:	080064fb 	.word	0x080064fb
 8005ee4:	08007ff9 	.word	0x08007ff9
 8005ee8:	08007ff9 	.word	0x08007ff9
 8005eec:	08007ff9 	.word	0x08007ff9
 8005ef0:	08007ff9 	.word	0x08007ff9
 8005ef4:	08007ff9 	.word	0x08007ff9
 8005ef8:	08007ff9 	.word	0x08007ff9
 8005efc:	08007ff9 	.word	0x08007ff9
 8005f00:	08007ff9 	.word	0x08007ff9
 8005f04:	08007ff9 	.word	0x08007ff9
 8005f08:	08007ff9 	.word	0x08007ff9
 8005f0c:	08007ff9 	.word	0x08007ff9
 8005f10:	08007ff9 	.word	0x08007ff9
 8005f14:	08007ff9 	.word	0x08007ff9
 8005f18:	08007ff9 	.word	0x08007ff9
 8005f1c:	08007ff9 	.word	0x08007ff9
 8005f20:	080065d1 	.word	0x080065d1
 8005f24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f28:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	f000 83ba 	beq.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 8005f32:	f002 b861 	b.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005f36:	bf00      	nop
 8005f38:	80000001 	.word	0x80000001
 8005f3c:	40000001 	.word	0x40000001
 8005f40:	20000001 	.word	0x20000001
 8005f44:	10000001 	.word	0x10000001
 8005f48:	08000001 	.word	0x08000001
 8005f4c:	04000001 	.word	0x04000001
 8005f50:	00400001 	.word	0x00400001
 8005f54:	00200001 	.word	0x00200001
 8005f58:	00100001 	.word	0x00100001
 8005f5c:	00080001 	.word	0x00080001
 8005f60:	00040001 	.word	0x00040001
 8005f64:	00020001 	.word	0x00020001
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005f68:	4b9f      	ldr	r3, [pc, #636]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005f6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f6e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005f72:	633b      	str	r3, [r7, #48]	; 0x30
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f7a:	d036      	beq.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f82:	d86b      	bhi.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f8a:	d02b      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f92:	d863      	bhi.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f9a:	d01b      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa2:	d85b      	bhi.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d004      	beq.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb0:	d008      	beq.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 8005fb2:	e053      	b.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fb4:	f107 0320 	add.w	r3, r7, #32
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff f8cb 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fc2:	e04e      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fc4:	f107 0314 	add.w	r3, r7, #20
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff fa2d 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fd2:	e046      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fd4:	f107 0308 	add.w	r3, r7, #8
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff fb8f 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fe2:	e03e      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005fe4:	4b81      	ldr	r3, [pc, #516]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fe8:	e03b      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fea:	4b7f      	ldr	r3, [pc, #508]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ff0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ff6:	4b7c      	ldr	r3, [pc, #496]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d10c      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d109      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006008:	4b77      	ldr	r3, [pc, #476]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	08db      	lsrs	r3, r3, #3
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	4a77      	ldr	r2, [pc, #476]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
 800601a:	e01e      	b.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800601c:	4b72      	ldr	r3, [pc, #456]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006028:	d106      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d102      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006032:	4b70      	ldr	r3, [pc, #448]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
 8006036:	e010      	b.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006038:	4b6b      	ldr	r3, [pc, #428]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006044:	d106      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800604c:	d102      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800604e:	4b6a      	ldr	r3, [pc, #424]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
 8006052:	e002      	b.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006058:	e003      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800605a:	e002      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          default :
          {
            frequency = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006060:	bf00      	nop
          }
        }
        break;
 8006062:	f001 bfcc 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006066:	4b60      	ldr	r3, [pc, #384]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800606c:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006070:	633b      	str	r3, [r7, #48]	; 0x30
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006078:	d036      	beq.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006080:	d86b      	bhi.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006088:	d02b      	beq.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006090:	d863      	bhi.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006098:	d01b      	beq.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a0:	d85b      	bhi.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060ae:	d008      	beq.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 80060b0:	e053      	b.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060b2:	f107 0320 	add.w	r3, r7, #32
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff f84c 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060c0:	e04e      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060c2:	f107 0314 	add.w	r3, r7, #20
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff f9ae 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060d0:	e046      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff fb10 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060e0:	e03e      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80060e2:	4b42      	ldr	r3, [pc, #264]	; (80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060e6:	e03b      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060e8:	4b3f      	ldr	r3, [pc, #252]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80060ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060ee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060f4:	4b3c      	ldr	r3, [pc, #240]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d10c      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006106:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	08db      	lsrs	r3, r3, #3
 800610c:	f003 0303 	and.w	r3, r3, #3
 8006110:	4a37      	ldr	r2, [pc, #220]	; (80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
 8006118:	e01e      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800611a:	4b33      	ldr	r3, [pc, #204]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006126:	d106      	bne.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612e:	d102      	bne.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006130:	4b30      	ldr	r3, [pc, #192]	; (80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
 8006134:	e010      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006136:	4b2c      	ldr	r3, [pc, #176]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006142:	d106      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006146:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800614a:	d102      	bne.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800614c:	4b2a      	ldr	r3, [pc, #168]	; (80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
 8006150:	e002      	b.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006156:	e003      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
 8006158:	e002      	b.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          default :
          {
            frequency = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800615e:	bf00      	nop
          }
        }
        break;
 8006160:	f001 bf4d 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006164:	4b20      	ldr	r3, [pc, #128]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006166:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800616a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616e:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006176:	f107 0320 	add.w	r3, r7, #32
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe ffea 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006184:	f001 bf3b 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d108      	bne.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800618e:	f107 0314 	add.w	r3, r7, #20
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff f948 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800619c:	f001 bf2f 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061a4:	f001 bf2b 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80061aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d104      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80061ba:	f7fd f859 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 80061be:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80061c0:	f001 bf1d 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80061c4:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d0:	d114      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d111      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061d8:	f107 0314 	add.w	r3, r7, #20
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff f923 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
 80061e6:	e04d      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 80061e8:	44020c00 	.word	0x44020c00
 80061ec:	00bb8000 	.word	0x00bb8000
 80061f0:	03d09000 	.word	0x03d09000
 80061f4:	003d0900 	.word	0x003d0900
 80061f8:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80061fc:	4ba0      	ldr	r3, [pc, #640]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006208:	d10a      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	2b02      	cmp	r3, #2
 800620e:	d107      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006210:	f107 0308 	add.w	r3, r7, #8
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fa71 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
 800621e:	e031      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006220:	4b97      	ldr	r3, [pc, #604]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b02      	cmp	r3, #2
 800622a:	d10c      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800622c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622e:	2b03      	cmp	r3, #3
 8006230:	d109      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006232:	4b93      	ldr	r3, [pc, #588]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	08db      	lsrs	r3, r3, #3
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	4a91      	ldr	r2, [pc, #580]	; (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800623e:	fa22 f303 	lsr.w	r3, r2, r3
 8006242:	637b      	str	r3, [r7, #52]	; 0x34
 8006244:	e01e      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006246:	4b8e      	ldr	r3, [pc, #568]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800624e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006252:	d105      	bne.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	2b04      	cmp	r3, #4
 8006258:	d102      	bne.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = CSI_VALUE;
 800625a:	4b8b      	ldr	r3, [pc, #556]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
 800625e:	e011      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006260:	4b87      	ldr	r3, [pc, #540]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b02      	cmp	r3, #2
 800626c:	d106      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	2b05      	cmp	r3, #5
 8006272:	d103      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          frequency = LSE_VALUE;
 8006274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006278:	637b      	str	r3, [r7, #52]	; 0x34
 800627a:	e003      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006280:	f001 bebd 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006284:	f001 bebb 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006288:	4b7d      	ldr	r3, [pc, #500]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800628a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800628e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006292:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	2b00      	cmp	r3, #0
 8006298:	d104      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800629a:	f7fc ffd3 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 800629e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80062a0:	f001 bead 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80062a4:	4b76      	ldr	r3, [pc, #472]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062b0:	d10a      	bne.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d107      	bne.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062b8:	f107 0314 	add.w	r3, r7, #20
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff f8b3 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
 80062c6:	e03d      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	2b10      	cmp	r3, #16
 80062cc:	d108      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ce:	f107 0308 	add.w	r3, r7, #8
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fa12 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062dc:	f001 be8f 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80062e0:	4b67      	ldr	r3, [pc, #412]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d10c      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	2b18      	cmp	r3, #24
 80062f0:	d109      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062f2:	4b63      	ldr	r3, [pc, #396]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	08db      	lsrs	r3, r3, #3
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	4a61      	ldr	r2, [pc, #388]	; (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80062fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
 8006304:	e01e      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006306:	4b5e      	ldr	r3, [pc, #376]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800630e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006312:	d105      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	2b20      	cmp	r3, #32
 8006318:	d102      	bne.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
          frequency = CSI_VALUE;
 800631a:	4b5b      	ldr	r3, [pc, #364]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
 800631e:	e011      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006320:	4b57      	ldr	r3, [pc, #348]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b02      	cmp	r3, #2
 800632c:	d106      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	2b28      	cmp	r3, #40	; 0x28
 8006332:	d103      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = LSE_VALUE;
 8006334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
 800633a:	e003      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006340:	f001 be5d 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006344:	f001 be5b 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006348:	4b4d      	ldr	r3, [pc, #308]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800634a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800634e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006352:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800635a:	f7fc ff73 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 800635e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006360:	f001 be4d 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006364:	4b46      	ldr	r3, [pc, #280]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800636c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006370:	d10a      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d107      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006378:	f107 0314 	add.w	r3, r7, #20
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff f853 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
 8006386:	e045      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006388:	4b3d      	ldr	r3, [pc, #244]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006394:	d10a      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d107      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800639c:	f107 0308 	add.w	r3, r7, #8
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff f9ab 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
 80063aa:	e033      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80063ac:	4b34      	ldr	r3, [pc, #208]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d10c      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	2bc0      	cmp	r3, #192	; 0xc0
 80063bc:	d109      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063be:	4b30      	ldr	r3, [pc, #192]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	08db      	lsrs	r3, r3, #3
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	4a2e      	ldr	r2, [pc, #184]	; (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80063ca:	fa22 f303 	lsr.w	r3, r2, r3
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
 80063d0:	e020      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80063d2:	4b2b      	ldr	r3, [pc, #172]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063de:	d106      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e6:	d102      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = CSI_VALUE;
 80063e8:	4b27      	ldr	r3, [pc, #156]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
 80063ec:	e012      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80063ee:	4b24      	ldr	r3, [pc, #144]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d107      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006402:	d103      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = LSE_VALUE;
 8006404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
 800640a:	e003      	b.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          frequency = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006410:	f001 bdf5 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006414:	f001 bdf3 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006418:	4b19      	ldr	r3, [pc, #100]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800641a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800641e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006422:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800642a:	f7fc ff0b 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 800642e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006430:	f001 bde5 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006434:	4b12      	ldr	r3, [pc, #72]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800643c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006440:	d10b      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006448:	d107      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe ffea 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
 8006458:	e04d      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800645a:	4b09      	ldr	r3, [pc, #36]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006466:	d111      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646e:	d10d      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006470:	f107 0308 	add.w	r3, r7, #8
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff f941 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	637b      	str	r3, [r7, #52]	; 0x34
 800647e:	e03a      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 8006480:	44020c00 	.word	0x44020c00
 8006484:	03d09000 	.word	0x03d09000
 8006488:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800648c:	4ba0      	ldr	r3, [pc, #640]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b02      	cmp	r3, #2
 8006496:	d10d      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800649e:	d109      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064a0:	4b9b      	ldr	r3, [pc, #620]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	08db      	lsrs	r3, r3, #3
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	4a9a      	ldr	r2, [pc, #616]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80064ac:	fa22 f303 	lsr.w	r3, r2, r3
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
 80064b2:	e020      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80064b4:	4b96      	ldr	r3, [pc, #600]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c0:	d106      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c8:	d102      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = CSI_VALUE;
 80064ca:	4b93      	ldr	r3, [pc, #588]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
 80064ce:	e012      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80064d0:	4b8f      	ldr	r3, [pc, #572]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d107      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80064e4:	d103      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          frequency = LSE_VALUE;
 80064e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
 80064ec:	e003      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
          frequency = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064f2:	f001 bd84 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80064f6:	f001 bd82 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80064fa:	4b85      	ldr	r3, [pc, #532]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006500:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006504:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	2b00      	cmp	r3, #0
 800650a:	d104      	bne.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800650c:	f7fc fe9a 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8006510:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006512:	f001 bd74 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006516:	4b7e      	ldr	r3, [pc, #504]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800651e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006522:	d10b      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652a:	d107      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652c:	f107 0314 	add.w	r3, r7, #20
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe ff79 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
 800653a:	e047      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800653c:	4b74      	ldr	r3, [pc, #464]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006548:	d10b      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006550:	d107      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006552:	f107 0308 	add.w	r3, r7, #8
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff f8d0 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	637b      	str	r3, [r7, #52]	; 0x34
 8006560:	e034      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006562:	4b6b      	ldr	r3, [pc, #428]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b02      	cmp	r3, #2
 800656c:	d10d      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 800656e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006570:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006574:	d109      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006576:	4b66      	ldr	r3, [pc, #408]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	08db      	lsrs	r3, r3, #3
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	4a64      	ldr	r2, [pc, #400]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
 8006588:	e020      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800658a:	4b61      	ldr	r3, [pc, #388]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006596:	d106      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800659e:	d102      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
          frequency = CSI_VALUE;
 80065a0:	4b5d      	ldr	r3, [pc, #372]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
 80065a4:	e012      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80065a6:	4b5a      	ldr	r3, [pc, #360]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80065a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d107      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80065ba:	d103      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
          frequency = LSE_VALUE;
 80065bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
 80065c2:	e003      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
          frequency = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065c8:	f001 bd19 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80065cc:	f001 bd17 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80065d0:	4b4f      	ldr	r3, [pc, #316]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80065d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80065d6:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80065da:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065e2:	f7fc fe2f 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 80065e6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80065e8:	f001 bd09 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80065ec:	4b48      	ldr	r3, [pc, #288]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f8:	d10b      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006600:	d107      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006602:	f107 0314 	add.w	r3, r7, #20
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe ff0e 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	637b      	str	r3, [r7, #52]	; 0x34
 8006610:	e047      	b.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006612:	4b3f      	ldr	r3, [pc, #252]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800661a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800661e:	d10b      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006626:	d107      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff f865 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
 8006636:	e034      	b.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006638:	4b35      	ldr	r3, [pc, #212]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b02      	cmp	r3, #2
 8006642:	d10d      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800664a:	d109      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800664c:	4b30      	ldr	r3, [pc, #192]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	4a2f      	ldr	r2, [pc, #188]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
 800665e:	e020      	b.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006660:	4b2b      	ldr	r3, [pc, #172]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800666c:	d106      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006674:	d102      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
          frequency = CSI_VALUE;
 8006676:	4b28      	ldr	r3, [pc, #160]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
 800667a:	e012      	b.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800667c:	4b24      	ldr	r3, [pc, #144]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800667e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b02      	cmp	r3, #2
 8006688:	d107      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006690:	d103      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          frequency = LSE_VALUE;
 8006692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
 8006698:	e003      	b.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
          frequency = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800669e:	f001 bcae 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80066a2:	f001 bcac 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80066a6:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80066a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80066ac:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80066b0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fc fdc4 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 80066bc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80066be:	f001 bc9e 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ce:	d10b      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066d6:	d107      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066d8:	f107 0314 	add.w	r3, r7, #20
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe fea3 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	637b      	str	r3, [r7, #52]	; 0x34
 80066e6:	e04e      	b.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80066e8:	4b09      	ldr	r3, [pc, #36]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f4:	d112      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066fc:	d10e      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fffa 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
 800670c:	e03b      	b.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 800670e:	bf00      	nop
 8006710:	44020c00 	.word	0x44020c00
 8006714:	03d09000 	.word	0x03d09000
 8006718:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800671c:	4ba0      	ldr	r3, [pc, #640]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b02      	cmp	r3, #2
 8006726:	d10d      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800672e:	d109      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006730:	4b9b      	ldr	r3, [pc, #620]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	08db      	lsrs	r3, r3, #3
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	4a9a      	ldr	r2, [pc, #616]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
 8006742:	e020      	b.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8006744:	4b96      	ldr	r3, [pc, #600]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800674c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006750:	d106      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006758:	d102      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
          frequency = CSI_VALUE;
 800675a:	4b93      	ldr	r3, [pc, #588]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
 800675e:	e012      	b.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006760:	4b8f      	ldr	r3, [pc, #572]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b02      	cmp	r3, #2
 800676c:	d107      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006774:	d103      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
          frequency = LSE_VALUE;
 8006776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
 800677c:	e003      	b.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
          frequency = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006782:	f001 bc3c 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006786:	f001 bc3a 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800678a:	4b85      	ldr	r3, [pc, #532]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800678c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006790:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006794:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8006796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800679c:	f7fc fd52 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 80067a0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80067a2:	f001 bc2c 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80067a6:	4b7e      	ldr	r3, [pc, #504]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067b2:	d10b      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ba:	d107      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067bc:	f107 0314 	add.w	r3, r7, #20
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe fe31 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ca:	e047      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80067cc:	4b74      	ldr	r3, [pc, #464]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d8:	d10b      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067e0:	d107      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe ff88 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
 80067f0:	e034      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80067f2:	4b6b      	ldr	r3, [pc, #428]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d10d      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006804:	d109      	bne.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006806:	4b66      	ldr	r3, [pc, #408]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	08db      	lsrs	r3, r3, #3
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	4a64      	ldr	r2, [pc, #400]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8006812:	fa22 f303 	lsr.w	r3, r2, r3
 8006816:	637b      	str	r3, [r7, #52]	; 0x34
 8006818:	e020      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800681a:	4b61      	ldr	r3, [pc, #388]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006826:	d106      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800682e:	d102      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
          frequency = CSI_VALUE;
 8006830:	4b5d      	ldr	r3, [pc, #372]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
 8006834:	e012      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8006836:	4b5a      	ldr	r3, [pc, #360]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b02      	cmp	r3, #2
 8006842:	d107      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800684a:	d103      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
          frequency = LSE_VALUE;
 800684c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
 8006852:	e003      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
          frequency = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006858:	f001 bbd1 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800685c:	f001 bbcf 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006860:	4b4f      	ldr	r3, [pc, #316]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006862:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006866:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800686a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006872:	f7fc fce7 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8006876:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006878:	f001 bbc1 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800687c:	4b48      	ldr	r3, [pc, #288]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006888:	d10b      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006890:	d107      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006892:	f107 0314 	add.w	r3, r7, #20
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe fdc6 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
 80068a0:	e047      	b.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80068a2:	4b3f      	ldr	r3, [pc, #252]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ae:	d10b      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068b6:	d107      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068b8:	f107 0308 	add.w	r3, r7, #8
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe ff1d 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	637b      	str	r3, [r7, #52]	; 0x34
 80068c6:	e034      	b.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80068c8:	4b35      	ldr	r3, [pc, #212]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d10d      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068da:	d109      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068dc:	4b30      	ldr	r3, [pc, #192]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	08db      	lsrs	r3, r3, #3
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	4a2f      	ldr	r2, [pc, #188]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34
 80068ee:	e020      	b.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80068f0:	4b2b      	ldr	r3, [pc, #172]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fc:	d106      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006904:	d102      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
          frequency = CSI_VALUE;
 8006906:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
 800690a:	e012      	b.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800690c:	4b24      	ldr	r3, [pc, #144]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800690e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	d107      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006920:	d103      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
          frequency = LSE_VALUE;
 8006922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
 8006928:	e003      	b.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
          frequency = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800692e:	f001 bb66 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006932:	f001 bb64 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8006936:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006938:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800693c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8006940:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006948:	f7fc fc7c 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 800694c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800694e:	f001 bb56 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006952:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800695a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800695e:	d10b      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006966:	d107      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006968:	f107 0314 	add.w	r3, r7, #20
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fd5b 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
 8006976:	e04e      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006978:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006984:	d112      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800698c:	d10e      	bne.n	80069ac <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800698e:	f107 0308 	add.w	r3, r7, #8
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe feb2 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	637b      	str	r3, [r7, #52]	; 0x34
 800699c:	e03b      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
 800699e:	bf00      	nop
 80069a0:	44020c00 	.word	0x44020c00
 80069a4:	03d09000 	.word	0x03d09000
 80069a8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80069ac:	4b9f      	ldr	r3, [pc, #636]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d10d      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80069be:	d109      	bne.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069c0:	4b9a      	ldr	r3, [pc, #616]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	08db      	lsrs	r3, r3, #3
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	4a99      	ldr	r2, [pc, #612]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
 80069d2:	e020      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80069d4:	4b95      	ldr	r3, [pc, #596]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e0:	d106      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069e8:	d102      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
          frequency = CSI_VALUE;
 80069ea:	4b92      	ldr	r3, [pc, #584]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
 80069ee:	e012      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80069f0:	4b8e      	ldr	r3, [pc, #568]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80069f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d107      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8006a04:	d103      	bne.n	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
          frequency = LSE_VALUE;
 8006a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0c:	e003      	b.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
          frequency = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a12:	f001 baf4 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006a16:	f001 baf2 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006a1a:	4b84      	ldr	r3, [pc, #528]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006a1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a2c:	f7fc fc0a 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8006a30:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a32:	f001 bae4 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8006a36:	4b7d      	ldr	r3, [pc, #500]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a42:	d10a      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d107      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4a:	f107 0314 	add.w	r3, r7, #20
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f7fe fcea 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
 8006a58:	e043      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006a5a:	4b74      	ldr	r3, [pc, #464]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a66:	d10a      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d107      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a6e:	f107 0308 	add.w	r3, r7, #8
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fe42 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a7c:	e031      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006a7e:	4b6b      	ldr	r3, [pc, #428]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d109      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a90:	4b66      	ldr	r3, [pc, #408]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	08db      	lsrs	r3, r3, #3
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	4a65      	ldr	r2, [pc, #404]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8006a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa2:	e01e      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006aa4:	4b61      	ldr	r3, [pc, #388]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab0:	d105      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d102      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
          frequency = CSI_VALUE;
 8006ab8:	4b5e      	ldr	r3, [pc, #376]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 8006aba:	637b      	str	r3, [r7, #52]	; 0x34
 8006abc:	e011      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006abe:	4b5b      	ldr	r3, [pc, #364]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d106      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d103      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
          frequency = LSE_VALUE;
 8006ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad8:	e003      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
          frequency = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ade:	f001 ba8e 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006ae2:	f001 ba8c 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006ae6:	4b51      	ldr	r3, [pc, #324]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006ae8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006af0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d104      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006af8:	f7fc fba4 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8006afc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006afe:	f001 ba7e 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006b02:	4b4a      	ldr	r3, [pc, #296]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b0e:	d10a      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d107      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b16:	f107 0314 	add.w	r3, r7, #20
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe fc84 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
 8006b24:	e043      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006b26:	4b41      	ldr	r3, [pc, #260]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b32:	d10a      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d107      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b3a:	f107 0308 	add.w	r3, r7, #8
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fddc 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
 8006b48:	e031      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006b4a:	4b38      	ldr	r3, [pc, #224]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d10c      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2b30      	cmp	r3, #48	; 0x30
 8006b5a:	d109      	bne.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b5c:	4b33      	ldr	r3, [pc, #204]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	08db      	lsrs	r3, r3, #3
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	4a32      	ldr	r2, [pc, #200]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6e:	e01e      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006b70:	4b2e      	ldr	r3, [pc, #184]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7c:	d105      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	2b40      	cmp	r3, #64	; 0x40
 8006b82:	d102      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
          frequency = CSI_VALUE;
 8006b84:	4b2b      	ldr	r3, [pc, #172]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
 8006b88:	e011      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006b8a:	4b28      	ldr	r3, [pc, #160]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d106      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	2b50      	cmp	r3, #80	; 0x50
 8006b9c:	d103      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = LSE_VALUE;
 8006b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba4:	e003      	b.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
          frequency = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006baa:	f001 ba28 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006bae:	f001 ba26 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006bb2:	4b1e      	ldr	r3, [pc, #120]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bb8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006bbc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d104      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006bc4:	f7fc fb6a 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 8006bc8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bca:	f001 ba18 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bd4:	d108      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd6:	f107 0314 	add.w	r3, r7, #20
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fc24 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be4:	f001 ba0b 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bee:	d108      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bf0:	f107 0308 	add.w	r3, r7, #8
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe fd81 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bfe:	f001 b9fe 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006c02:	4b0a      	ldr	r3, [pc, #40]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d114      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c14:	d110      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c16:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	08db      	lsrs	r3, r3, #3
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	4a03      	ldr	r2, [pc, #12]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8006c22:	fa22 f303 	lsr.w	r3, r2, r3
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
 8006c28:	e027      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
 8006c2a:	bf00      	nop
 8006c2c:	44020c00 	.word	0x44020c00
 8006c30:	03d09000 	.word	0x03d09000
 8006c34:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006c38:	4ba0      	ldr	r3, [pc, #640]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c44:	d106      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c4c:	d102      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
          frequency = CSI_VALUE;
 8006c4e:	4b9c      	ldr	r3, [pc, #624]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
 8006c52:	e012      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006c54:	4b99      	ldr	r3, [pc, #612]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d107      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006c68:	d103      	bne.n	8006c72 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
          frequency = LSE_VALUE;
 8006c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c70:	e003      	b.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
          frequency = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c76:	f001 b9c2 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006c7a:	f001 b9c0 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006c7e:	4b8f      	ldr	r3, [pc, #572]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006c90:	f7fc fabc 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8006c94:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006c96:	f001 b9b2 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d104      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ca0:	f7fc f988 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8006ca4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ca6:	f001 b9aa 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d108      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb0:	f107 0314 	add.w	r3, r7, #20
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe fbb7 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cbe:	f001 b99e 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006cc2:	4b7e      	ldr	r3, [pc, #504]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cce:	d105      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d102      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
          frequency = HSE_VALUE;
 8006cd6:	4b7b      	ldr	r3, [pc, #492]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>)
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cda:	e023      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006cdc:	4b77      	ldr	r3, [pc, #476]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d10c      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d109      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cee:	4b73      	ldr	r3, [pc, #460]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	08db      	lsrs	r3, r3, #3
 8006cf4:	f003 0303 	and.w	r3, r3, #3
 8006cf8:	4a73      	ldr	r2, [pc, #460]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8006cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006d00:	e010      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006d02:	4b6e      	ldr	r3, [pc, #440]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0e:	d105      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2b05      	cmp	r3, #5
 8006d14:	d102      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
          frequency = CSI_VALUE;
 8006d16:	4b6a      	ldr	r3, [pc, #424]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1a:	e003      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
          frequency = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d20:	f001 b96d 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006d24:	f001 b96b 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006d28:	4b64      	ldr	r3, [pc, #400]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006d34:	4b61      	ldr	r3, [pc, #388]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d106      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d103      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
        {
          frequency = LSE_VALUE;
 8006d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d4e:	e012      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006d50:	4b5a      	ldr	r3, [pc, #360]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d103      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
        {
          frequency = LSI_VALUE;
 8006d66:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6c:	e003      	b.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006d72:	f001 b944 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006d76:	f001 b942 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006d7a:	4b50      	ldr	r3, [pc, #320]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d84:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fc fa5a 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8006d90:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d92:	f001 b934 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9c:	d108      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d9e:	f107 0308 	add.w	r3, r7, #8
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe fcaa 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dac:	f001 b927 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006db0:	4b42      	ldr	r3, [pc, #264]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d10d      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc2:	d109      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dc4:	4b3d      	ldr	r3, [pc, #244]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	4a3e      	ldr	r2, [pc, #248]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd6:	e011      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006dd8:	4b38      	ldr	r3, [pc, #224]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de4:	d106      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dec:	d102      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
          frequency = CSI_VALUE;
 8006dee:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
 8006df2:	e003      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
          frequency = 0U;
 8006df4:	2300      	movs	r3, #0
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006df8:	f001 b901 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006dfc:	f001 b8ff 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e00:	4b2e      	ldr	r3, [pc, #184]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006e02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e06:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006e0a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d104      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e12:	f7fc fa17 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8006e16:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e18:	f001 b8f1 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e22:	d108      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e24:	f107 0308 	add.w	r3, r7, #8
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe fc67 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e32:	f001 b8e4 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006e36:	4b21      	ldr	r3, [pc, #132]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d10d      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e48:	d109      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e4a:	4b1c      	ldr	r3, [pc, #112]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	08db      	lsrs	r3, r3, #3
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	4a1c      	ldr	r2, [pc, #112]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8006e56:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5c:	e011      	b.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006e5e:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e6a:	d106      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e72:	d102      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
          frequency = CSI_VALUE;
 8006e74:	4b12      	ldr	r3, [pc, #72]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
 8006e78:	e003      	b.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
          frequency = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e7e:	f001 b8be 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006e82:	f001 b8bc 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006e86:	4b0d      	ldr	r3, [pc, #52]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006e88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e90:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x14d2>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006e98:	f7fc fa00 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 8006e9c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e9e:	f001 b8ae 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea8:	d110      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eaa:	f107 0308 	add.w	r3, r7, #8
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fc24 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eb8:	f001 b8a1 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006ebc:	44020c00 	.word	0x44020c00
 8006ec0:	003d0900 	.word	0x003d0900
 8006ec4:	017d7840 	.word	0x017d7840
 8006ec8:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006ecc:	4b9e      	ldr	r3, [pc, #632]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d10d      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ede:	d109      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ee0:	4b99      	ldr	r3, [pc, #612]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	08db      	lsrs	r3, r3, #3
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	4a98      	ldr	r2, [pc, #608]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8006eec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef2:	e011      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006ef4:	4b94      	ldr	r3, [pc, #592]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f00:	d106      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f08:	d102      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
          frequency = CSI_VALUE;
 8006f0a:	4b91      	ldr	r3, [pc, #580]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0e:	e003      	b.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
          frequency = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f14:	f001 b873 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006f18:	f001 b871 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f1c:	4b8a      	ldr	r3, [pc, #552]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006f1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f22:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006f26:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006f2e:	f7fc f9b5 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 8006f32:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f34:	f001 b863 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f3e:	d108      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1582>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f40:	f107 0308 	add.w	r3, r7, #8
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe fbd9 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f4e:	f001 b856 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006f52:	4b7d      	ldr	r3, [pc, #500]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d10d      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f64:	d109      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f66:	4b78      	ldr	r3, [pc, #480]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	08db      	lsrs	r3, r3, #3
 8006f6c:	f003 0303 	and.w	r3, r3, #3
 8006f70:	4a76      	ldr	r2, [pc, #472]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8006f72:	fa22 f303 	lsr.w	r3, r2, r3
 8006f76:	637b      	str	r3, [r7, #52]	; 0x34
 8006f78:	e011      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006f7a:	4b73      	ldr	r3, [pc, #460]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f86:	d106      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f8e:	d102      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
          frequency = CSI_VALUE;
 8006f90:	4b6f      	ldr	r3, [pc, #444]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8006f92:	637b      	str	r3, [r7, #52]	; 0x34
 8006f94:	e003      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
          frequency = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f9a:	f001 b830 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006f9e:	f001 b82e 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006fa2:	4b69      	ldr	r3, [pc, #420]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006fa8:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006fac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d104      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fb4:	f7fc f946 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 8006fb8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fba:	f001 b820 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fc4:	d108      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fc6:	f107 0308 	add.w	r3, r7, #8
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fb96 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fd4:	f001 b813 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006fd8:	4b5b      	ldr	r3, [pc, #364]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d10e      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fea:	d10a      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fec:	4b56      	ldr	r3, [pc, #344]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	08db      	lsrs	r3, r3, #3
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	4a55      	ldr	r2, [pc, #340]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ffe:	f000 bffe 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007006:	f000 bffa 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800700a:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800700c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007010:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007014:	633b      	str	r3, [r7, #48]	; 0x30
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800701c:	d056      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007024:	f200 808b 	bhi.w	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702e:	d03e      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007036:	f200 8082 	bhi.w	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007040:	d027      	beq.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007048:	d879      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007050:	d017      	beq.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x16b2>
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007058:	d871      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007066:	d004      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
 8007068:	e069      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x176e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800706a:	f7fc f917 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 800706e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007070:	e068      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007072:	f107 0314 	add.w	r3, r7, #20
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe f9d6 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007080:	e060      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fb38 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007090:	e058      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007092:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b02      	cmp	r3, #2
 800709e:	d103      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
            {
              frequency = LSE_VALUE;
 80070a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070a6:	e04d      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070ac:	e04a      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80070ae:	4b26      	ldr	r3, [pc, #152]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80070b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070bc:	d103      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            {
              frequency = LSI_VALUE;
 80070be:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070c2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070c4:	e03e      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070ca:	e03b      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070cc:	4b1e      	ldr	r3, [pc, #120]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80070ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070d2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80070d6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d10c      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070ea:	4b17      	ldr	r3, [pc, #92]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	08db      	lsrs	r3, r3, #3
 80070f0:	f003 0303 	and.w	r3, r3, #3
 80070f4:	4a15      	ldr	r2, [pc, #84]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 80070f6:	fa22 f303 	lsr.w	r3, r2, r3
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
 80070fc:	e01e      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800710a:	d106      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007112:	d102      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007114:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8007116:	637b      	str	r3, [r7, #52]	; 0x34
 8007118:	e010      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007126:	d106      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800712e:	d102      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007130:	4b08      	ldr	r3, [pc, #32]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1784>)
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
 8007134:	e002      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800713a:	e003      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
 800713c:	e002      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          default :
          {
            frequency = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007142:	bf00      	nop
          }
        }
        break;
 8007144:	f000 bf5b 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007148:	44020c00 	.word	0x44020c00
 800714c:	03d09000 	.word	0x03d09000
 8007150:	003d0900 	.word	0x003d0900
 8007154:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007158:	4b9e      	ldr	r3, [pc, #632]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800715a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800715e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007162:	633b      	str	r3, [r7, #48]	; 0x30
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800716a:	d056      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x184a>
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007172:	f200 808b 	bhi.w	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800717c:	d03e      	beq.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x182c>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007184:	f200 8082 	bhi.w	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800718e:	d027      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1810>
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007196:	d879      	bhi.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800719e:	d017      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1800>
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071a6:	d871      	bhi.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d004      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b4:	d004      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80071b6:	e069      	b.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80071b8:	f7fc f844 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 80071bc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80071be:	e068      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071c0:	f107 0314 	add.w	r3, r7, #20
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fe f92f 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071ce:	e060      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fa91 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071de:	e058      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071e0:	4b7c      	ldr	r3, [pc, #496]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80071e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d103      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1826>
            {
              frequency = LSE_VALUE;
 80071ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80071f4:	e04d      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071fa:	e04a      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80071fc:	4b75      	ldr	r3, [pc, #468]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80071fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800720a:	d103      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x1844>
            {
              frequency = LSI_VALUE;
 800720c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007210:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007212:	e03e      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007218:	e03b      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800721a:	4b6e      	ldr	r3, [pc, #440]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800721c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007220:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007224:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007226:	4b6b      	ldr	r3, [pc, #428]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b02      	cmp	r3, #2
 8007230:	d10c      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007238:	4b66      	ldr	r3, [pc, #408]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	4a65      	ldr	r2, [pc, #404]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
 800724a:	e01e      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800724c:	4b61      	ldr	r3, [pc, #388]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007258:	d106      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007260:	d102      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007262:	4b5e      	ldr	r3, [pc, #376]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
 8007266:	e010      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007268:	4b5a      	ldr	r3, [pc, #360]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007274:	d106      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800727c:	d102      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800727e:	4b58      	ldr	r3, [pc, #352]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
 8007282:	e002      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007288:	e003      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
 800728a:	e002      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          default :
          {
            frequency = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007290:	bf00      	nop
          }
        }
        break;
 8007292:	f000 beb4 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007296:	4b4f      	ldr	r3, [pc, #316]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007298:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800729c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80072a0:	633b      	str	r3, [r7, #48]	; 0x30
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072a8:	d056      	beq.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1988>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072b0:	f200 808b 	bhi.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072ba:	d03e      	beq.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x196a>
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072c2:	f200 8082 	bhi.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072cc:	d027      	beq.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x194e>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072d4:	d879      	bhi.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072dc:	d017      	beq.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x193e>
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072e4:	d871      	bhi.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1926>
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f2:	d004      	beq.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80072f4:	e069      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80072f6:	f7fb ffd1 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 80072fa:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80072fc:	e068      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072fe:	f107 0314 	add.w	r3, r7, #20
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe f890 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800730c:	e060      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800730e:	f107 0308 	add.w	r3, r7, #8
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe f9f2 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800731c:	e058      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800731e:	4b2d      	ldr	r3, [pc, #180]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b02      	cmp	r3, #2
 800732a:	d103      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x1964>
            {
              frequency = LSE_VALUE;
 800732c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007332:	e04d      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007338:	e04a      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800733a:	4b26      	ldr	r3, [pc, #152]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800733c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007348:	d103      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x1982>
            {
              frequency = LSI_VALUE;
 800734a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800734e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007350:	e03e      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007356:	e03b      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007358:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800735a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800735e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007364:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b02      	cmp	r3, #2
 800736e:	d10c      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007376:	4b17      	ldr	r3, [pc, #92]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	08db      	lsrs	r3, r3, #3
 800737c:	f003 0303 	and.w	r3, r3, #3
 8007380:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8007382:	fa22 f303 	lsr.w	r3, r2, r3
 8007386:	637b      	str	r3, [r7, #52]	; 0x34
 8007388:	e01e      	b.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007396:	d106      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
 8007398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739e:	d102      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073a0:	4b0e      	ldr	r3, [pc, #56]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 80073a2:	637b      	str	r3, [r7, #52]	; 0x34
 80073a4:	e010      	b.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073a6:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b2:	d106      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073ba:	d102      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073bc:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
 80073c0:	e002      	b.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80073c6:	e003      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
 80073c8:	e002      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          default :
          {
            frequency = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073ce:	bf00      	nop
          }
        }
        break;
 80073d0:	f000 be15 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80073d4:	44020c00 	.word	0x44020c00
 80073d8:	03d09000 	.word	0x03d09000
 80073dc:	003d0900 	.word	0x003d0900
 80073e0:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80073e4:	4b9e      	ldr	r3, [pc, #632]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80073e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80073ea:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80073ee:	633b      	str	r3, [r7, #48]	; 0x30
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80073f6:	d056      	beq.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad6>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80073fe:	f200 808b 	bhi.w	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007408:	d03e      	beq.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab8>
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007410:	f200 8082 	bhi.w	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800741a:	d027      	beq.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1a9c>
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007422:	d879      	bhi.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800742a:	d017      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8c>
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007432:	d871      	bhi.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007440:	d004      	beq.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007442:	e069      	b.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007444:	f7fb ff2a 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 8007448:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800744a:	e068      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800744c:	f107 0314 	add.w	r3, r7, #20
 8007450:	4618      	mov	r0, r3
 8007452:	f7fd ffe9 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800745a:	e060      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800745c:	f107 0308 	add.w	r3, r7, #8
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe f94b 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800746a:	e058      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800746c:	4b7c      	ldr	r3, [pc, #496]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800746e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b02      	cmp	r3, #2
 8007478:	d103      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab2>
            {
              frequency = LSE_VALUE;
 800747a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007480:	e04d      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007486:	e04a      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007488:	4b75      	ldr	r3, [pc, #468]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800748a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800748e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007496:	d103      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad0>
            {
              frequency = LSI_VALUE;
 8007498:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800749c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800749e:	e03e      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 80074a0:	2300      	movs	r3, #0
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074a4:	e03b      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074a6:	4b6e      	ldr	r3, [pc, #440]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074ac:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80074b0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074b2:	4b6b      	ldr	r3, [pc, #428]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d10c      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d109      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074c4:	4b66      	ldr	r3, [pc, #408]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	08db      	lsrs	r3, r3, #3
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	4a65      	ldr	r2, [pc, #404]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 80074d0:	fa22 f303 	lsr.w	r3, r2, r3
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
 80074d6:	e01e      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074d8:	4b61      	ldr	r3, [pc, #388]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e4:	d106      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ec:	d102      	bne.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80074ee:	4b5e      	ldr	r3, [pc, #376]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 80074f0:	637b      	str	r3, [r7, #52]	; 0x34
 80074f2:	e010      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074f4:	4b5a      	ldr	r3, [pc, #360]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007500:	d106      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007508:	d102      	bne.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800750a:	4b58      	ldr	r3, [pc, #352]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
 800750e:	e002      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007514:	e003      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
 8007516:	e002      	b.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          default :
          {
            frequency = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800751c:	bf00      	nop
          }
        }
        break;
 800751e:	f000 bd6e 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007522:	4b4f      	ldr	r3, [pc, #316]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007524:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007528:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800752c:	633b      	str	r3, [r7, #48]	; 0x30
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007534:	d056      	beq.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c14>
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800753c:	f200 808b 	bhi.w	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007546:	d03e      	beq.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf6>
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800754e:	f200 8082 	bhi.w	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007558:	d027      	beq.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bda>
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007560:	d879      	bhi.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007568:	d017      	beq.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x1bca>
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007570:	d871      	bhi.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb2>
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800757e:	d004      	beq.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007580:	e069      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007582:	f7fb fe8b 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 8007586:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007588:	e068      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800758a:	f107 0314 	add.w	r3, r7, #20
 800758e:	4618      	mov	r0, r3
 8007590:	f7fd ff4a 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007598:	e060      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe f8ac 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075a8:	e058      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075aa:	4b2d      	ldr	r3, [pc, #180]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80075ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d103      	bne.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf0>
            {
              frequency = LSE_VALUE;
 80075b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80075be:	e04d      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075c4:	e04a      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80075c6:	4b26      	ldr	r3, [pc, #152]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80075c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d4:	d103      	bne.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x1c0e>
            {
              frequency = LSI_VALUE;
 80075d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80075da:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80075dc:	e03e      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075e2:	e03b      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075e4:	4b1e      	ldr	r3, [pc, #120]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80075e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075f0:	4b1b      	ldr	r3, [pc, #108]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d10c      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007602:	4b17      	ldr	r3, [pc, #92]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	08db      	lsrs	r3, r3, #3
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	4a15      	ldr	r2, [pc, #84]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 800760e:	fa22 f303 	lsr.w	r3, r2, r3
 8007612:	637b      	str	r3, [r7, #52]	; 0x34
 8007614:	e01e      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007616:	4b12      	ldr	r3, [pc, #72]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800761e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007622:	d106      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
 8007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762a:	d102      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800762c:	4b0e      	ldr	r3, [pc, #56]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
 8007630:	e010      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007632:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800763e:	d106      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007646:	d102      	bne.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007648:	4b08      	ldr	r3, [pc, #32]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 800764a:	637b      	str	r3, [r7, #52]	; 0x34
 800764c:	e002      	b.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007652:	e003      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
 8007654:	e002      	b.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          default :
          {
            frequency = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800765a:	bf00      	nop
          }
        }
        break;
 800765c:	f000 bccf 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007660:	44020c00 	.word	0x44020c00
 8007664:	03d09000 	.word	0x03d09000
 8007668:	003d0900 	.word	0x003d0900
 800766c:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007670:	4b9e      	ldr	r3, [pc, #632]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007672:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007676:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800767a:	633b      	str	r3, [r7, #48]	; 0x30
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007682:	d056      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x1d62>
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800768a:	f200 808b 	bhi.w	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007694:	d03e      	beq.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x1d44>
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769c:	f200 8082 	bhi.w	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076a6:	d027      	beq.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d28>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076ae:	d879      	bhi.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b6:	d017      	beq.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d18>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076be:	d871      	bhi.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076cc:	d004      	beq.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80076ce:	e069      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80076d0:	f7fb fde4 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 80076d4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80076d6:	e068      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076d8:	f107 0314 	add.w	r3, r7, #20
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd fea3 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076e6:	e060      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e8:	f107 0308 	add.w	r3, r7, #8
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe f805 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076f6:	e058      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80076f8:	4b7c      	ldr	r3, [pc, #496]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80076fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b02      	cmp	r3, #2
 8007704:	d103      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x1d3e>
            {
              frequency = LSE_VALUE;
 8007706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800770a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800770c:	e04d      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007712:	e04a      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007714:	4b75      	ldr	r3, [pc, #468]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800771a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800771e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007722:	d103      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x1d5c>
            {
              frequency = LSI_VALUE;
 8007724:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007728:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800772a:	e03e      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007730:	e03b      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007732:	4b6e      	ldr	r3, [pc, #440]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007738:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800773c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800773e:	4b6b      	ldr	r3, [pc, #428]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b02      	cmp	r3, #2
 8007748:	d10c      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007750:	4b66      	ldr	r3, [pc, #408]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	08db      	lsrs	r3, r3, #3
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	4a65      	ldr	r2, [pc, #404]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
 8007762:	e01e      	b.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007764:	4b61      	ldr	r3, [pc, #388]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800776c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007770:	d106      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007778:	d102      	bne.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800777a:	4b5e      	ldr	r3, [pc, #376]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
 800777e:	e010      	b.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007780:	4b5a      	ldr	r3, [pc, #360]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800778c:	d106      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007794:	d102      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007796:	4b58      	ldr	r3, [pc, #352]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
 800779a:	e002      	b.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80077a0:	e003      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
 80077a2:	e002      	b.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          default :
          {
            frequency = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077a8:	bf00      	nop
          }
        }
        break;
 80077aa:	f000 bc28 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80077ae:	4b4f      	ldr	r3, [pc, #316]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80077b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80077ba:	4b4c      	ldr	r3, [pc, #304]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c6:	d106      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
 80077c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d103      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
        {
          frequency = HSE_VALUE;
 80077ce:	4b4a      	ldr	r3, [pc, #296]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 80077d0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80077d2:	f000 bc14 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077dc:	d108      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e20>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077de:	f107 0320 	add.w	r3, r7, #32
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fd fcb6 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077ec:	f000 bc07 	b.w	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f6:	d107      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x1e38>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077f8:	f107 0314 	add.w	r3, r7, #20
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fd fe13 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007806:	e3fa      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800780c:	e3f7      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800780e:	4b37      	ldr	r3, [pc, #220]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	633b      	str	r3, [r7, #48]	; 0x30
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	2b04      	cmp	r3, #4
 800781e:	d861      	bhi.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f14>
 8007820:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x1e58>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	0800783d 	.word	0x0800783d
 800782c:	0800784d 	.word	0x0800784d
 8007830:	0800785d 	.word	0x0800785d
 8007834:	0800786d 	.word	0x0800786d
 8007838:	08007873 	.word	0x08007873
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800783c:	f107 0320 	add.w	r3, r7, #32
 8007840:	4618      	mov	r0, r3
 8007842:	f7fd fc87 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800784a:	e04e      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784c:	f107 0314 	add.w	r3, r7, #20
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd fde9 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800785a:	e046      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800785c:	f107 0308 	add.w	r3, r7, #8
 8007860:	4618      	mov	r0, r3
 8007862:	f7fd ff4b 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800786a:	e03e      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800786c:	4b23      	ldr	r3, [pc, #140]	; (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f2c>)
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007870:	e03b      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007872:	4b1e      	ldr	r3, [pc, #120]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007878:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800787e:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b02      	cmp	r3, #2
 8007888:	d10c      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007890:	4b16      	ldr	r3, [pc, #88]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	08db      	lsrs	r3, r3, #3
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	4a15      	ldr	r2, [pc, #84]	; (80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 800789c:	fa22 f303 	lsr.w	r3, r2, r3
 80078a0:	637b      	str	r3, [r7, #52]	; 0x34
 80078a2:	e01e      	b.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078a4:	4b11      	ldr	r3, [pc, #68]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078b0:	d106      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b8:	d102      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80078ba:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
 80078be:	e010      	b.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078c0:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078cc:	d106      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078d4:	d102      	bne.n	80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80078d6:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
 80078da:	e002      	b.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80078dc:	2300      	movs	r3, #0
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80078e0:	e003      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
 80078e2:	e002      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          default:
          {
            frequency = 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078e8:	bf00      	nop
          }
        }
        break;
 80078ea:	e388      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80078ec:	44020c00 	.word	0x44020c00
 80078f0:	03d09000 	.word	0x03d09000
 80078f4:	003d0900 	.word	0x003d0900
 80078f8:	017d7840 	.word	0x017d7840
 80078fc:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007900:	4ba9      	ldr	r3, [pc, #676]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800790a:	633b      	str	r3, [r7, #48]	; 0x30
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	2b20      	cmp	r3, #32
 8007910:	f200 809a 	bhi.w	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2078>
 8007914:	a201      	add	r2, pc, #4	; (adr r2, 800791c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4c>)
 8007916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791a:	bf00      	nop
 800791c:	080079a1 	.word	0x080079a1
 8007920:	08007a49 	.word	0x08007a49
 8007924:	08007a49 	.word	0x08007a49
 8007928:	08007a49 	.word	0x08007a49
 800792c:	08007a49 	.word	0x08007a49
 8007930:	08007a49 	.word	0x08007a49
 8007934:	08007a49 	.word	0x08007a49
 8007938:	08007a49 	.word	0x08007a49
 800793c:	080079b1 	.word	0x080079b1
 8007940:	08007a49 	.word	0x08007a49
 8007944:	08007a49 	.word	0x08007a49
 8007948:	08007a49 	.word	0x08007a49
 800794c:	08007a49 	.word	0x08007a49
 8007950:	08007a49 	.word	0x08007a49
 8007954:	08007a49 	.word	0x08007a49
 8007958:	08007a49 	.word	0x08007a49
 800795c:	080079c1 	.word	0x080079c1
 8007960:	08007a49 	.word	0x08007a49
 8007964:	08007a49 	.word	0x08007a49
 8007968:	08007a49 	.word	0x08007a49
 800796c:	08007a49 	.word	0x08007a49
 8007970:	08007a49 	.word	0x08007a49
 8007974:	08007a49 	.word	0x08007a49
 8007978:	08007a49 	.word	0x08007a49
 800797c:	080079d1 	.word	0x080079d1
 8007980:	08007a49 	.word	0x08007a49
 8007984:	08007a49 	.word	0x08007a49
 8007988:	08007a49 	.word	0x08007a49
 800798c:	08007a49 	.word	0x08007a49
 8007990:	08007a49 	.word	0x08007a49
 8007994:	08007a49 	.word	0x08007a49
 8007998:	08007a49 	.word	0x08007a49
 800799c:	080079d7 	.word	0x080079d7
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079a0:	f107 0320 	add.w	r3, r7, #32
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fd fbd5 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079ae:	e04e      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b0:	f107 0314 	add.w	r3, r7, #20
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fd fd37 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079be:	e046      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c0:	f107 0308 	add.w	r3, r7, #8
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fd fe99 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079ce:	e03e      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80079d0:	4b76      	ldr	r3, [pc, #472]	; (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 80079d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079d4:	e03b      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079d6:	4b74      	ldr	r3, [pc, #464]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80079d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80079e0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079e2:	4b71      	ldr	r3, [pc, #452]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d10c      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d109      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079f4:	4b6c      	ldr	r3, [pc, #432]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	08db      	lsrs	r3, r3, #3
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	4a6c      	ldr	r2, [pc, #432]	; (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
 8007a06:	e01e      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a08:	4b67      	ldr	r3, [pc, #412]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a14:	d106      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1c:	d102      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a1e:	4b65      	ldr	r3, [pc, #404]	; (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 8007a22:	e010      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a24:	4b60      	ldr	r3, [pc, #384]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a30:	d106      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a38:	d102      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a3a:	4b5f      	ldr	r3, [pc, #380]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3e:	e002      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007a44:	e003      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
 8007a46:	e002      	b.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          default:
          {
            frequency = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a4c:	bf00      	nop
          }
        }
        break;
 8007a4e:	e2d6      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007a50:	4b55      	ldr	r3, [pc, #340]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a56:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a62:	d031      	beq.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x20f8>
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6a:	d866      	bhi.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a70:	d027      	beq.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x20f2>
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	2bc0      	cmp	r3, #192	; 0xc0
 8007a76:	d860      	bhi.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	2b80      	cmp	r3, #128	; 0x80
 8007a7c:	d019      	beq.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e2>
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	2b80      	cmp	r3, #128	; 0x80
 8007a82:	d85a      	bhi.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x20c2>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2b40      	cmp	r3, #64	; 0x40
 8007a8e:	d008      	beq.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x20d2>
 8007a90:	e053      	b.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a92:	f107 0320 	add.w	r3, r7, #32
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fd fb5c 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007aa0:	e04e      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa2:	f107 0314 	add.w	r3, r7, #20
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fd fcbe 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ab0:	e046      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ab2:	f107 0308 	add.w	r3, r7, #8
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fd fe20 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ac0:	e03e      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007ac2:	4b3a      	ldr	r3, [pc, #232]	; (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 8007ac4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ac6:	e03b      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ac8:	4b37      	ldr	r3, [pc, #220]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ace:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ad4:	4b34      	ldr	r3, [pc, #208]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d10c      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d109      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ae6:	4b30      	ldr	r3, [pc, #192]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	08db      	lsrs	r3, r3, #3
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	4a2f      	ldr	r2, [pc, #188]	; (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 8007af2:	fa22 f303 	lsr.w	r3, r2, r3
 8007af6:	637b      	str	r3, [r7, #52]	; 0x34
 8007af8:	e01e      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007afa:	4b2b      	ldr	r3, [pc, #172]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b06:	d106      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b0e:	d102      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b10:	4b28      	ldr	r3, [pc, #160]	; (8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 8007b12:	637b      	str	r3, [r7, #52]	; 0x34
 8007b14:	e010      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b16:	4b24      	ldr	r3, [pc, #144]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b22:	d106      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
 8007b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b2a:	d102      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b2c:	4b22      	ldr	r3, [pc, #136]	; (8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b30:	e002      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007b36:	e003      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
 8007b38:	e002      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          default:
          {
            frequency = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b3e:	bf00      	nop
          }
        }
        break;
 8007b40:	e25d      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007b42:	4b19      	ldr	r3, [pc, #100]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b48:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007b4c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x218c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b54:	f7fb fb8c 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8007b58:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007b5a:	e250      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007b5c:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b68:	d10b      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b70:	d107      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b72:	f107 0314 	add.w	r3, r7, #20
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fd fc56 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b80:	e04f      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007b82:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b8e:	d115      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b96:	d111      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b98:	f107 0308 	add.w	r3, r7, #8
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fd fdad 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba6:	e03c      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
 8007ba8:	44020c00 	.word	0x44020c00
 8007bac:	00bb8000 	.word	0x00bb8000
 8007bb0:	03d09000 	.word	0x03d09000
 8007bb4:	003d0900 	.word	0x003d0900
 8007bb8:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007bbc:	4b94      	ldr	r3, [pc, #592]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d10d      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007bce:	d109      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bd0:	4b8f      	ldr	r3, [pc, #572]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	08db      	lsrs	r3, r3, #3
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	4a8e      	ldr	r2, [pc, #568]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8007bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8007be0:	637b      	str	r3, [r7, #52]	; 0x34
 8007be2:	e01e      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007be4:	4b8a      	ldr	r3, [pc, #552]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf0:	d106      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf8:	d102      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
          frequency = CSI_VALUE;
 8007bfa:	4b87      	ldr	r3, [pc, #540]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfe:	e010      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007c00:	4b83      	ldr	r3, [pc, #524]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c0c:	d106      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007c14:	d102      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
          frequency = HSE_VALUE;
 8007c16:	4b81      	ldr	r3, [pc, #516]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
 8007c1a:	e002      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
          frequency = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c20:	e1ed      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007c22:	e1ec      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007c24:	4b7a      	ldr	r3, [pc, #488]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c2a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007c2e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d103      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x226e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007c36:	f7fb fb31 	bl	800329c <HAL_RCC_GetPCLK3Freq>
 8007c3a:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007c3c:	e1df      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007c3e:	4b74      	ldr	r3, [pc, #464]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c4a:	d10b      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c52:	d107      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c54:	f107 0314 	add.w	r3, r7, #20
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fd fbe5 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
 8007c62:	e045      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007c64:	4b6a      	ldr	r3, [pc, #424]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c70:	d10b      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c78:	d107      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c7a:	f107 0308 	add.w	r3, r7, #8
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fd fd3c 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	637b      	str	r3, [r7, #52]	; 0x34
 8007c88:	e032      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007c8a:	4b61      	ldr	r3, [pc, #388]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d10d      	bne.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c9c:	d109      	bne.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c9e:	4b5c      	ldr	r3, [pc, #368]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	08db      	lsrs	r3, r3, #3
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	4a5a      	ldr	r2, [pc, #360]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8007caa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb0:	e01e      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007cb2:	4b57      	ldr	r3, [pc, #348]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cbe:	d106      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cc6:	d102      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
          frequency = CSI_VALUE;
 8007cc8:	4b53      	ldr	r3, [pc, #332]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8007cca:	637b      	str	r3, [r7, #52]	; 0x34
 8007ccc:	e010      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007cce:	4b50      	ldr	r3, [pc, #320]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cda:	d106      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007ce2:	d102      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
          frequency = HSE_VALUE;
 8007ce4:	4b4d      	ldr	r3, [pc, #308]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce8:	e002      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
          frequency = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cee:	e186      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007cf0:	e185      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007cf2:	4b47      	ldr	r3, [pc, #284]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cf8:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007cfc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x233c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007d04:	f7fb fab4 	bl	8003270 <HAL_RCC_GetPCLK2Freq>
 8007d08:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007d0a:	e178      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007d0c:	4b40      	ldr	r3, [pc, #256]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d18:	d10b      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d20:	d107      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d22:	f107 0314 	add.w	r3, r7, #20
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fd fb7e 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d30:	e045      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007d32:	4b37      	ldr	r3, [pc, #220]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d3e:	d10b      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d46:	d107      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d48:	f107 0308 	add.w	r3, r7, #8
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd fcd5 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
 8007d56:	e032      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007d58:	4b2d      	ldr	r3, [pc, #180]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d10d      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007d6a:	d109      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d6c:	4b28      	ldr	r3, [pc, #160]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	08db      	lsrs	r3, r3, #3
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	4a27      	ldr	r2, [pc, #156]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8007d78:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7e:	e01e      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007d80:	4b23      	ldr	r3, [pc, #140]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d8c:	d106      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d94:	d102      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
          frequency = CSI_VALUE;
 8007d96:	4b20      	ldr	r3, [pc, #128]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
 8007d9a:	e010      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007d9c:	4b1c      	ldr	r3, [pc, #112]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007da8:	d106      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007db0:	d102      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
          frequency = HSE_VALUE;
 8007db2:	4b1a      	ldr	r3, [pc, #104]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
 8007db6:	e002      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
          frequency = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dbc:	e11f      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007dbe:	e11e      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007dc0:	4b13      	ldr	r3, [pc, #76]	; (8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007dc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	633b      	str	r3, [r7, #48]	; 0x30
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d85f      	bhi.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x24c2>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2408>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007de9 	.word	0x08007de9
 8007ddc:	08007df1 	.word	0x08007df1
 8007de0:	08007e01 	.word	0x08007e01
 8007de4:	08007e21 	.word	0x08007e21

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007de8:	f7fb fa10 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8007dec:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007dee:	e053      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007df0:	f107 0320 	add.w	r3, r7, #32
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fd f9ad 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007dfe:	e04b      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e00:	f107 0314 	add.w	r3, r7, #20
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fd fb0f 	bl	8005428 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e0e:	e043      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 8007e10:	44020c00 	.word	0x44020c00
 8007e14:	03d09000 	.word	0x03d09000
 8007e18:	003d0900 	.word	0x003d0900
 8007e1c:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e20:	4b79      	ldr	r3, [pc, #484]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e26:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007e2a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e2c:	4b76      	ldr	r3, [pc, #472]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d10c      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
 8007e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d109      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e3e:	4b72      	ldr	r3, [pc, #456]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	08db      	lsrs	r3, r3, #3
 8007e44:	f003 0303 	and.w	r3, r3, #3
 8007e48:	4a70      	ldr	r2, [pc, #448]	; (800800c <HAL_RCCEx_GetPeriphCLKFreq+0x263c>)
 8007e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e50:	e01e      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e52:	4b6d      	ldr	r3, [pc, #436]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5e:	d106      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e66:	d102      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e68:	4b69      	ldr	r3, [pc, #420]	; (8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x2640>)
 8007e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6c:	e010      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e6e:	4b66      	ldr	r3, [pc, #408]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e7a:	d106      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e82:	d102      	bne.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e84:	4b63      	ldr	r3, [pc, #396]	; (8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x2644>)
 8007e86:	637b      	str	r3, [r7, #52]	; 0x34
 8007e88:	e002      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007e8e:	e003      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 8007e90:	e002      	b.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          default:
          {
            frequency = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e96:	bf00      	nop
          }
        }
        break;
 8007e98:	e0b1      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007e9a:	4b5b      	ldr	r3, [pc, #364]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ea0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ea4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007ea6:	4b58      	ldr	r3, [pc, #352]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d106      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d103      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
        {
          frequency = LSE_VALUE;
 8007eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec0:	e01f      	b.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007ec2:	4b51      	ldr	r3, [pc, #324]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ed0:	d106      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	2b40      	cmp	r3, #64	; 0x40
 8007ed6:	d103      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
        {
          frequency = LSI_VALUE;
 8007ed8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ede:	e010      	b.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007ee0:	4b49      	ldr	r3, [pc, #292]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eec:	d106      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2b80      	cmp	r3, #128	; 0x80
 8007ef2:	d103      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
        {
          frequency = CSI_VALUE / 122U;
 8007ef4:	f248 0312 	movw	r3, #32786	; 0x8012
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8007efa:	e002      	b.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007f00:	e07d      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007f02:	e07c      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007f04:	4b40      	ldr	r3, [pc, #256]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f0e:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007f10:	4b3d      	ldr	r3, [pc, #244]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f1c:	d105      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = HSI48_VALUE;
 8007f24:	4b3c      	ldr	r3, [pc, #240]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
 8007f28:	e031      	b.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007f2a:	4b37      	ldr	r3, [pc, #220]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f36:	d10a      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d107      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f3e:	f107 0320 	add.w	r3, r7, #32
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fd f906 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f4c:	e01f      	b.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007f4e:	4b2e      	ldr	r3, [pc, #184]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d106      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d103      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        {
          frequency = LSE_VALUE;
 8007f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f66:	637b      	str	r3, [r7, #52]	; 0x34
 8007f68:	e011      	b.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007f6a:	4b27      	ldr	r3, [pc, #156]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f78:	d106      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	2b30      	cmp	r3, #48	; 0x30
 8007f7e:	d103      	bne.n	8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
        {
          frequency = LSI_VALUE;
 8007f80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f84:	637b      	str	r3, [r7, #52]	; 0x34
 8007f86:	e002      	b.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007f8c:	e037      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007f8e:	e036      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007f90:	4b1d      	ldr	r3, [pc, #116]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f9a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	2b10      	cmp	r3, #16
 8007fa0:	d107      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fa2:	f107 0320 	add.w	r3, r7, #32
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fd f8d4 	bl	8005154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007fb0:	e025      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007fb2:	4b15      	ldr	r3, [pc, #84]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fbe:	d10a      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d107      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fc6:	f107 0308 	add.w	r3, r7, #8
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fd fb96 	bl	80056fc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd4:	e00f      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe2:	d105      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	2b30      	cmp	r3, #48	; 0x30
 8007fe8:	d102      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = HSI48_VALUE;
 8007fea:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
 8007fee:	e002      	b.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007ff4:	e003      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007ff6:	e002      	b.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      default:
        frequency = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ffc:	bf00      	nop
    }
  }

  return (frequency);
 8007ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008000:	4618      	mov	r0, r3
 8008002:	373c      	adds	r7, #60	; 0x3c
 8008004:	46bd      	mov	sp, r7
 8008006:	bd90      	pop	{r4, r7, pc}
 8008008:	44020c00 	.word	0x44020c00
 800800c:	03d09000 	.word	0x03d09000
 8008010:	003d0900 	.word	0x003d0900
 8008014:	017d7840 	.word	0x017d7840
 8008018:	02dc6c00 	.word	0x02dc6c00

0800801c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008024:	4b48      	ldr	r3, [pc, #288]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a47      	ldr	r2, [pc, #284]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 800802a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800802e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008030:	f7f9 f8f4 	bl	800121c <HAL_GetTick>
 8008034:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008036:	e008      	b.n	800804a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008038:	f7f9 f8f0 	bl	800121c <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e07a      	b.n	8008140 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800804a:	4b3f      	ldr	r3, [pc, #252]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f0      	bne.n	8008038 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008056:	4b3c      	ldr	r3, [pc, #240]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6811      	ldr	r1, [r2, #0]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	6852      	ldr	r2, [r2, #4]
 800806a:	0212      	lsls	r2, r2, #8
 800806c:	430a      	orrs	r2, r1
 800806e:	4936      	ldr	r1, [pc, #216]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 8008070:	4313      	orrs	r3, r2
 8008072:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	3b01      	subs	r3, #1
 800807a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	3b01      	subs	r3, #1
 8008084:	025b      	lsls	r3, r3, #9
 8008086:	b29b      	uxth	r3, r3
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	3b01      	subs	r3, #1
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	3b01      	subs	r3, #1
 800809e:	061b      	lsls	r3, r3, #24
 80080a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080a4:	4928      	ldr	r1, [pc, #160]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80080aa:	4b27      	ldr	r3, [pc, #156]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	f023 020c 	bic.w	r2, r3, #12
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	4924      	ldr	r1, [pc, #144]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80080bc:	4b22      	ldr	r3, [pc, #136]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	f023 0220 	bic.w	r2, r3, #32
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	491f      	ldr	r1, [pc, #124]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80080ce:	4b1e      	ldr	r3, [pc, #120]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	491c      	ldr	r1, [pc, #112]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80080dc:	4b1a      	ldr	r3, [pc, #104]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4a19      	ldr	r2, [pc, #100]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080e2:	f023 0310 	bic.w	r3, r3, #16
 80080e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80080e8:	4b17      	ldr	r3, [pc, #92]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6a12      	ldr	r2, [r2, #32]
 80080f8:	00d2      	lsls	r2, r2, #3
 80080fa:	4913      	ldr	r1, [pc, #76]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008100:	4b11      	ldr	r3, [pc, #68]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	4a10      	ldr	r2, [pc, #64]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 8008106:	f043 0310 	orr.w	r3, r3, #16
 800810a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800810c:	4b0e      	ldr	r3, [pc, #56]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a0d      	ldr	r2, [pc, #52]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 8008112:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008116:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008118:	f7f9 f880 	bl	800121c <HAL_GetTick>
 800811c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800811e:	e008      	b.n	8008132 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008120:	f7f9 f87c 	bl	800121c <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	2b02      	cmp	r3, #2
 800812c:	d901      	bls.n	8008132 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e006      	b.n	8008140 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <RCCEx_PLL2_Config+0x12c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0f0      	beq.n	8008120 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800813e:	2300      	movs	r3, #0

}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	44020c00 	.word	0x44020c00

0800814c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008154:	4b48      	ldr	r3, [pc, #288]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a47      	ldr	r2, [pc, #284]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 800815a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800815e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008160:	f7f9 f85c 	bl	800121c <HAL_GetTick>
 8008164:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008166:	e008      	b.n	800817a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008168:	f7f9 f858 	bl	800121c <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e07a      	b.n	8008270 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800817a:	4b3f      	ldr	r3, [pc, #252]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f0      	bne.n	8008168 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008186:	4b3c      	ldr	r3, [pc, #240]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 8008188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6811      	ldr	r1, [r2, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6852      	ldr	r2, [r2, #4]
 800819a:	0212      	lsls	r2, r2, #8
 800819c:	430a      	orrs	r2, r1
 800819e:	4936      	ldr	r1, [pc, #216]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	630b      	str	r3, [r1, #48]	; 0x30
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	025b      	lsls	r3, r3, #9
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	3b01      	subs	r3, #1
 80081c0:	041b      	lsls	r3, r3, #16
 80081c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081c6:	431a      	orrs	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	061b      	lsls	r3, r3, #24
 80081d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081d4:	4928      	ldr	r1, [pc, #160]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081da:	4b27      	ldr	r3, [pc, #156]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	f023 020c 	bic.w	r2, r3, #12
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	4924      	ldr	r1, [pc, #144]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80081ec:	4b22      	ldr	r3, [pc, #136]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	f023 0220 	bic.w	r2, r3, #32
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	491f      	ldr	r1, [pc, #124]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80081fe:	4b1e      	ldr	r3, [pc, #120]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 8008200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	491c      	ldr	r1, [pc, #112]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 8008208:	4313      	orrs	r3, r2
 800820a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800820c:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	4a19      	ldr	r2, [pc, #100]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 8008212:	f023 0310 	bic.w	r3, r3, #16
 8008216:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008218:	4b17      	ldr	r3, [pc, #92]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 800821a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800821c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008220:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6a12      	ldr	r2, [r2, #32]
 8008228:	00d2      	lsls	r2, r2, #3
 800822a:	4913      	ldr	r1, [pc, #76]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 800822c:	4313      	orrs	r3, r2
 800822e:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008230:	4b11      	ldr	r3, [pc, #68]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008234:	4a10      	ldr	r2, [pc, #64]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 8008236:	f043 0310 	orr.w	r3, r3, #16
 800823a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800823c:	4b0e      	ldr	r3, [pc, #56]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a0d      	ldr	r2, [pc, #52]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 8008242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008246:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008248:	f7f8 ffe8 	bl	800121c <HAL_GetTick>
 800824c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800824e:	e008      	b.n	8008262 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008250:	f7f8 ffe4 	bl	800121c <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e006      	b.n	8008270 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <RCCEx_PLL3_Config+0x12c>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0f0      	beq.n	8008250 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	44020c00 	.word	0x44020c00

0800827c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e042      	b.n	8008314 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7f8 fda5 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2224      	movs	r2, #36	; 0x24
 80082aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0201 	bic.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fab4 	bl	8008834 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f8c3 	bl	8008458 <UART_SetConfig>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e01b      	b.n	8008314 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689a      	ldr	r2, [r3, #8]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fb33 	bl	8008978 <UART_CheckIdleState>
 8008312:	4603      	mov	r3, r0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b08a      	sub	sp, #40	; 0x28
 8008320:	af02      	add	r7, sp, #8
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	4613      	mov	r3, r2
 800832a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008332:	2b20      	cmp	r3, #32
 8008334:	f040 808b 	bne.w	800844e <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <HAL_UART_Transmit+0x28>
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e083      	b.n	8008450 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008352:	2b80      	cmp	r3, #128	; 0x80
 8008354:	d107      	bne.n	8008366 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689a      	ldr	r2, [r3, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008364:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2221      	movs	r2, #33	; 0x21
 8008372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008376:	f7f8 ff51 	bl	800121c <HAL_GetTick>
 800837a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	88fa      	ldrh	r2, [r7, #6]
 8008388:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008394:	d108      	bne.n	80083a8 <HAL_UART_Transmit+0x8c>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d104      	bne.n	80083a8 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	e003      	b.n	80083b0 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80083b0:	e030      	b.n	8008414 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2200      	movs	r2, #0
 80083ba:	2180      	movs	r1, #128	; 0x80
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 fb85 	bl	8008acc <UART_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e03d      	b.n	8008450 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	881b      	ldrh	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	3302      	adds	r3, #2
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e007      	b.n	8008402 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	3301      	adds	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008408:	b29b      	uxth	r3, r3
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1c8      	bne.n	80083b2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	2200      	movs	r2, #0
 8008428:	2140      	movs	r1, #64	; 0x40
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 fb4e 	bl	8008acc <UART_WaitOnFlagUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d005      	beq.n	8008442 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2220      	movs	r2, #32
 800843a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e006      	b.n	8008450 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	e000      	b.n	8008450 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800844e:	2302      	movs	r3, #2
  }
}
 8008450:	4618      	mov	r0, r3
 8008452:	3720      	adds	r7, #32
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800845c:	b094      	sub	sp, #80	; 0x50
 800845e:	af00      	add	r7, sp, #0
 8008460:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	4b78      	ldr	r3, [pc, #480]	; (8008650 <UART_SetConfig+0x1f8>)
 800846e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	431a      	orrs	r2, r3
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	431a      	orrs	r2, r3
 8008480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008482:	69db      	ldr	r3, [r3, #28]
 8008484:	4313      	orrs	r3, r2
 8008486:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4971      	ldr	r1, [pc, #452]	; (8008654 <UART_SetConfig+0x1fc>)
 8008490:	4019      	ands	r1, r3
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008498:	430b      	orrs	r3, r1
 800849a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	68d9      	ldr	r1, [r3, #12]
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	ea40 0301 	orr.w	r3, r0, r1
 80084b2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	4b64      	ldr	r3, [pc, #400]	; (8008650 <UART_SetConfig+0x1f8>)
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d009      	beq.n	80084d8 <UART_SetConfig+0x80>
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	4b63      	ldr	r3, [pc, #396]	; (8008658 <UART_SetConfig+0x200>)
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d004      	beq.n	80084d8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d0:	6a1a      	ldr	r2, [r3, #32]
 80084d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d4:	4313      	orrs	r3, r2
 80084d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80084e2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	f023 000f 	bic.w	r0, r3, #15
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	ea40 0301 	orr.w	r3, r0, r1
 8008506:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	4b53      	ldr	r3, [pc, #332]	; (800865c <UART_SetConfig+0x204>)
 800850e:	429a      	cmp	r2, r3
 8008510:	d102      	bne.n	8008518 <UART_SetConfig+0xc0>
 8008512:	2301      	movs	r3, #1
 8008514:	64bb      	str	r3, [r7, #72]	; 0x48
 8008516:	e066      	b.n	80085e6 <UART_SetConfig+0x18e>
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	4b50      	ldr	r3, [pc, #320]	; (8008660 <UART_SetConfig+0x208>)
 800851e:	429a      	cmp	r2, r3
 8008520:	d102      	bne.n	8008528 <UART_SetConfig+0xd0>
 8008522:	2302      	movs	r3, #2
 8008524:	64bb      	str	r3, [r7, #72]	; 0x48
 8008526:	e05e      	b.n	80085e6 <UART_SetConfig+0x18e>
 8008528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	4b4d      	ldr	r3, [pc, #308]	; (8008664 <UART_SetConfig+0x20c>)
 800852e:	429a      	cmp	r2, r3
 8008530:	d102      	bne.n	8008538 <UART_SetConfig+0xe0>
 8008532:	2304      	movs	r3, #4
 8008534:	64bb      	str	r3, [r7, #72]	; 0x48
 8008536:	e056      	b.n	80085e6 <UART_SetConfig+0x18e>
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	4b4a      	ldr	r3, [pc, #296]	; (8008668 <UART_SetConfig+0x210>)
 800853e:	429a      	cmp	r2, r3
 8008540:	d102      	bne.n	8008548 <UART_SetConfig+0xf0>
 8008542:	2308      	movs	r3, #8
 8008544:	64bb      	str	r3, [r7, #72]	; 0x48
 8008546:	e04e      	b.n	80085e6 <UART_SetConfig+0x18e>
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	4b47      	ldr	r3, [pc, #284]	; (800866c <UART_SetConfig+0x214>)
 800854e:	429a      	cmp	r2, r3
 8008550:	d102      	bne.n	8008558 <UART_SetConfig+0x100>
 8008552:	2310      	movs	r3, #16
 8008554:	64bb      	str	r3, [r7, #72]	; 0x48
 8008556:	e046      	b.n	80085e6 <UART_SetConfig+0x18e>
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	4b44      	ldr	r3, [pc, #272]	; (8008670 <UART_SetConfig+0x218>)
 800855e:	429a      	cmp	r2, r3
 8008560:	d102      	bne.n	8008568 <UART_SetConfig+0x110>
 8008562:	2320      	movs	r3, #32
 8008564:	64bb      	str	r3, [r7, #72]	; 0x48
 8008566:	e03e      	b.n	80085e6 <UART_SetConfig+0x18e>
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	4b41      	ldr	r3, [pc, #260]	; (8008674 <UART_SetConfig+0x21c>)
 800856e:	429a      	cmp	r2, r3
 8008570:	d102      	bne.n	8008578 <UART_SetConfig+0x120>
 8008572:	2340      	movs	r3, #64	; 0x40
 8008574:	64bb      	str	r3, [r7, #72]	; 0x48
 8008576:	e036      	b.n	80085e6 <UART_SetConfig+0x18e>
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	4b3e      	ldr	r3, [pc, #248]	; (8008678 <UART_SetConfig+0x220>)
 800857e:	429a      	cmp	r2, r3
 8008580:	d102      	bne.n	8008588 <UART_SetConfig+0x130>
 8008582:	2380      	movs	r3, #128	; 0x80
 8008584:	64bb      	str	r3, [r7, #72]	; 0x48
 8008586:	e02e      	b.n	80085e6 <UART_SetConfig+0x18e>
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	4b3b      	ldr	r3, [pc, #236]	; (800867c <UART_SetConfig+0x224>)
 800858e:	429a      	cmp	r2, r3
 8008590:	d103      	bne.n	800859a <UART_SetConfig+0x142>
 8008592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008596:	64bb      	str	r3, [r7, #72]	; 0x48
 8008598:	e025      	b.n	80085e6 <UART_SetConfig+0x18e>
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	4b38      	ldr	r3, [pc, #224]	; (8008680 <UART_SetConfig+0x228>)
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d103      	bne.n	80085ac <UART_SetConfig+0x154>
 80085a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085aa:	e01c      	b.n	80085e6 <UART_SetConfig+0x18e>
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	4b34      	ldr	r3, [pc, #208]	; (8008684 <UART_SetConfig+0x22c>)
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d103      	bne.n	80085be <UART_SetConfig+0x166>
 80085b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80085bc:	e013      	b.n	80085e6 <UART_SetConfig+0x18e>
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b31      	ldr	r3, [pc, #196]	; (8008688 <UART_SetConfig+0x230>)
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d103      	bne.n	80085d0 <UART_SetConfig+0x178>
 80085c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ce:	e00a      	b.n	80085e6 <UART_SetConfig+0x18e>
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	4b1e      	ldr	r3, [pc, #120]	; (8008650 <UART_SetConfig+0x1f8>)
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d103      	bne.n	80085e2 <UART_SetConfig+0x18a>
 80085da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085de:	64bb      	str	r3, [r7, #72]	; 0x48
 80085e0:	e001      	b.n	80085e6 <UART_SetConfig+0x18e>
 80085e2:	2300      	movs	r3, #0
 80085e4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	4b19      	ldr	r3, [pc, #100]	; (8008650 <UART_SetConfig+0x1f8>)
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d005      	beq.n	80085fc <UART_SetConfig+0x1a4>
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	4b18      	ldr	r3, [pc, #96]	; (8008658 <UART_SetConfig+0x200>)
 80085f6:	429a      	cmp	r2, r3
 80085f8:	f040 8094 	bne.w	8008724 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80085fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085fe:	2200      	movs	r2, #0
 8008600:	623b      	str	r3, [r7, #32]
 8008602:	627a      	str	r2, [r7, #36]	; 0x24
 8008604:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008608:	f7fd f9e2 	bl	80059d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800860c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800860e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80f7 	beq.w	8008804 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	4a1c      	ldr	r2, [pc, #112]	; (800868c <UART_SetConfig+0x234>)
 800861c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008620:	461a      	mov	r2, r3
 8008622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008624:	fbb3 f3f2 	udiv	r3, r3, r2
 8008628:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	4613      	mov	r3, r2
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	4413      	add	r3, r2
 8008634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008636:	429a      	cmp	r2, r3
 8008638:	d305      	bcc.n	8008646 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008640:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008642:	429a      	cmp	r2, r3
 8008644:	d924      	bls.n	8008690 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800864c:	e069      	b.n	8008722 <UART_SetConfig+0x2ca>
 800864e:	bf00      	nop
 8008650:	44002400 	.word	0x44002400
 8008654:	cfff69f3 	.word	0xcfff69f3
 8008658:	54002400 	.word	0x54002400
 800865c:	40013800 	.word	0x40013800
 8008660:	40004400 	.word	0x40004400
 8008664:	40004800 	.word	0x40004800
 8008668:	40004c00 	.word	0x40004c00
 800866c:	40005000 	.word	0x40005000
 8008670:	40006400 	.word	0x40006400
 8008674:	40007800 	.word	0x40007800
 8008678:	40007c00 	.word	0x40007c00
 800867c:	40008000 	.word	0x40008000
 8008680:	40006800 	.word	0x40006800
 8008684:	40006c00 	.word	0x40006c00
 8008688:	40008400 	.word	0x40008400
 800868c:	08009970 	.word	0x08009970
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008692:	2200      	movs	r2, #0
 8008694:	61bb      	str	r3, [r7, #24]
 8008696:	61fa      	str	r2, [r7, #28]
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	4a64      	ldr	r2, [pc, #400]	; (8008830 <UART_SetConfig+0x3d8>)
 800869e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	2200      	movs	r2, #0
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	617a      	str	r2, [r7, #20]
 80086aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80086ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086b2:	f7f7 fdf3 	bl	800029c <__aeabi_uldivmod>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4610      	mov	r0, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	f04f 0300 	mov.w	r3, #0
 80086c6:	020b      	lsls	r3, r1, #8
 80086c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086cc:	0202      	lsls	r2, r0, #8
 80086ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086d0:	6849      	ldr	r1, [r1, #4]
 80086d2:	0849      	lsrs	r1, r1, #1
 80086d4:	2000      	movs	r0, #0
 80086d6:	460c      	mov	r4, r1
 80086d8:	4605      	mov	r5, r0
 80086da:	eb12 0804 	adds.w	r8, r2, r4
 80086de:	eb43 0905 	adc.w	r9, r3, r5
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	60bb      	str	r3, [r7, #8]
 80086ea:	60fa      	str	r2, [r7, #12]
 80086ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	f7f7 fdd2 	bl	800029c <__aeabi_uldivmod>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	4613      	mov	r3, r2
 80086fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008706:	d308      	bcc.n	800871a <UART_SetConfig+0x2c2>
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800870e:	d204      	bcs.n	800871a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008716:	60da      	str	r2, [r3, #12]
 8008718:	e003      	b.n	8008722 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008720:	e070      	b.n	8008804 <UART_SetConfig+0x3ac>
 8008722:	e06f      	b.n	8008804 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800872c:	d13c      	bne.n	80087a8 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800872e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008730:	2200      	movs	r2, #0
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800873a:	f7fd f949 	bl	80059d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800873e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	d05e      	beq.n	8008804 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	4a39      	ldr	r2, [pc, #228]	; (8008830 <UART_SetConfig+0x3d8>)
 800874c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008750:	461a      	mov	r2, r3
 8008752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008754:	fbb3 f3f2 	udiv	r3, r3, r2
 8008758:	005a      	lsls	r2, r3, #1
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	085b      	lsrs	r3, r3, #1
 8008760:	441a      	add	r2, r3
 8008762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	fbb2 f3f3 	udiv	r3, r2, r3
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800876c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876e:	2b0f      	cmp	r3, #15
 8008770:	d916      	bls.n	80087a0 <UART_SetConfig+0x348>
 8008772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008778:	d212      	bcs.n	80087a0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800877a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877c:	b29b      	uxth	r3, r3
 800877e:	f023 030f 	bic.w	r3, r3, #15
 8008782:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008786:	085b      	lsrs	r3, r3, #1
 8008788:	b29b      	uxth	r3, r3
 800878a:	f003 0307 	and.w	r3, r3, #7
 800878e:	b29a      	uxth	r2, r3
 8008790:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008792:	4313      	orrs	r3, r2
 8008794:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800879c:	60da      	str	r2, [r3, #12]
 800879e:	e031      	b.n	8008804 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80087a6:	e02d      	b.n	8008804 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80087a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087aa:	2200      	movs	r2, #0
 80087ac:	469a      	mov	sl, r3
 80087ae:	4693      	mov	fp, r2
 80087b0:	4650      	mov	r0, sl
 80087b2:	4659      	mov	r1, fp
 80087b4:	f7fd f90c 	bl	80059d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80087b8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80087ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d021      	beq.n	8008804 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	4a1a      	ldr	r2, [pc, #104]	; (8008830 <UART_SetConfig+0x3d8>)
 80087c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087ca:	461a      	mov	r2, r3
 80087cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80087d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	441a      	add	r2, r3
 80087da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d909      	bls.n	80087fe <UART_SetConfig+0x3a6>
 80087ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f0:	d205      	bcs.n	80087fe <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60da      	str	r2, [r3, #12]
 80087fc:	e002      	b.n	8008804 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	2201      	movs	r2, #1
 8008808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880e:	2201      	movs	r2, #1
 8008810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	2200      	movs	r2, #0
 8008818:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	2200      	movs	r2, #0
 800881e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008820:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008824:	4618      	mov	r0, r3
 8008826:	3750      	adds	r7, #80	; 0x50
 8008828:	46bd      	mov	sp, r7
 800882a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800882e:	bf00      	nop
 8008830:	08009970 	.word	0x08009970

08008834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	f003 0308 	and.w	r3, r3, #8
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00a      	beq.n	800885e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	f003 0304 	and.w	r3, r3, #4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	f003 0310 	and.w	r3, r3, #16
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008910:	2b00      	cmp	r3, #0
 8008912:	d01a      	beq.n	800894a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008932:	d10a      	bne.n	800894a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	605a      	str	r2, [r3, #4]
  }
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b098      	sub	sp, #96	; 0x60
 800897c:	af02      	add	r7, sp, #8
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008988:	f7f8 fc48 	bl	800121c <HAL_GetTick>
 800898c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b08      	cmp	r3, #8
 800899a:	d12f      	bne.n	80089fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800899c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a4:	2200      	movs	r2, #0
 80089a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f88e 	bl	8008acc <UART_WaitOnFlagUntilTimeout>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d022      	beq.n	80089fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ca:	653b      	str	r3, [r7, #80]	; 0x50
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d4:	647b      	str	r3, [r7, #68]	; 0x44
 80089d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089dc:	e841 2300 	strex	r3, r2, [r1]
 80089e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e6      	bne.n	80089b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e063      	b.n	8008ac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0304 	and.w	r3, r3, #4
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	d149      	bne.n	8008a9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a12:	2200      	movs	r2, #0
 8008a14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f857 	bl	8008acc <UART_WaitOnFlagUntilTimeout>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d03c      	beq.n	8008a9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	623b      	str	r3, [r7, #32]
   return(result);
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a42:	633b      	str	r3, [r7, #48]	; 0x30
 8008a44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e6      	bne.n	8008a24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f023 0301 	bic.w	r3, r3, #1
 8008a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a76:	61fa      	str	r2, [r7, #28]
 8008a78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7a:	69b9      	ldr	r1, [r7, #24]
 8008a7c:	69fa      	ldr	r2, [r7, #28]
 8008a7e:	e841 2300 	strex	r3, r2, [r1]
 8008a82:	617b      	str	r3, [r7, #20]
   return(result);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1e5      	bne.n	8008a56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2220      	movs	r2, #32
 8008a8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e012      	b.n	8008ac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3758      	adds	r7, #88	; 0x58
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008adc:	e049      	b.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae4:	d045      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae6:	f7f8 fb99 	bl	800121c <HAL_GetTick>
 8008aea:	4602      	mov	r2, r0
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d302      	bcc.n	8008afc <UART_WaitOnFlagUntilTimeout+0x30>
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e048      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0304 	and.w	r3, r3, #4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d031      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d110      	bne.n	8008b3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2208      	movs	r2, #8
 8008b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f838 	bl	8008b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2208      	movs	r2, #8
 8008b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e029      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b4c:	d111      	bne.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 f81e 	bl	8008b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e00f      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	bf0c      	ite	eq
 8008b82:	2301      	moveq	r3, #1
 8008b84:	2300      	movne	r3, #0
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d0a6      	beq.n	8008ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b095      	sub	sp, #84	; 0x54
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008bc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bc8:	e841 2300 	strex	r3, r2, [r1]
 8008bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e6      	bne.n	8008ba2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bea:	f023 0301 	bic.w	r3, r3, #1
 8008bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e3      	bne.n	8008bd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d118      	bne.n	8008c46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	e853 3f00 	ldrex	r3, [r3]
 8008c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f023 0310 	bic.w	r3, r3, #16
 8008c28:	647b      	str	r3, [r7, #68]	; 0x44
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c32:	61bb      	str	r3, [r7, #24]
 8008c34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c36:	6979      	ldr	r1, [r7, #20]
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	e841 2300 	strex	r3, r2, [r1]
 8008c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e6      	bne.n	8008c14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c5a:	bf00      	nop
 8008c5c:	3754      	adds	r7, #84	; 0x54
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_UARTEx_DisableFifoMode+0x16>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e027      	b.n	8008ccc <HAL_UARTEx_DisableFifoMode+0x66>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2224      	movs	r2, #36	; 0x24
 8008c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008caa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e02d      	b.n	8008d4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2224      	movs	r2, #36	; 0x24
 8008cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0201 	bic.w	r2, r2, #1
 8008d16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f84f 	bl	8008dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e02d      	b.n	8008dc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2224      	movs	r2, #36	; 0x24
 8008d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0201 	bic.w	r2, r2, #1
 8008d92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f811 	bl	8008dd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d108      	bne.n	8008df2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008df0:	e031      	b.n	8008e56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008df2:	2308      	movs	r3, #8
 8008df4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008df6:	2308      	movs	r3, #8
 8008df8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	0e5b      	lsrs	r3, r3, #25
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 0307 	and.w	r3, r3, #7
 8008e08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	0f5b      	lsrs	r3, r3, #29
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	7b3a      	ldrb	r2, [r7, #12]
 8008e1e:	4911      	ldr	r1, [pc, #68]	; (8008e64 <UARTEx_SetNbDataToProcess+0x94>)
 8008e20:	5c8a      	ldrb	r2, [r1, r2]
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e26:	7b3a      	ldrb	r2, [r7, #12]
 8008e28:	490f      	ldr	r1, [pc, #60]	; (8008e68 <UARTEx_SetNbDataToProcess+0x98>)
 8008e2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	7b7a      	ldrb	r2, [r7, #13]
 8008e3c:	4909      	ldr	r1, [pc, #36]	; (8008e64 <UARTEx_SetNbDataToProcess+0x94>)
 8008e3e:	5c8a      	ldrb	r2, [r1, r2]
 8008e40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e44:	7b7a      	ldrb	r2, [r7, #13]
 8008e46:	4908      	ldr	r1, [pc, #32]	; (8008e68 <UARTEx_SetNbDataToProcess+0x98>)
 8008e48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e56:	bf00      	nop
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	08009988 	.word	0x08009988
 8008e68:	08009990 	.word	0x08009990

08008e6c <sniprintf>:
 8008e6c:	b40c      	push	{r2, r3}
 8008e6e:	4b18      	ldr	r3, [pc, #96]	; (8008ed0 <sniprintf+0x64>)
 8008e70:	b530      	push	{r4, r5, lr}
 8008e72:	1e0c      	subs	r4, r1, #0
 8008e74:	b09d      	sub	sp, #116	; 0x74
 8008e76:	681d      	ldr	r5, [r3, #0]
 8008e78:	da08      	bge.n	8008e8c <sniprintf+0x20>
 8008e7a:	238b      	movs	r3, #139	; 0x8b
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	b01d      	add	sp, #116	; 0x74
 8008e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e88:	b002      	add	sp, #8
 8008e8a:	4770      	bx	lr
 8008e8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e90:	9002      	str	r0, [sp, #8]
 8008e92:	9006      	str	r0, [sp, #24]
 8008e94:	a902      	add	r1, sp, #8
 8008e96:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e9a:	bf14      	ite	ne
 8008e9c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ea0:	4623      	moveq	r3, r4
 8008ea2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	9304      	str	r3, [sp, #16]
 8008ea8:	9307      	str	r3, [sp, #28]
 8008eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008eae:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008eb2:	ab21      	add	r3, sp, #132	; 0x84
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	f000 f9c1 	bl	800923c <_svfiprintf_r>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	bfbc      	itt	lt
 8008ebe:	238b      	movlt	r3, #139	; 0x8b
 8008ec0:	602b      	strlt	r3, [r5, #0]
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	d0dd      	beq.n	8008e82 <sniprintf+0x16>
 8008ec6:	9b02      	ldr	r3, [sp, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	701a      	strb	r2, [r3, #0]
 8008ecc:	e7d9      	b.n	8008e82 <sniprintf+0x16>
 8008ece:	bf00      	nop
 8008ed0:	20000058 	.word	0x20000058

08008ed4 <siprintf>:
 8008ed4:	b40e      	push	{r1, r2, r3}
 8008ed6:	b500      	push	{lr}
 8008ed8:	b09c      	sub	sp, #112	; 0x70
 8008eda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ede:	ab1d      	add	r3, sp, #116	; 0x74
 8008ee0:	9002      	str	r0, [sp, #8]
 8008ee2:	9006      	str	r0, [sp, #24]
 8008ee4:	9107      	str	r1, [sp, #28]
 8008ee6:	9104      	str	r1, [sp, #16]
 8008ee8:	4808      	ldr	r0, [pc, #32]	; (8008f0c <siprintf+0x38>)
 8008eea:	4909      	ldr	r1, [pc, #36]	; (8008f10 <siprintf+0x3c>)
 8008eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef0:	9105      	str	r1, [sp, #20]
 8008ef2:	a902      	add	r1, sp, #8
 8008ef4:	6800      	ldr	r0, [r0, #0]
 8008ef6:	9301      	str	r3, [sp, #4]
 8008ef8:	f000 f9a0 	bl	800923c <_svfiprintf_r>
 8008efc:	9b02      	ldr	r3, [sp, #8]
 8008efe:	2200      	movs	r2, #0
 8008f00:	701a      	strb	r2, [r3, #0]
 8008f02:	b01c      	add	sp, #112	; 0x70
 8008f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f08:	b003      	add	sp, #12
 8008f0a:	4770      	bx	lr
 8008f0c:	20000058 	.word	0x20000058
 8008f10:	ffff0208 	.word	0xffff0208

08008f14 <memset>:
 8008f14:	4402      	add	r2, r0
 8008f16:	4603      	mov	r3, r0
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d100      	bne.n	8008f1e <memset+0xa>
 8008f1c:	4770      	bx	lr
 8008f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f22:	e7f9      	b.n	8008f18 <memset+0x4>

08008f24 <__errno>:
 8008f24:	4b01      	ldr	r3, [pc, #4]	; (8008f2c <__errno+0x8>)
 8008f26:	6818      	ldr	r0, [r3, #0]
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	20000058 	.word	0x20000058

08008f30 <__libc_init_array>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	4d0d      	ldr	r5, [pc, #52]	; (8008f68 <__libc_init_array+0x38>)
 8008f34:	2600      	movs	r6, #0
 8008f36:	4c0d      	ldr	r4, [pc, #52]	; (8008f6c <__libc_init_array+0x3c>)
 8008f38:	1b64      	subs	r4, r4, r5
 8008f3a:	10a4      	asrs	r4, r4, #2
 8008f3c:	42a6      	cmp	r6, r4
 8008f3e:	d109      	bne.n	8008f54 <__libc_init_array+0x24>
 8008f40:	4d0b      	ldr	r5, [pc, #44]	; (8008f70 <__libc_init_array+0x40>)
 8008f42:	2600      	movs	r6, #0
 8008f44:	4c0b      	ldr	r4, [pc, #44]	; (8008f74 <__libc_init_array+0x44>)
 8008f46:	f000 fc79 	bl	800983c <_init>
 8008f4a:	1b64      	subs	r4, r4, r5
 8008f4c:	10a4      	asrs	r4, r4, #2
 8008f4e:	42a6      	cmp	r6, r4
 8008f50:	d105      	bne.n	8008f5e <__libc_init_array+0x2e>
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f58:	3601      	adds	r6, #1
 8008f5a:	4798      	blx	r3
 8008f5c:	e7ee      	b.n	8008f3c <__libc_init_array+0xc>
 8008f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f62:	3601      	adds	r6, #1
 8008f64:	4798      	blx	r3
 8008f66:	e7f2      	b.n	8008f4e <__libc_init_array+0x1e>
 8008f68:	080099d4 	.word	0x080099d4
 8008f6c:	080099d4 	.word	0x080099d4
 8008f70:	080099d4 	.word	0x080099d4
 8008f74:	080099d8 	.word	0x080099d8

08008f78 <__retarget_lock_acquire_recursive>:
 8008f78:	4770      	bx	lr

08008f7a <__retarget_lock_release_recursive>:
 8008f7a:	4770      	bx	lr

08008f7c <memcpy>:
 8008f7c:	440a      	add	r2, r1
 8008f7e:	1e43      	subs	r3, r0, #1
 8008f80:	4291      	cmp	r1, r2
 8008f82:	d100      	bne.n	8008f86 <memcpy+0xa>
 8008f84:	4770      	bx	lr
 8008f86:	b510      	push	{r4, lr}
 8008f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f8c:	4291      	cmp	r1, r2
 8008f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f92:	d1f9      	bne.n	8008f88 <memcpy+0xc>
 8008f94:	bd10      	pop	{r4, pc}
	...

08008f98 <_free_r>:
 8008f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f9a:	2900      	cmp	r1, #0
 8008f9c:	d043      	beq.n	8009026 <_free_r+0x8e>
 8008f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa2:	1f0c      	subs	r4, r1, #4
 8008fa4:	9001      	str	r0, [sp, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bfb8      	it	lt
 8008faa:	18e4      	addlt	r4, r4, r3
 8008fac:	f000 f8e0 	bl	8009170 <__malloc_lock>
 8008fb0:	4a1e      	ldr	r2, [pc, #120]	; (800902c <_free_r+0x94>)
 8008fb2:	9801      	ldr	r0, [sp, #4]
 8008fb4:	6813      	ldr	r3, [r2, #0]
 8008fb6:	b933      	cbnz	r3, 8008fc6 <_free_r+0x2e>
 8008fb8:	6063      	str	r3, [r4, #4]
 8008fba:	6014      	str	r4, [r2, #0]
 8008fbc:	b003      	add	sp, #12
 8008fbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fc2:	f000 b8db 	b.w	800917c <__malloc_unlock>
 8008fc6:	42a3      	cmp	r3, r4
 8008fc8:	d908      	bls.n	8008fdc <_free_r+0x44>
 8008fca:	6825      	ldr	r5, [r4, #0]
 8008fcc:	1961      	adds	r1, r4, r5
 8008fce:	428b      	cmp	r3, r1
 8008fd0:	bf01      	itttt	eq
 8008fd2:	6819      	ldreq	r1, [r3, #0]
 8008fd4:	685b      	ldreq	r3, [r3, #4]
 8008fd6:	1949      	addeq	r1, r1, r5
 8008fd8:	6021      	streq	r1, [r4, #0]
 8008fda:	e7ed      	b.n	8008fb8 <_free_r+0x20>
 8008fdc:	461a      	mov	r2, r3
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	b10b      	cbz	r3, 8008fe6 <_free_r+0x4e>
 8008fe2:	42a3      	cmp	r3, r4
 8008fe4:	d9fa      	bls.n	8008fdc <_free_r+0x44>
 8008fe6:	6811      	ldr	r1, [r2, #0]
 8008fe8:	1855      	adds	r5, r2, r1
 8008fea:	42a5      	cmp	r5, r4
 8008fec:	d10b      	bne.n	8009006 <_free_r+0x6e>
 8008fee:	6824      	ldr	r4, [r4, #0]
 8008ff0:	4421      	add	r1, r4
 8008ff2:	1854      	adds	r4, r2, r1
 8008ff4:	6011      	str	r1, [r2, #0]
 8008ff6:	42a3      	cmp	r3, r4
 8008ff8:	d1e0      	bne.n	8008fbc <_free_r+0x24>
 8008ffa:	681c      	ldr	r4, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	440c      	add	r4, r1
 8009000:	6053      	str	r3, [r2, #4]
 8009002:	6014      	str	r4, [r2, #0]
 8009004:	e7da      	b.n	8008fbc <_free_r+0x24>
 8009006:	d902      	bls.n	800900e <_free_r+0x76>
 8009008:	230c      	movs	r3, #12
 800900a:	6003      	str	r3, [r0, #0]
 800900c:	e7d6      	b.n	8008fbc <_free_r+0x24>
 800900e:	6825      	ldr	r5, [r4, #0]
 8009010:	1961      	adds	r1, r4, r5
 8009012:	428b      	cmp	r3, r1
 8009014:	bf02      	ittt	eq
 8009016:	6819      	ldreq	r1, [r3, #0]
 8009018:	685b      	ldreq	r3, [r3, #4]
 800901a:	1949      	addeq	r1, r1, r5
 800901c:	6063      	str	r3, [r4, #4]
 800901e:	bf08      	it	eq
 8009020:	6021      	streq	r1, [r4, #0]
 8009022:	6054      	str	r4, [r2, #4]
 8009024:	e7ca      	b.n	8008fbc <_free_r+0x24>
 8009026:	b003      	add	sp, #12
 8009028:	bd30      	pop	{r4, r5, pc}
 800902a:	bf00      	nop
 800902c:	20000418 	.word	0x20000418

08009030 <sbrk_aligned>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	4e0e      	ldr	r6, [pc, #56]	; (800906c <sbrk_aligned+0x3c>)
 8009034:	460c      	mov	r4, r1
 8009036:	4605      	mov	r5, r0
 8009038:	6831      	ldr	r1, [r6, #0]
 800903a:	b911      	cbnz	r1, 8009042 <sbrk_aligned+0x12>
 800903c:	f000 fba8 	bl	8009790 <_sbrk_r>
 8009040:	6030      	str	r0, [r6, #0]
 8009042:	4621      	mov	r1, r4
 8009044:	4628      	mov	r0, r5
 8009046:	f000 fba3 	bl	8009790 <_sbrk_r>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	d00a      	beq.n	8009064 <sbrk_aligned+0x34>
 800904e:	1cc4      	adds	r4, r0, #3
 8009050:	f024 0403 	bic.w	r4, r4, #3
 8009054:	42a0      	cmp	r0, r4
 8009056:	d007      	beq.n	8009068 <sbrk_aligned+0x38>
 8009058:	1a21      	subs	r1, r4, r0
 800905a:	4628      	mov	r0, r5
 800905c:	f000 fb98 	bl	8009790 <_sbrk_r>
 8009060:	3001      	adds	r0, #1
 8009062:	d101      	bne.n	8009068 <sbrk_aligned+0x38>
 8009064:	f04f 34ff 	mov.w	r4, #4294967295
 8009068:	4620      	mov	r0, r4
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	2000041c 	.word	0x2000041c

08009070 <_malloc_r>:
 8009070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009074:	1ccd      	adds	r5, r1, #3
 8009076:	4607      	mov	r7, r0
 8009078:	f025 0503 	bic.w	r5, r5, #3
 800907c:	3508      	adds	r5, #8
 800907e:	2d0c      	cmp	r5, #12
 8009080:	bf38      	it	cc
 8009082:	250c      	movcc	r5, #12
 8009084:	2d00      	cmp	r5, #0
 8009086:	db01      	blt.n	800908c <_malloc_r+0x1c>
 8009088:	42a9      	cmp	r1, r5
 800908a:	d905      	bls.n	8009098 <_malloc_r+0x28>
 800908c:	230c      	movs	r3, #12
 800908e:	2600      	movs	r6, #0
 8009090:	603b      	str	r3, [r7, #0]
 8009092:	4630      	mov	r0, r6
 8009094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009098:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800916c <_malloc_r+0xfc>
 800909c:	f000 f868 	bl	8009170 <__malloc_lock>
 80090a0:	f8d8 3000 	ldr.w	r3, [r8]
 80090a4:	461c      	mov	r4, r3
 80090a6:	bb5c      	cbnz	r4, 8009100 <_malloc_r+0x90>
 80090a8:	4629      	mov	r1, r5
 80090aa:	4638      	mov	r0, r7
 80090ac:	f7ff ffc0 	bl	8009030 <sbrk_aligned>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	4604      	mov	r4, r0
 80090b4:	d155      	bne.n	8009162 <_malloc_r+0xf2>
 80090b6:	f8d8 4000 	ldr.w	r4, [r8]
 80090ba:	4626      	mov	r6, r4
 80090bc:	2e00      	cmp	r6, #0
 80090be:	d145      	bne.n	800914c <_malloc_r+0xdc>
 80090c0:	2c00      	cmp	r4, #0
 80090c2:	d048      	beq.n	8009156 <_malloc_r+0xe6>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	4631      	mov	r1, r6
 80090c8:	4638      	mov	r0, r7
 80090ca:	eb04 0903 	add.w	r9, r4, r3
 80090ce:	f000 fb5f 	bl	8009790 <_sbrk_r>
 80090d2:	4581      	cmp	r9, r0
 80090d4:	d13f      	bne.n	8009156 <_malloc_r+0xe6>
 80090d6:	6821      	ldr	r1, [r4, #0]
 80090d8:	4638      	mov	r0, r7
 80090da:	1a6d      	subs	r5, r5, r1
 80090dc:	4629      	mov	r1, r5
 80090de:	f7ff ffa7 	bl	8009030 <sbrk_aligned>
 80090e2:	3001      	adds	r0, #1
 80090e4:	d037      	beq.n	8009156 <_malloc_r+0xe6>
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	442b      	add	r3, r5
 80090ea:	6023      	str	r3, [r4, #0]
 80090ec:	f8d8 3000 	ldr.w	r3, [r8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d038      	beq.n	8009166 <_malloc_r+0xf6>
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	42a2      	cmp	r2, r4
 80090f8:	d12b      	bne.n	8009152 <_malloc_r+0xe2>
 80090fa:	2200      	movs	r2, #0
 80090fc:	605a      	str	r2, [r3, #4]
 80090fe:	e00f      	b.n	8009120 <_malloc_r+0xb0>
 8009100:	6822      	ldr	r2, [r4, #0]
 8009102:	1b52      	subs	r2, r2, r5
 8009104:	d41f      	bmi.n	8009146 <_malloc_r+0xd6>
 8009106:	2a0b      	cmp	r2, #11
 8009108:	d917      	bls.n	800913a <_malloc_r+0xca>
 800910a:	1961      	adds	r1, r4, r5
 800910c:	42a3      	cmp	r3, r4
 800910e:	6025      	str	r5, [r4, #0]
 8009110:	bf18      	it	ne
 8009112:	6059      	strne	r1, [r3, #4]
 8009114:	6863      	ldr	r3, [r4, #4]
 8009116:	bf08      	it	eq
 8009118:	f8c8 1000 	streq.w	r1, [r8]
 800911c:	5162      	str	r2, [r4, r5]
 800911e:	604b      	str	r3, [r1, #4]
 8009120:	f104 060b 	add.w	r6, r4, #11
 8009124:	4638      	mov	r0, r7
 8009126:	f000 f829 	bl	800917c <__malloc_unlock>
 800912a:	1d23      	adds	r3, r4, #4
 800912c:	f026 0607 	bic.w	r6, r6, #7
 8009130:	1af2      	subs	r2, r6, r3
 8009132:	d0ae      	beq.n	8009092 <_malloc_r+0x22>
 8009134:	1b9b      	subs	r3, r3, r6
 8009136:	50a3      	str	r3, [r4, r2]
 8009138:	e7ab      	b.n	8009092 <_malloc_r+0x22>
 800913a:	42a3      	cmp	r3, r4
 800913c:	6862      	ldr	r2, [r4, #4]
 800913e:	d1dd      	bne.n	80090fc <_malloc_r+0x8c>
 8009140:	f8c8 2000 	str.w	r2, [r8]
 8009144:	e7ec      	b.n	8009120 <_malloc_r+0xb0>
 8009146:	4623      	mov	r3, r4
 8009148:	6864      	ldr	r4, [r4, #4]
 800914a:	e7ac      	b.n	80090a6 <_malloc_r+0x36>
 800914c:	4634      	mov	r4, r6
 800914e:	6876      	ldr	r6, [r6, #4]
 8009150:	e7b4      	b.n	80090bc <_malloc_r+0x4c>
 8009152:	4613      	mov	r3, r2
 8009154:	e7cc      	b.n	80090f0 <_malloc_r+0x80>
 8009156:	230c      	movs	r3, #12
 8009158:	4638      	mov	r0, r7
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	f000 f80e 	bl	800917c <__malloc_unlock>
 8009160:	e797      	b.n	8009092 <_malloc_r+0x22>
 8009162:	6025      	str	r5, [r4, #0]
 8009164:	e7dc      	b.n	8009120 <_malloc_r+0xb0>
 8009166:	605b      	str	r3, [r3, #4]
 8009168:	deff      	udf	#255	; 0xff
 800916a:	bf00      	nop
 800916c:	20000418 	.word	0x20000418

08009170 <__malloc_lock>:
 8009170:	4801      	ldr	r0, [pc, #4]	; (8009178 <__malloc_lock+0x8>)
 8009172:	f7ff bf01 	b.w	8008f78 <__retarget_lock_acquire_recursive>
 8009176:	bf00      	nop
 8009178:	20000414 	.word	0x20000414

0800917c <__malloc_unlock>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__malloc_unlock+0x8>)
 800917e:	f7ff befc 	b.w	8008f7a <__retarget_lock_release_recursive>
 8009182:	bf00      	nop
 8009184:	20000414 	.word	0x20000414

08009188 <__ssputs_r>:
 8009188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800918c:	461f      	mov	r7, r3
 800918e:	688e      	ldr	r6, [r1, #8]
 8009190:	4682      	mov	sl, r0
 8009192:	460c      	mov	r4, r1
 8009194:	42be      	cmp	r6, r7
 8009196:	4690      	mov	r8, r2
 8009198:	680b      	ldr	r3, [r1, #0]
 800919a:	d82c      	bhi.n	80091f6 <__ssputs_r+0x6e>
 800919c:	898a      	ldrh	r2, [r1, #12]
 800919e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091a2:	d026      	beq.n	80091f2 <__ssputs_r+0x6a>
 80091a4:	6965      	ldr	r5, [r4, #20]
 80091a6:	6909      	ldr	r1, [r1, #16]
 80091a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091ac:	eba3 0901 	sub.w	r9, r3, r1
 80091b0:	1c7b      	adds	r3, r7, #1
 80091b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091b6:	444b      	add	r3, r9
 80091b8:	106d      	asrs	r5, r5, #1
 80091ba:	429d      	cmp	r5, r3
 80091bc:	bf38      	it	cc
 80091be:	461d      	movcc	r5, r3
 80091c0:	0553      	lsls	r3, r2, #21
 80091c2:	d527      	bpl.n	8009214 <__ssputs_r+0x8c>
 80091c4:	4629      	mov	r1, r5
 80091c6:	f7ff ff53 	bl	8009070 <_malloc_r>
 80091ca:	4606      	mov	r6, r0
 80091cc:	b360      	cbz	r0, 8009228 <__ssputs_r+0xa0>
 80091ce:	464a      	mov	r2, r9
 80091d0:	6921      	ldr	r1, [r4, #16]
 80091d2:	f7ff fed3 	bl	8008f7c <memcpy>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	6126      	str	r6, [r4, #16]
 80091e4:	444e      	add	r6, r9
 80091e6:	6165      	str	r5, [r4, #20]
 80091e8:	eba5 0509 	sub.w	r5, r5, r9
 80091ec:	6026      	str	r6, [r4, #0]
 80091ee:	463e      	mov	r6, r7
 80091f0:	60a5      	str	r5, [r4, #8]
 80091f2:	42be      	cmp	r6, r7
 80091f4:	d900      	bls.n	80091f8 <__ssputs_r+0x70>
 80091f6:	463e      	mov	r6, r7
 80091f8:	4632      	mov	r2, r6
 80091fa:	4641      	mov	r1, r8
 80091fc:	6820      	ldr	r0, [r4, #0]
 80091fe:	f000 faad 	bl	800975c <memmove>
 8009202:	68a3      	ldr	r3, [r4, #8]
 8009204:	2000      	movs	r0, #0
 8009206:	1b9b      	subs	r3, r3, r6
 8009208:	60a3      	str	r3, [r4, #8]
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	4433      	add	r3, r6
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	462a      	mov	r2, r5
 8009216:	f000 fad9 	bl	80097cc <_realloc_r>
 800921a:	4606      	mov	r6, r0
 800921c:	2800      	cmp	r0, #0
 800921e:	d1e0      	bne.n	80091e2 <__ssputs_r+0x5a>
 8009220:	6921      	ldr	r1, [r4, #16]
 8009222:	4650      	mov	r0, sl
 8009224:	f7ff feb8 	bl	8008f98 <_free_r>
 8009228:	230c      	movs	r3, #12
 800922a:	f04f 30ff 	mov.w	r0, #4294967295
 800922e:	f8ca 3000 	str.w	r3, [sl]
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	e7e9      	b.n	8009210 <__ssputs_r+0x88>

0800923c <_svfiprintf_r>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	4698      	mov	r8, r3
 8009242:	898b      	ldrh	r3, [r1, #12]
 8009244:	b09d      	sub	sp, #116	; 0x74
 8009246:	4607      	mov	r7, r0
 8009248:	061b      	lsls	r3, r3, #24
 800924a:	460d      	mov	r5, r1
 800924c:	4614      	mov	r4, r2
 800924e:	d50e      	bpl.n	800926e <_svfiprintf_r+0x32>
 8009250:	690b      	ldr	r3, [r1, #16]
 8009252:	b963      	cbnz	r3, 800926e <_svfiprintf_r+0x32>
 8009254:	2140      	movs	r1, #64	; 0x40
 8009256:	f7ff ff0b 	bl	8009070 <_malloc_r>
 800925a:	6028      	str	r0, [r5, #0]
 800925c:	6128      	str	r0, [r5, #16]
 800925e:	b920      	cbnz	r0, 800926a <_svfiprintf_r+0x2e>
 8009260:	230c      	movs	r3, #12
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	e0d0      	b.n	800940c <_svfiprintf_r+0x1d0>
 800926a:	2340      	movs	r3, #64	; 0x40
 800926c:	616b      	str	r3, [r5, #20]
 800926e:	2300      	movs	r3, #0
 8009270:	f8cd 800c 	str.w	r8, [sp, #12]
 8009274:	f04f 0901 	mov.w	r9, #1
 8009278:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009424 <_svfiprintf_r+0x1e8>
 800927c:	9309      	str	r3, [sp, #36]	; 0x24
 800927e:	2320      	movs	r3, #32
 8009280:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009284:	2330      	movs	r3, #48	; 0x30
 8009286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800928a:	4623      	mov	r3, r4
 800928c:	469a      	mov	sl, r3
 800928e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009292:	b10a      	cbz	r2, 8009298 <_svfiprintf_r+0x5c>
 8009294:	2a25      	cmp	r2, #37	; 0x25
 8009296:	d1f9      	bne.n	800928c <_svfiprintf_r+0x50>
 8009298:	ebba 0b04 	subs.w	fp, sl, r4
 800929c:	d00b      	beq.n	80092b6 <_svfiprintf_r+0x7a>
 800929e:	465b      	mov	r3, fp
 80092a0:	4622      	mov	r2, r4
 80092a2:	4629      	mov	r1, r5
 80092a4:	4638      	mov	r0, r7
 80092a6:	f7ff ff6f 	bl	8009188 <__ssputs_r>
 80092aa:	3001      	adds	r0, #1
 80092ac:	f000 80a9 	beq.w	8009402 <_svfiprintf_r+0x1c6>
 80092b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b2:	445a      	add	r2, fp
 80092b4:	9209      	str	r2, [sp, #36]	; 0x24
 80092b6:	f89a 3000 	ldrb.w	r3, [sl]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 80a1 	beq.w	8009402 <_svfiprintf_r+0x1c6>
 80092c0:	2300      	movs	r3, #0
 80092c2:	f04f 32ff 	mov.w	r2, #4294967295
 80092c6:	f10a 0a01 	add.w	sl, sl, #1
 80092ca:	9304      	str	r3, [sp, #16]
 80092cc:	9307      	str	r3, [sp, #28]
 80092ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092d2:	931a      	str	r3, [sp, #104]	; 0x68
 80092d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092d8:	4654      	mov	r4, sl
 80092da:	2205      	movs	r2, #5
 80092dc:	4851      	ldr	r0, [pc, #324]	; (8009424 <_svfiprintf_r+0x1e8>)
 80092de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e2:	f000 fa65 	bl	80097b0 <memchr>
 80092e6:	9a04      	ldr	r2, [sp, #16]
 80092e8:	b9d8      	cbnz	r0, 8009322 <_svfiprintf_r+0xe6>
 80092ea:	06d0      	lsls	r0, r2, #27
 80092ec:	bf44      	itt	mi
 80092ee:	2320      	movmi	r3, #32
 80092f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f4:	0711      	lsls	r1, r2, #28
 80092f6:	bf44      	itt	mi
 80092f8:	232b      	movmi	r3, #43	; 0x2b
 80092fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009302:	2b2a      	cmp	r3, #42	; 0x2a
 8009304:	d015      	beq.n	8009332 <_svfiprintf_r+0xf6>
 8009306:	9a07      	ldr	r2, [sp, #28]
 8009308:	4654      	mov	r4, sl
 800930a:	2000      	movs	r0, #0
 800930c:	f04f 0c0a 	mov.w	ip, #10
 8009310:	4621      	mov	r1, r4
 8009312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009316:	3b30      	subs	r3, #48	; 0x30
 8009318:	2b09      	cmp	r3, #9
 800931a:	d94d      	bls.n	80093b8 <_svfiprintf_r+0x17c>
 800931c:	b1b0      	cbz	r0, 800934c <_svfiprintf_r+0x110>
 800931e:	9207      	str	r2, [sp, #28]
 8009320:	e014      	b.n	800934c <_svfiprintf_r+0x110>
 8009322:	eba0 0308 	sub.w	r3, r0, r8
 8009326:	46a2      	mov	sl, r4
 8009328:	fa09 f303 	lsl.w	r3, r9, r3
 800932c:	4313      	orrs	r3, r2
 800932e:	9304      	str	r3, [sp, #16]
 8009330:	e7d2      	b.n	80092d8 <_svfiprintf_r+0x9c>
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	1d19      	adds	r1, r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	9103      	str	r1, [sp, #12]
 800933c:	bfbb      	ittet	lt
 800933e:	425b      	neglt	r3, r3
 8009340:	f042 0202 	orrlt.w	r2, r2, #2
 8009344:	9307      	strge	r3, [sp, #28]
 8009346:	9307      	strlt	r3, [sp, #28]
 8009348:	bfb8      	it	lt
 800934a:	9204      	strlt	r2, [sp, #16]
 800934c:	7823      	ldrb	r3, [r4, #0]
 800934e:	2b2e      	cmp	r3, #46	; 0x2e
 8009350:	d10c      	bne.n	800936c <_svfiprintf_r+0x130>
 8009352:	7863      	ldrb	r3, [r4, #1]
 8009354:	2b2a      	cmp	r3, #42	; 0x2a
 8009356:	d134      	bne.n	80093c2 <_svfiprintf_r+0x186>
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	3402      	adds	r4, #2
 800935c:	1d1a      	adds	r2, r3, #4
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	9203      	str	r2, [sp, #12]
 8009364:	bfb8      	it	lt
 8009366:	f04f 33ff 	movlt.w	r3, #4294967295
 800936a:	9305      	str	r3, [sp, #20]
 800936c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009434 <_svfiprintf_r+0x1f8>
 8009370:	2203      	movs	r2, #3
 8009372:	7821      	ldrb	r1, [r4, #0]
 8009374:	4650      	mov	r0, sl
 8009376:	f000 fa1b 	bl	80097b0 <memchr>
 800937a:	b138      	cbz	r0, 800938c <_svfiprintf_r+0x150>
 800937c:	eba0 000a 	sub.w	r0, r0, sl
 8009380:	2240      	movs	r2, #64	; 0x40
 8009382:	9b04      	ldr	r3, [sp, #16]
 8009384:	3401      	adds	r4, #1
 8009386:	4082      	lsls	r2, r0
 8009388:	4313      	orrs	r3, r2
 800938a:	9304      	str	r3, [sp, #16]
 800938c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009390:	2206      	movs	r2, #6
 8009392:	4825      	ldr	r0, [pc, #148]	; (8009428 <_svfiprintf_r+0x1ec>)
 8009394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009398:	f000 fa0a 	bl	80097b0 <memchr>
 800939c:	2800      	cmp	r0, #0
 800939e:	d038      	beq.n	8009412 <_svfiprintf_r+0x1d6>
 80093a0:	4b22      	ldr	r3, [pc, #136]	; (800942c <_svfiprintf_r+0x1f0>)
 80093a2:	bb1b      	cbnz	r3, 80093ec <_svfiprintf_r+0x1b0>
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	3307      	adds	r3, #7
 80093a8:	f023 0307 	bic.w	r3, r3, #7
 80093ac:	3308      	adds	r3, #8
 80093ae:	9303      	str	r3, [sp, #12]
 80093b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b2:	4433      	add	r3, r6
 80093b4:	9309      	str	r3, [sp, #36]	; 0x24
 80093b6:	e768      	b.n	800928a <_svfiprintf_r+0x4e>
 80093b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80093bc:	460c      	mov	r4, r1
 80093be:	2001      	movs	r0, #1
 80093c0:	e7a6      	b.n	8009310 <_svfiprintf_r+0xd4>
 80093c2:	2300      	movs	r3, #0
 80093c4:	3401      	adds	r4, #1
 80093c6:	f04f 0c0a 	mov.w	ip, #10
 80093ca:	4619      	mov	r1, r3
 80093cc:	9305      	str	r3, [sp, #20]
 80093ce:	4620      	mov	r0, r4
 80093d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093d4:	3a30      	subs	r2, #48	; 0x30
 80093d6:	2a09      	cmp	r2, #9
 80093d8:	d903      	bls.n	80093e2 <_svfiprintf_r+0x1a6>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0c6      	beq.n	800936c <_svfiprintf_r+0x130>
 80093de:	9105      	str	r1, [sp, #20]
 80093e0:	e7c4      	b.n	800936c <_svfiprintf_r+0x130>
 80093e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e6:	4604      	mov	r4, r0
 80093e8:	2301      	movs	r3, #1
 80093ea:	e7f0      	b.n	80093ce <_svfiprintf_r+0x192>
 80093ec:	ab03      	add	r3, sp, #12
 80093ee:	462a      	mov	r2, r5
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	4638      	mov	r0, r7
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	4b0e      	ldr	r3, [pc, #56]	; (8009430 <_svfiprintf_r+0x1f4>)
 80093f8:	f3af 8000 	nop.w
 80093fc:	1c42      	adds	r2, r0, #1
 80093fe:	4606      	mov	r6, r0
 8009400:	d1d6      	bne.n	80093b0 <_svfiprintf_r+0x174>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	065b      	lsls	r3, r3, #25
 8009406:	f53f af2d 	bmi.w	8009264 <_svfiprintf_r+0x28>
 800940a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800940c:	b01d      	add	sp, #116	; 0x74
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	ab03      	add	r3, sp, #12
 8009414:	462a      	mov	r2, r5
 8009416:	a904      	add	r1, sp, #16
 8009418:	4638      	mov	r0, r7
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <_svfiprintf_r+0x1f4>)
 800941e:	f000 f87d 	bl	800951c <_printf_i>
 8009422:	e7eb      	b.n	80093fc <_svfiprintf_r+0x1c0>
 8009424:	08009998 	.word	0x08009998
 8009428:	080099a2 	.word	0x080099a2
 800942c:	00000000 	.word	0x00000000
 8009430:	08009189 	.word	0x08009189
 8009434:	0800999e 	.word	0x0800999e

08009438 <_printf_common>:
 8009438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800943c:	4616      	mov	r6, r2
 800943e:	4699      	mov	r9, r3
 8009440:	688a      	ldr	r2, [r1, #8]
 8009442:	4607      	mov	r7, r0
 8009444:	690b      	ldr	r3, [r1, #16]
 8009446:	460c      	mov	r4, r1
 8009448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800944c:	4293      	cmp	r3, r2
 800944e:	bfb8      	it	lt
 8009450:	4613      	movlt	r3, r2
 8009452:	6033      	str	r3, [r6, #0]
 8009454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009458:	b10a      	cbz	r2, 800945e <_printf_common+0x26>
 800945a:	3301      	adds	r3, #1
 800945c:	6033      	str	r3, [r6, #0]
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	0699      	lsls	r1, r3, #26
 8009462:	bf42      	ittt	mi
 8009464:	6833      	ldrmi	r3, [r6, #0]
 8009466:	3302      	addmi	r3, #2
 8009468:	6033      	strmi	r3, [r6, #0]
 800946a:	6825      	ldr	r5, [r4, #0]
 800946c:	f015 0506 	ands.w	r5, r5, #6
 8009470:	d106      	bne.n	8009480 <_printf_common+0x48>
 8009472:	f104 0a19 	add.w	sl, r4, #25
 8009476:	68e3      	ldr	r3, [r4, #12]
 8009478:	6832      	ldr	r2, [r6, #0]
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	42ab      	cmp	r3, r5
 800947e:	dc2b      	bgt.n	80094d8 <_printf_common+0xa0>
 8009480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009484:	1e13      	subs	r3, r2, #0
 8009486:	6822      	ldr	r2, [r4, #0]
 8009488:	bf18      	it	ne
 800948a:	2301      	movne	r3, #1
 800948c:	0692      	lsls	r2, r2, #26
 800948e:	d430      	bmi.n	80094f2 <_printf_common+0xba>
 8009490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009494:	4649      	mov	r1, r9
 8009496:	4638      	mov	r0, r7
 8009498:	47c0      	blx	r8
 800949a:	3001      	adds	r0, #1
 800949c:	d023      	beq.n	80094e6 <_printf_common+0xae>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	341a      	adds	r4, #26
 80094a2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80094a6:	f003 0306 	and.w	r3, r3, #6
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	bf0a      	itet	eq
 80094ae:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80094b2:	2500      	movne	r5, #0
 80094b4:	6833      	ldreq	r3, [r6, #0]
 80094b6:	f04f 0600 	mov.w	r6, #0
 80094ba:	bf08      	it	eq
 80094bc:	1aed      	subeq	r5, r5, r3
 80094be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80094c2:	bf08      	it	eq
 80094c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094c8:	4293      	cmp	r3, r2
 80094ca:	bfc4      	itt	gt
 80094cc:	1a9b      	subgt	r3, r3, r2
 80094ce:	18ed      	addgt	r5, r5, r3
 80094d0:	42b5      	cmp	r5, r6
 80094d2:	d11a      	bne.n	800950a <_printf_common+0xd2>
 80094d4:	2000      	movs	r0, #0
 80094d6:	e008      	b.n	80094ea <_printf_common+0xb2>
 80094d8:	2301      	movs	r3, #1
 80094da:	4652      	mov	r2, sl
 80094dc:	4649      	mov	r1, r9
 80094de:	4638      	mov	r0, r7
 80094e0:	47c0      	blx	r8
 80094e2:	3001      	adds	r0, #1
 80094e4:	d103      	bne.n	80094ee <_printf_common+0xb6>
 80094e6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	3501      	adds	r5, #1
 80094f0:	e7c1      	b.n	8009476 <_printf_common+0x3e>
 80094f2:	18e1      	adds	r1, r4, r3
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	2030      	movs	r0, #48	; 0x30
 80094f8:	3302      	adds	r3, #2
 80094fa:	4422      	add	r2, r4
 80094fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009508:	e7c2      	b.n	8009490 <_printf_common+0x58>
 800950a:	2301      	movs	r3, #1
 800950c:	4622      	mov	r2, r4
 800950e:	4649      	mov	r1, r9
 8009510:	4638      	mov	r0, r7
 8009512:	47c0      	blx	r8
 8009514:	3001      	adds	r0, #1
 8009516:	d0e6      	beq.n	80094e6 <_printf_common+0xae>
 8009518:	3601      	adds	r6, #1
 800951a:	e7d9      	b.n	80094d0 <_printf_common+0x98>

0800951c <_printf_i>:
 800951c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	7e0f      	ldrb	r7, [r1, #24]
 8009522:	4691      	mov	r9, r2
 8009524:	4680      	mov	r8, r0
 8009526:	460c      	mov	r4, r1
 8009528:	2f78      	cmp	r7, #120	; 0x78
 800952a:	469a      	mov	sl, r3
 800952c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800952e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009532:	d807      	bhi.n	8009544 <_printf_i+0x28>
 8009534:	2f62      	cmp	r7, #98	; 0x62
 8009536:	d80a      	bhi.n	800954e <_printf_i+0x32>
 8009538:	2f00      	cmp	r7, #0
 800953a:	f000 80d3 	beq.w	80096e4 <_printf_i+0x1c8>
 800953e:	2f58      	cmp	r7, #88	; 0x58
 8009540:	f000 80bf 	beq.w	80096c2 <_printf_i+0x1a6>
 8009544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800954c:	e03a      	b.n	80095c4 <_printf_i+0xa8>
 800954e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009552:	2b15      	cmp	r3, #21
 8009554:	d8f6      	bhi.n	8009544 <_printf_i+0x28>
 8009556:	a101      	add	r1, pc, #4	; (adr r1, 800955c <_printf_i+0x40>)
 8009558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800955c:	080095b5 	.word	0x080095b5
 8009560:	080095c9 	.word	0x080095c9
 8009564:	08009545 	.word	0x08009545
 8009568:	08009545 	.word	0x08009545
 800956c:	08009545 	.word	0x08009545
 8009570:	08009545 	.word	0x08009545
 8009574:	080095c9 	.word	0x080095c9
 8009578:	08009545 	.word	0x08009545
 800957c:	08009545 	.word	0x08009545
 8009580:	08009545 	.word	0x08009545
 8009584:	08009545 	.word	0x08009545
 8009588:	080096cb 	.word	0x080096cb
 800958c:	080095f5 	.word	0x080095f5
 8009590:	08009687 	.word	0x08009687
 8009594:	08009545 	.word	0x08009545
 8009598:	08009545 	.word	0x08009545
 800959c:	080096ed 	.word	0x080096ed
 80095a0:	08009545 	.word	0x08009545
 80095a4:	080095f5 	.word	0x080095f5
 80095a8:	08009545 	.word	0x08009545
 80095ac:	08009545 	.word	0x08009545
 80095b0:	0800968f 	.word	0x0800968f
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	1d1a      	adds	r2, r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	602a      	str	r2, [r5, #0]
 80095bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095c4:	2301      	movs	r3, #1
 80095c6:	e09e      	b.n	8009706 <_printf_i+0x1ea>
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	682b      	ldr	r3, [r5, #0]
 80095cc:	0607      	lsls	r7, r0, #24
 80095ce:	f103 0104 	add.w	r1, r3, #4
 80095d2:	6029      	str	r1, [r5, #0]
 80095d4:	d501      	bpl.n	80095da <_printf_i+0xbe>
 80095d6:	681e      	ldr	r6, [r3, #0]
 80095d8:	e003      	b.n	80095e2 <_printf_i+0xc6>
 80095da:	0646      	lsls	r6, r0, #25
 80095dc:	d5fb      	bpl.n	80095d6 <_printf_i+0xba>
 80095de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095e2:	2e00      	cmp	r6, #0
 80095e4:	da03      	bge.n	80095ee <_printf_i+0xd2>
 80095e6:	232d      	movs	r3, #45	; 0x2d
 80095e8:	4276      	negs	r6, r6
 80095ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ee:	4859      	ldr	r0, [pc, #356]	; (8009754 <_printf_i+0x238>)
 80095f0:	230a      	movs	r3, #10
 80095f2:	e012      	b.n	800961a <_printf_i+0xfe>
 80095f4:	682b      	ldr	r3, [r5, #0]
 80095f6:	6820      	ldr	r0, [r4, #0]
 80095f8:	1d19      	adds	r1, r3, #4
 80095fa:	6029      	str	r1, [r5, #0]
 80095fc:	0605      	lsls	r5, r0, #24
 80095fe:	d501      	bpl.n	8009604 <_printf_i+0xe8>
 8009600:	681e      	ldr	r6, [r3, #0]
 8009602:	e002      	b.n	800960a <_printf_i+0xee>
 8009604:	0641      	lsls	r1, r0, #25
 8009606:	d5fb      	bpl.n	8009600 <_printf_i+0xe4>
 8009608:	881e      	ldrh	r6, [r3, #0]
 800960a:	2f6f      	cmp	r7, #111	; 0x6f
 800960c:	4851      	ldr	r0, [pc, #324]	; (8009754 <_printf_i+0x238>)
 800960e:	bf0c      	ite	eq
 8009610:	2308      	moveq	r3, #8
 8009612:	230a      	movne	r3, #10
 8009614:	2100      	movs	r1, #0
 8009616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800961a:	6865      	ldr	r5, [r4, #4]
 800961c:	2d00      	cmp	r5, #0
 800961e:	60a5      	str	r5, [r4, #8]
 8009620:	bfa2      	ittt	ge
 8009622:	6821      	ldrge	r1, [r4, #0]
 8009624:	f021 0104 	bicge.w	r1, r1, #4
 8009628:	6021      	strge	r1, [r4, #0]
 800962a:	b90e      	cbnz	r6, 8009630 <_printf_i+0x114>
 800962c:	2d00      	cmp	r5, #0
 800962e:	d04a      	beq.n	80096c6 <_printf_i+0x1aa>
 8009630:	4615      	mov	r5, r2
 8009632:	fbb6 f1f3 	udiv	r1, r6, r3
 8009636:	fb03 6711 	mls	r7, r3, r1, r6
 800963a:	5dc7      	ldrb	r7, [r0, r7]
 800963c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009640:	4637      	mov	r7, r6
 8009642:	460e      	mov	r6, r1
 8009644:	42bb      	cmp	r3, r7
 8009646:	d9f4      	bls.n	8009632 <_printf_i+0x116>
 8009648:	2b08      	cmp	r3, #8
 800964a:	d10b      	bne.n	8009664 <_printf_i+0x148>
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	07de      	lsls	r6, r3, #31
 8009650:	d508      	bpl.n	8009664 <_printf_i+0x148>
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6861      	ldr	r1, [r4, #4]
 8009656:	4299      	cmp	r1, r3
 8009658:	bfde      	ittt	le
 800965a:	2330      	movle	r3, #48	; 0x30
 800965c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009660:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009664:	1b52      	subs	r2, r2, r5
 8009666:	6122      	str	r2, [r4, #16]
 8009668:	464b      	mov	r3, r9
 800966a:	aa03      	add	r2, sp, #12
 800966c:	4621      	mov	r1, r4
 800966e:	4640      	mov	r0, r8
 8009670:	f8cd a000 	str.w	sl, [sp]
 8009674:	f7ff fee0 	bl	8009438 <_printf_common>
 8009678:	3001      	adds	r0, #1
 800967a:	d149      	bne.n	8009710 <_printf_i+0x1f4>
 800967c:	f04f 30ff 	mov.w	r0, #4294967295
 8009680:	b004      	add	sp, #16
 8009682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	f043 0320 	orr.w	r3, r3, #32
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	2778      	movs	r7, #120	; 0x78
 8009690:	4831      	ldr	r0, [pc, #196]	; (8009758 <_printf_i+0x23c>)
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009698:	061f      	lsls	r7, r3, #24
 800969a:	6829      	ldr	r1, [r5, #0]
 800969c:	f851 6b04 	ldr.w	r6, [r1], #4
 80096a0:	d402      	bmi.n	80096a8 <_printf_i+0x18c>
 80096a2:	065f      	lsls	r7, r3, #25
 80096a4:	bf48      	it	mi
 80096a6:	b2b6      	uxthmi	r6, r6
 80096a8:	07df      	lsls	r7, r3, #31
 80096aa:	6029      	str	r1, [r5, #0]
 80096ac:	bf44      	itt	mi
 80096ae:	f043 0320 	orrmi.w	r3, r3, #32
 80096b2:	6023      	strmi	r3, [r4, #0]
 80096b4:	b91e      	cbnz	r6, 80096be <_printf_i+0x1a2>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	f023 0320 	bic.w	r3, r3, #32
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	2310      	movs	r3, #16
 80096c0:	e7a8      	b.n	8009614 <_printf_i+0xf8>
 80096c2:	4824      	ldr	r0, [pc, #144]	; (8009754 <_printf_i+0x238>)
 80096c4:	e7e5      	b.n	8009692 <_printf_i+0x176>
 80096c6:	4615      	mov	r5, r2
 80096c8:	e7be      	b.n	8009648 <_printf_i+0x12c>
 80096ca:	682b      	ldr	r3, [r5, #0]
 80096cc:	6826      	ldr	r6, [r4, #0]
 80096ce:	1d18      	adds	r0, r3, #4
 80096d0:	6961      	ldr	r1, [r4, #20]
 80096d2:	6028      	str	r0, [r5, #0]
 80096d4:	0635      	lsls	r5, r6, #24
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	d501      	bpl.n	80096de <_printf_i+0x1c2>
 80096da:	6019      	str	r1, [r3, #0]
 80096dc:	e002      	b.n	80096e4 <_printf_i+0x1c8>
 80096de:	0670      	lsls	r0, r6, #25
 80096e0:	d5fb      	bpl.n	80096da <_printf_i+0x1be>
 80096e2:	8019      	strh	r1, [r3, #0]
 80096e4:	2300      	movs	r3, #0
 80096e6:	4615      	mov	r5, r2
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	e7bd      	b.n	8009668 <_printf_i+0x14c>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	2100      	movs	r1, #0
 80096f0:	1d1a      	adds	r2, r3, #4
 80096f2:	602a      	str	r2, [r5, #0]
 80096f4:	681d      	ldr	r5, [r3, #0]
 80096f6:	6862      	ldr	r2, [r4, #4]
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 f859 	bl	80097b0 <memchr>
 80096fe:	b108      	cbz	r0, 8009704 <_printf_i+0x1e8>
 8009700:	1b40      	subs	r0, r0, r5
 8009702:	6060      	str	r0, [r4, #4]
 8009704:	6863      	ldr	r3, [r4, #4]
 8009706:	6123      	str	r3, [r4, #16]
 8009708:	2300      	movs	r3, #0
 800970a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800970e:	e7ab      	b.n	8009668 <_printf_i+0x14c>
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	462a      	mov	r2, r5
 8009714:	4649      	mov	r1, r9
 8009716:	4640      	mov	r0, r8
 8009718:	47d0      	blx	sl
 800971a:	3001      	adds	r0, #1
 800971c:	d0ae      	beq.n	800967c <_printf_i+0x160>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	079b      	lsls	r3, r3, #30
 8009722:	d413      	bmi.n	800974c <_printf_i+0x230>
 8009724:	68e0      	ldr	r0, [r4, #12]
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	4298      	cmp	r0, r3
 800972a:	bfb8      	it	lt
 800972c:	4618      	movlt	r0, r3
 800972e:	e7a7      	b.n	8009680 <_printf_i+0x164>
 8009730:	2301      	movs	r3, #1
 8009732:	4632      	mov	r2, r6
 8009734:	4649      	mov	r1, r9
 8009736:	4640      	mov	r0, r8
 8009738:	47d0      	blx	sl
 800973a:	3001      	adds	r0, #1
 800973c:	d09e      	beq.n	800967c <_printf_i+0x160>
 800973e:	3501      	adds	r5, #1
 8009740:	68e3      	ldr	r3, [r4, #12]
 8009742:	9903      	ldr	r1, [sp, #12]
 8009744:	1a5b      	subs	r3, r3, r1
 8009746:	42ab      	cmp	r3, r5
 8009748:	dcf2      	bgt.n	8009730 <_printf_i+0x214>
 800974a:	e7eb      	b.n	8009724 <_printf_i+0x208>
 800974c:	2500      	movs	r5, #0
 800974e:	f104 0619 	add.w	r6, r4, #25
 8009752:	e7f5      	b.n	8009740 <_printf_i+0x224>
 8009754:	080099a9 	.word	0x080099a9
 8009758:	080099ba 	.word	0x080099ba

0800975c <memmove>:
 800975c:	4288      	cmp	r0, r1
 800975e:	b510      	push	{r4, lr}
 8009760:	eb01 0402 	add.w	r4, r1, r2
 8009764:	d902      	bls.n	800976c <memmove+0x10>
 8009766:	4284      	cmp	r4, r0
 8009768:	4623      	mov	r3, r4
 800976a:	d807      	bhi.n	800977c <memmove+0x20>
 800976c:	1e43      	subs	r3, r0, #1
 800976e:	42a1      	cmp	r1, r4
 8009770:	d008      	beq.n	8009784 <memmove+0x28>
 8009772:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800977a:	e7f8      	b.n	800976e <memmove+0x12>
 800977c:	4402      	add	r2, r0
 800977e:	4601      	mov	r1, r0
 8009780:	428a      	cmp	r2, r1
 8009782:	d100      	bne.n	8009786 <memmove+0x2a>
 8009784:	bd10      	pop	{r4, pc}
 8009786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800978a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800978e:	e7f7      	b.n	8009780 <memmove+0x24>

08009790 <_sbrk_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	2300      	movs	r3, #0
 8009794:	4d05      	ldr	r5, [pc, #20]	; (80097ac <_sbrk_r+0x1c>)
 8009796:	4604      	mov	r4, r0
 8009798:	4608      	mov	r0, r1
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	f7f7 fbf2 	bl	8000f84 <_sbrk>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_sbrk_r+0x1a>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_sbrk_r+0x1a>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	20000410 	.word	0x20000410

080097b0 <memchr>:
 80097b0:	b2c9      	uxtb	r1, r1
 80097b2:	4402      	add	r2, r0
 80097b4:	b510      	push	{r4, lr}
 80097b6:	4290      	cmp	r0, r2
 80097b8:	4603      	mov	r3, r0
 80097ba:	d101      	bne.n	80097c0 <memchr+0x10>
 80097bc:	2300      	movs	r3, #0
 80097be:	e003      	b.n	80097c8 <memchr+0x18>
 80097c0:	781c      	ldrb	r4, [r3, #0]
 80097c2:	3001      	adds	r0, #1
 80097c4:	428c      	cmp	r4, r1
 80097c6:	d1f6      	bne.n	80097b6 <memchr+0x6>
 80097c8:	4618      	mov	r0, r3
 80097ca:	bd10      	pop	{r4, pc}

080097cc <_realloc_r>:
 80097cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097d0:	4680      	mov	r8, r0
 80097d2:	4614      	mov	r4, r2
 80097d4:	460e      	mov	r6, r1
 80097d6:	b921      	cbnz	r1, 80097e2 <_realloc_r+0x16>
 80097d8:	4611      	mov	r1, r2
 80097da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097de:	f7ff bc47 	b.w	8009070 <_malloc_r>
 80097e2:	b92a      	cbnz	r2, 80097f0 <_realloc_r+0x24>
 80097e4:	4625      	mov	r5, r4
 80097e6:	f7ff fbd7 	bl	8008f98 <_free_r>
 80097ea:	4628      	mov	r0, r5
 80097ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f0:	f000 f81b 	bl	800982a <_malloc_usable_size_r>
 80097f4:	4284      	cmp	r4, r0
 80097f6:	4607      	mov	r7, r0
 80097f8:	d802      	bhi.n	8009800 <_realloc_r+0x34>
 80097fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80097fe:	d812      	bhi.n	8009826 <_realloc_r+0x5a>
 8009800:	4621      	mov	r1, r4
 8009802:	4640      	mov	r0, r8
 8009804:	f7ff fc34 	bl	8009070 <_malloc_r>
 8009808:	4605      	mov	r5, r0
 800980a:	2800      	cmp	r0, #0
 800980c:	d0ed      	beq.n	80097ea <_realloc_r+0x1e>
 800980e:	42bc      	cmp	r4, r7
 8009810:	4622      	mov	r2, r4
 8009812:	4631      	mov	r1, r6
 8009814:	bf28      	it	cs
 8009816:	463a      	movcs	r2, r7
 8009818:	f7ff fbb0 	bl	8008f7c <memcpy>
 800981c:	4631      	mov	r1, r6
 800981e:	4640      	mov	r0, r8
 8009820:	f7ff fbba 	bl	8008f98 <_free_r>
 8009824:	e7e1      	b.n	80097ea <_realloc_r+0x1e>
 8009826:	4635      	mov	r5, r6
 8009828:	e7df      	b.n	80097ea <_realloc_r+0x1e>

0800982a <_malloc_usable_size_r>:
 800982a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800982e:	1f18      	subs	r0, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	bfbc      	itt	lt
 8009834:	580b      	ldrlt	r3, [r1, r0]
 8009836:	18c0      	addlt	r0, r0, r3
 8009838:	4770      	bx	lr
	...

0800983c <_init>:
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983e:	bf00      	nop
 8009840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009842:	bc08      	pop	{r3}
 8009844:	469e      	mov	lr, r3
 8009846:	4770      	bx	lr

08009848 <_fini>:
 8009848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984a:	bf00      	nop
 800984c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984e:	bc08      	pop	{r3}
 8009850:	469e      	mov	lr, r3
 8009852:	4770      	bx	lr
