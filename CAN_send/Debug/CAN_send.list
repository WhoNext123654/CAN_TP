
CAN_send.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005640  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f0  080058f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f8  080058f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000348  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003bc  200003bc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c97e  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000213b  00000000  00000000  0002ca65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a60  00000000  00000000  0002eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007ff  00000000  00000000  0002f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000212d8  00000000  00000000  0002fdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e68e  00000000  00000000  000510d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7bcd  00000000  00000000  0005f765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f68  00000000  00000000  00127334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0012a29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057b8 	.word	0x080057b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080057b8 	.word	0x080057b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <print_frame>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// --- Các hàm helper để gửi frame ---
void print_frame(const char* label, uint8_t* frame, uint8_t len) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b0a2      	sub	sp, #136	; 0x88
 8000580:	af02      	add	r7, sp, #8
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	4613      	mov	r3, r2
 8000588:	71fb      	strb	r3, [r7, #7]
    char msg[100];
    int offset = snprintf(msg, sizeof(msg), "%s (len=%u): ", label, len);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f107 0014 	add.w	r0, r7, #20
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4a22      	ldr	r2, [pc, #136]	; (8000620 <print_frame+0xa4>)
 8000596:	2164      	movs	r1, #100	; 0x64
 8000598:	f004 fc42 	bl	8004e20 <sniprintf>
 800059c:	67f8      	str	r0, [r7, #124]	; 0x7c
    for (uint8_t i = 0; i < len; i++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80005a4:	e017      	b.n	80005d6 <print_frame+0x5a>
        offset += snprintf(msg + offset, sizeof(msg) - offset, "%02X ", frame[i]);
 80005a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005a8:	f107 0214 	add.w	r2, r7, #20
 80005ac:	18d0      	adds	r0, r2, r3
 80005ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005b0:	f1c3 0164 	rsb	r1, r3, #100	; 0x64
 80005b4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	4413      	add	r3, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4a19      	ldr	r2, [pc, #100]	; (8000624 <print_frame+0xa8>)
 80005c0:	f004 fc2e 	bl	8004e20 <sniprintf>
 80005c4:	4602      	mov	r2, r0
 80005c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005c8:	4413      	add	r3, r2
 80005ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (uint8_t i = 0; i < len; i++) {
 80005cc:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80005d0:	3301      	adds	r3, #1
 80005d2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80005d6:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d3e2      	bcc.n	80005a6 <print_frame+0x2a>
    }
    strncat(msg, "\r\n", sizeof(msg) - strlen(msg) - 1);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fdf3 	bl	80001d0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	490c      	ldr	r1, [pc, #48]	; (8000628 <print_frame+0xac>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 fc4e 	bl	8004e98 <strncat>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fde5 	bl	80001d0 <strlen>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	f107 0114 	add.w	r1, r7, #20
 800060e:	2364      	movs	r3, #100	; 0x64
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <print_frame+0xb0>)
 8000612:	f003 fbe9 	bl	8003de8 <HAL_UART_Transmit>
}
 8000616:	bf00      	nop
 8000618:	3780      	adds	r7, #128	; 0x80
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	080057d0 	.word	0x080057d0
 8000624:	080057e0 	.word	0x080057e0
 8000628:	080057e8 	.word	0x080057e8
 800062c:	20000100 	.word	0x20000100

08000630 <can_tp_send_frame>:

void can_tp_send_frame(uint8_t* data, uint8_t dlc) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
    g_tx_header.DLC = dlc;
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	4a06      	ldr	r2, [pc, #24]	; (8000658 <can_tp_send_frame+0x28>)
 8000640:	6113      	str	r3, [r2, #16]
    // Luôn kiểm tra kết quả trả v�? khi gửi CAN
    if (HAL_CAN_AddTxMessage(&hcan1, &g_tx_header, data, &g_tx_mailbox) != HAL_OK) {
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <can_tp_send_frame+0x2c>)
 8000644:	687a      	ldr	r2, [r7, #4]
 8000646:	4904      	ldr	r1, [pc, #16]	; (8000658 <can_tp_send_frame+0x28>)
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <can_tp_send_frame+0x30>)
 800064a:	f001 f961 	bl	8001910 <HAL_CAN_AddTxMessage>

    }
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	20000150 	.word	0x20000150
 8000660:	20000090 	.word	0x20000090

08000664 <can_tp_manager>:

// --- Hàm quản lý State Machine chính ---
void can_tp_manager(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0
    switch (sender_state) {
 800066a:	4ba2      	ldr	r3, [pc, #648]	; (80008f4 <can_tp_manager+0x290>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b02      	cmp	r3, #2
 8000672:	f000 809f 	beq.w	80007b4 <can_tp_manager+0x150>
 8000676:	2b02      	cmp	r3, #2
 8000678:	f300 8139 	bgt.w	80008ee <can_tp_manager+0x28a>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d003      	beq.n	8000688 <can_tp_manager+0x24>
 8000680:	2b01      	cmp	r3, #1
 8000682:	f000 8082 	beq.w	800078a <can_tp_manager+0x126>
 8000686:	e132      	b.n	80008ee <can_tp_manager+0x28a>
        case TP_SENDER_IDLE:
            // Nếu có dữ liệu mới từ UART và đang ở trạng thái nghỉ
            if (g_uart_data_ready) {
 8000688:	4b9b      	ldr	r3, [pc, #620]	; (80008f8 <can_tp_manager+0x294>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	f000 8126 	beq.w	80008e0 <can_tp_manager+0x27c>
                // 1. Xóa c�? và copy dữ liệu để xử lý
                g_uart_data_ready = 0;
 8000694:	4b98      	ldr	r3, [pc, #608]	; (80008f8 <can_tp_manager+0x294>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
                memcpy(g_tp_data_to_send, g_uart_data_buffer, g_uart_data_len);
 800069a:	4b98      	ldr	r3, [pc, #608]	; (80008fc <can_tp_manager+0x298>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4997      	ldr	r1, [pc, #604]	; (8000900 <can_tp_manager+0x29c>)
 80006a2:	4898      	ldr	r0, [pc, #608]	; (8000904 <can_tp_manager+0x2a0>)
 80006a4:	f004 fc38 	bl	8004f18 <memcpy>
                g_tp_total_len = g_uart_data_len;
 80006a8:	4b94      	ldr	r3, [pc, #592]	; (80008fc <can_tp_manager+0x298>)
 80006aa:	881a      	ldrh	r2, [r3, #0]
 80006ac:	4b96      	ldr	r3, [pc, #600]	; (8000908 <can_tp_manager+0x2a4>)
 80006ae:	801a      	strh	r2, [r3, #0]

                // 2. Quyết định gửi SF hay FF
                if (g_tp_total_len <= 7) {
 80006b0:	4b95      	ldr	r3, [pc, #596]	; (8000908 <can_tp_manager+0x2a4>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	2b07      	cmp	r3, #7
 80006b6:	d82c      	bhi.n	8000712 <can_tp_manager+0xae>
                    // --- Gửi Single Frame (SF) ---
                    uint8_t frame[8] = {0};
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
                    frame[0] = PCI_TYPE_SF | (g_tp_total_len & 0x0F);
 80006c0:	4b91      	ldr	r3, [pc, #580]	; (8000908 <can_tp_manager+0x2a4>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	f887 3020 	strb.w	r3, [r7, #32]
                    memcpy(&frame[1], g_tp_data_to_send, g_tp_total_len);
 80006d0:	4b8d      	ldr	r3, [pc, #564]	; (8000908 <can_tp_manager+0x2a4>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	3301      	adds	r3, #1
 80006dc:	4989      	ldr	r1, [pc, #548]	; (8000904 <can_tp_manager+0x2a0>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fc1a 	bl	8004f18 <memcpy>
                    print_frame("TX SF", frame, g_tp_total_len + 1);
 80006e4:	4b88      	ldr	r3, [pc, #544]	; (8000908 <can_tp_manager+0x2a4>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	3301      	adds	r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4619      	mov	r1, r3
 80006f4:	4885      	ldr	r0, [pc, #532]	; (800090c <can_tp_manager+0x2a8>)
 80006f6:	f7ff ff41 	bl	800057c <print_frame>
                    can_tp_send_frame(frame, g_tp_total_len + 1);
 80006fa:	4b83      	ldr	r3, [pc, #524]	; (8000908 <can_tp_manager+0x2a4>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3301      	adds	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff90 	bl	8000630 <can_tp_send_frame>
 8000710:	e037      	b.n	8000782 <can_tp_manager+0x11e>
                    // Gửi xong, vẫn ở trạng thái IDLE
                } else {
                    // --- Gửi First Frame (FF) ---
                    uint8_t frame[8] = {0};
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
                    frame[0] = PCI_TYPE_FF | ((g_tp_total_len >> 8) & 0x0F);
 800071a:	4b7b      	ldr	r3, [pc, #492]	; (8000908 <can_tp_manager+0x2a4>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	b25b      	sxtb	r3, r3
 8000724:	f003 030f 	and.w	r3, r3, #15
 8000728:	b25b      	sxtb	r3, r3
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	b25b      	sxtb	r3, r3
 8000730:	b2db      	uxtb	r3, r3
 8000732:	763b      	strb	r3, [r7, #24]
                    frame[1] = g_tp_total_len & 0xFF;
 8000734:	4b74      	ldr	r3, [pc, #464]	; (8000908 <can_tp_manager+0x2a4>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	767b      	strb	r3, [r7, #25]
                    memcpy(&frame[2], g_tp_data_to_send, 6);
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	3302      	adds	r3, #2
 8000742:	2206      	movs	r2, #6
 8000744:	496f      	ldr	r1, [pc, #444]	; (8000904 <can_tp_manager+0x2a0>)
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fbe6 	bl	8004f18 <memcpy>
                    print_frame("TX FF", frame, 8);
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	2208      	movs	r2, #8
 8000752:	4619      	mov	r1, r3
 8000754:	486e      	ldr	r0, [pc, #440]	; (8000910 <can_tp_manager+0x2ac>)
 8000756:	f7ff ff11 	bl	800057c <print_frame>
                    can_tp_send_frame(frame, 8);
 800075a:	f107 0318 	add.w	r3, r7, #24
 800075e:	2108      	movs	r1, #8
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff65 	bl	8000630 <can_tp_send_frame>

                    // 3. Cập nhật state và các biến cho phiên gửi
                    g_tp_sent_index = 6;
 8000766:	4b6b      	ldr	r3, [pc, #428]	; (8000914 <can_tp_manager+0x2b0>)
 8000768:	2206      	movs	r2, #6
 800076a:	801a      	strh	r2, [r3, #0]
                    g_tp_seq_num = 1;
 800076c:	4b6a      	ldr	r3, [pc, #424]	; (8000918 <can_tp_manager+0x2b4>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
                    sender_state = TP_SENDER_WAIT_FC;
 8000772:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <can_tp_manager+0x290>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
                    g_wait_fc_start_tick = HAL_GetTick(); // Bắt đầu đếm th�?i gian ch�? FC
 8000778:	f000 fea0 	bl	80014bc <HAL_GetTick>
 800077c:	4603      	mov	r3, r0
 800077e:	4a67      	ldr	r2, [pc, #412]	; (800091c <can_tp_manager+0x2b8>)
 8000780:	6013      	str	r3, [r2, #0]
                }
                g_uart_data_len = 0; // chỉ reset sau khi copy
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <can_tp_manager+0x298>)
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]
            }
            break;
 8000788:	e0aa      	b.n	80008e0 <can_tp_manager+0x27c>

        case TP_SENDER_WAIT_FC:
            // Kiểm tra timeout cho FC
            if (HAL_GetTick() - g_wait_fc_start_tick >= 5000) {
 800078a:	f000 fe97 	bl	80014bc <HAL_GetTick>
 800078e:	4602      	mov	r2, r0
 8000790:	4b62      	ldr	r3, [pc, #392]	; (800091c <can_tp_manager+0x2b8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	f241 3287 	movw	r2, #4999	; 0x1387
 800079a:	4293      	cmp	r3, r2
 800079c:	f240 80a2 	bls.w	80008e4 <can_tp_manager+0x280>
                HAL_UART_Transmit(&huart2, (uint8_t*)"Timeout: Don't receive FC frame. \r\n", 36, 100);
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	2224      	movs	r2, #36	; 0x24
 80007a4:	495e      	ldr	r1, [pc, #376]	; (8000920 <can_tp_manager+0x2bc>)
 80007a6:	485f      	ldr	r0, [pc, #380]	; (8000924 <can_tp_manager+0x2c0>)
 80007a8:	f003 fb1e 	bl	8003de8 <HAL_UART_Transmit>
                sender_state = TP_SENDER_IDLE; // Quay lại trạng thái nghỉ
 80007ac:	4b51      	ldr	r3, [pc, #324]	; (80008f4 <can_tp_manager+0x290>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80007b2:	e097      	b.n	80008e4 <can_tp_manager+0x280>

        case TP_SENDER_SEND:
        {
            // 1. Kiểm tra Separation Time (STmin)
            uint32_t st_min_ms = g_fc_st_min;
 80007b4:	4b5c      	ldr	r3, [pc, #368]	; (8000928 <can_tp_manager+0x2c4>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
            if (st_min_ms > 0 && (HAL_GetTick() - g_last_cf_sent_tick < st_min_ms)) {
 80007ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d009      	beq.n	80007d4 <can_tp_manager+0x170>
 80007c0:	f000 fe7c 	bl	80014bc <HAL_GetTick>
 80007c4:	4602      	mov	r2, r0
 80007c6:	4b59      	ldr	r3, [pc, #356]	; (800092c <can_tp_manager+0x2c8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007ce:	429a      	cmp	r2, r3
 80007d0:	f200 808a 	bhi.w	80008e8 <can_tp_manager+0x284>
                return;
            }

            // 2. Kiểm tra Block Size (BS)
            if (g_fc_block_size > 0 && g_cf_sent_in_block >= g_fc_block_size) {
 80007d4:	4b56      	ldr	r3, [pc, #344]	; (8000930 <can_tp_manager+0x2cc>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d009      	beq.n	80007f0 <can_tp_manager+0x18c>
 80007dc:	4b55      	ldr	r3, [pc, #340]	; (8000934 <can_tp_manager+0x2d0>)
 80007de:	781a      	ldrb	r2, [r3, #0]
 80007e0:	4b53      	ldr	r3, [pc, #332]	; (8000930 <can_tp_manager+0x2cc>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d303      	bcc.n	80007f0 <can_tp_manager+0x18c>
                // �?ã gửi hết block, phải ch�? FC tiếp theo
                sender_state = TP_SENDER_WAIT_FC;
 80007e8:	4b42      	ldr	r3, [pc, #264]	; (80008f4 <can_tp_manager+0x290>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
                return;
 80007ee:	e07e      	b.n	80008ee <can_tp_manager+0x28a>
            }

            // 3. Chuẩn bị và gửi CF
            uint16_t remaining = g_tp_total_len - g_tp_sent_index;
 80007f0:	4b45      	ldr	r3, [pc, #276]	; (8000908 <can_tp_manager+0x2a4>)
 80007f2:	881a      	ldrh	r2, [r3, #0]
 80007f4:	4b47      	ldr	r3, [pc, #284]	; (8000914 <can_tp_manager+0x2b0>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	857b      	strh	r3, [r7, #42]	; 0x2a
            if (remaining > 0) {
 80007fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d05e      	beq.n	80008c0 <can_tp_manager+0x25c>
                uint8_t chunk_size = (remaining < 7) ? remaining : 7;
 8000802:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000804:	2b07      	cmp	r3, #7
 8000806:	bf28      	it	cs
 8000808:	2307      	movcs	r3, #7
 800080a:	b29b      	uxth	r3, r3
 800080c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                uint8_t frame[8] = {0};
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
                frame[0] = PCI_TYPE_CF | (g_tp_seq_num & 0x0F);
 8000818:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <can_tp_manager+0x2b4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	f003 030f 	and.w	r3, r3, #15
 8000822:	b25b      	sxtb	r3, r3
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	b25b      	sxtb	r3, r3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	743b      	strb	r3, [r7, #16]
                memcpy(&frame[1], &g_tp_data_to_send[g_tp_sent_index], chunk_size);
 800082e:	4b39      	ldr	r3, [pc, #228]	; (8000914 <can_tp_manager+0x2b0>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <can_tp_manager+0x2a0>)
 8000836:	18d1      	adds	r1, r2, r3
 8000838:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	3301      	adds	r3, #1
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fb68 	bl	8004f18 <memcpy>

                char label[16];
                snprintf(label, sizeof(label), "TX CF [%d]", g_tp_seq_num);
 8000848:	4b33      	ldr	r3, [pc, #204]	; (8000918 <can_tp_manager+0x2b4>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4638      	mov	r0, r7
 800084e:	4a3a      	ldr	r2, [pc, #232]	; (8000938 <can_tp_manager+0x2d4>)
 8000850:	2110      	movs	r1, #16
 8000852:	f004 fae5 	bl	8004e20 <sniprintf>
                print_frame(label, frame, chunk_size + 1);
 8000856:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800085a:	3301      	adds	r3, #1
 800085c:	b2da      	uxtb	r2, r3
 800085e:	f107 0110 	add.w	r1, r7, #16
 8000862:	463b      	mov	r3, r7
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fe89 	bl	800057c <print_frame>
                can_tp_send_frame(frame, chunk_size + 1);
 800086a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800086e:	3301      	adds	r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fed9 	bl	8000630 <can_tp_send_frame>

                // 4. Cập nhật các biến trạng thái
                g_last_cf_sent_tick = HAL_GetTick();
 800087e:	f000 fe1d 	bl	80014bc <HAL_GetTick>
 8000882:	4603      	mov	r3, r0
 8000884:	4a29      	ldr	r2, [pc, #164]	; (800092c <can_tp_manager+0x2c8>)
 8000886:	6013      	str	r3, [r2, #0]
                g_tp_sent_index += chunk_size;
 8000888:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800088c:	b29a      	uxth	r2, r3
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <can_tp_manager+0x2b0>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <can_tp_manager+0x2b0>)
 8000898:	801a      	strh	r2, [r3, #0]
                g_tp_seq_num = (g_tp_seq_num + 1) % 16;
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <can_tp_manager+0x2b4>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	425a      	negs	r2, r3
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	f002 020f 	and.w	r2, r2, #15
 80008aa:	bf58      	it	pl
 80008ac:	4253      	negpl	r3, r2
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <can_tp_manager+0x2b4>)
 80008b2:	701a      	strb	r2, [r3, #0]
                g_cf_sent_in_block++;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <can_tp_manager+0x2d0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <can_tp_manager+0x2d0>)
 80008be:	701a      	strb	r2, [r3, #0]
            }

            // 5. Kiểm tra nếu đã gửi xong toàn bộ tin nhắn
            if (g_tp_sent_index >= g_tp_total_len) {
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <can_tp_manager+0x2b0>)
 80008c2:	881a      	ldrh	r2, [r3, #0]
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <can_tp_manager+0x2a4>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d30f      	bcc.n	80008ec <can_tp_manager+0x288>
                HAL_UART_Transmit(&huart2, (uint8_t*)"TP Send Complete\r\n", 18, 100);
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	2212      	movs	r2, #18
 80008d0:	491a      	ldr	r1, [pc, #104]	; (800093c <can_tp_manager+0x2d8>)
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <can_tp_manager+0x2c0>)
 80008d4:	f003 fa88 	bl	8003de8 <HAL_UART_Transmit>
                sender_state = TP_SENDER_IDLE; // Quay lại trạng thái nghỉ
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <can_tp_manager+0x290>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80008de:	e005      	b.n	80008ec <can_tp_manager+0x288>
            break;
 80008e0:	bf00      	nop
 80008e2:	e004      	b.n	80008ee <can_tp_manager+0x28a>
            break;
 80008e4:	bf00      	nop
 80008e6:	e002      	b.n	80008ee <can_tp_manager+0x28a>
                return;
 80008e8:	bf00      	nop
 80008ea:	e000      	b.n	80008ee <can_tp_manager+0x28a>
            break;
 80008ec:	bf00      	nop
        }
    }
}
 80008ee:	3730      	adds	r7, #48	; 0x30
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000014c 	.word	0x2000014c
 80008f8:	200001da 	.word	0x200001da
 80008fc:	200001d8 	.word	0x200001d8
 8000900:	20000158 	.word	0x20000158
 8000904:	200001dc 	.word	0x200001dc
 8000908:	2000025c 	.word	0x2000025c
 800090c:	080057ec 	.word	0x080057ec
 8000910:	080057f4 	.word	0x080057f4
 8000914:	2000025e 	.word	0x2000025e
 8000918:	20000260 	.word	0x20000260
 800091c:	20000148 	.word	0x20000148
 8000920:	080057fc 	.word	0x080057fc
 8000924:	20000100 	.word	0x20000100
 8000928:	20000262 	.word	0x20000262
 800092c:	20000264 	.word	0x20000264
 8000930:	20000261 	.word	0x20000261
 8000934:	20000268 	.word	0x20000268
 8000938:	08005820 	.word	0x08005820
 800093c:	0800582c 	.word	0x0800582c

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b5b0      	push	{r4, r5, r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 fd53 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f83f 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 f937 	bl	8000bc0 <MX_GPIO_Init>
  MX_I2S3_Init();
 8000952:	f000 f8db 	bl	8000b0c <MX_I2S3_Init>
  MX_CAN1_Init();
 8000956:	f000 f8a3 	bl	8000aa0 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800095a:	f000 f907 	bl	8000b6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef filter_config = {
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <main+0x7c>)
 8000960:	463c      	mov	r4, r7
 8000962:	461d      	mov	r5, r3
 8000964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000970:	e884 0003 	stmia.w	r4, {r0, r1}
         .FilterFIFOAssignment = CAN_FILTER_FIFO0,
         .FilterActivation = ENABLE,
         .SlaveStartFilterBank = 14
     };

     if (HAL_CAN_ConfigFilter(&hcan1, &filter_config) != HAL_OK) {
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <main+0x80>)
 800097a:	f000 fea7 	bl	80016cc <HAL_CAN_ConfigFilter>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <main+0x48>
         Error_Handler();
 8000984:	f000 fb12 	bl	8000fac <Error_Handler>
     }

     // 4. Bật CAN và kích hoạt ngắt FIFO0
     if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <main+0x80>)
 800098a:	f000 ff7d 	bl	8001888 <HAL_CAN_Start>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <main+0x58>
         Error_Handler();
 8000994:	f000 fb0a 	bl	8000fac <Error_Handler>
     }

     if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000998:	2102      	movs	r1, #2
 800099a:	4809      	ldr	r0, [pc, #36]	; (80009c0 <main+0x80>)
 800099c:	f001 f9aa 	bl	8001cf4 <HAL_CAN_ActivateNotification>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <main+0x6a>
         Error_Handler();
 80009a6:	f000 fb01 	bl	8000fac <Error_Handler>
     }

     // 5. Bắt đầu nhận UART3 từng byte (gửi lệnh điều khiển)
     HAL_UART_Receive_IT(&huart2, &g_uart_rx_byte, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	4905      	ldr	r1, [pc, #20]	; (80009c4 <main+0x84>)
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <main+0x88>)
 80009b0:	f003 faa5 	bl	8003efe <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Hàm quản lý state machine sẽ được g�?i liên tục
    can_tp_manager();
 80009b4:	f7ff fe56 	bl	8000664 <can_tp_manager>
 80009b8:	e7fc      	b.n	80009b4 <main+0x74>
 80009ba:	bf00      	nop
 80009bc:	08005840 	.word	0x08005840
 80009c0:	20000090 	.word	0x20000090
 80009c4:	20000154 	.word	0x20000154
 80009c8:	20000100 	.word	0x20000100

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	; 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2230      	movs	r2, #48	; 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f004 fa54 	bl	8004e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <SystemClock_Config+0xcc>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <SystemClock_Config+0xcc>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <SystemClock_Config+0xcc>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <SystemClock_Config+0xd0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fb9e 	bl	8003194 <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a5e:	f000 faa5 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2302      	movs	r3, #2
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	2105      	movs	r1, #5
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fdff 	bl	8003684 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a8c:	f000 fa8e 	bl	8000fac <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3750      	adds	r7, #80	; 0x50
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <MX_CAN1_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000aac:	2203      	movs	r2, #3
 8000aae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000abe:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000ac2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000ac6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_CAN1_Init+0x64>)
 8000af2:	f000 fcef 	bl	80014d4 <HAL_CAN_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000afc:	f000 fa56 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000090 	.word	0x20000090
 8000b08:	40006400 	.word	0x40006400

08000b0c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <MX_I2S3_Init+0x58>)
 8000b14:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b30:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b34:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <MX_I2S3_Init+0x5c>)
 8000b36:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_I2S3_Init+0x54>)
 8000b4c:	f001 fe82 	bl	8002854 <HAL_I2S_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b56:	f000 fa29 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000b8 	.word	0x200000b8
 8000b64:	40003c00 	.word	0x40003c00
 8000b68:	00017700 	.word	0x00017700

08000b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_USART2_UART_Init+0x50>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	f003 f8d0 	bl	8003d48 <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bae:	f000 f9fd 	bl	8000fac <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000100 	.word	0x20000100
 8000bbc:	40004400 	.word	0x40004400

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	; 0x30
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
 8000bda:	4b8b      	ldr	r3, [pc, #556]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a8a      	ldr	r2, [pc, #552]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000be0:	f043 0310 	orr.w	r3, r3, #16
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b88      	ldr	r3, [pc, #544]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	4b84      	ldr	r3, [pc, #528]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a83      	ldr	r2, [pc, #524]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b81      	ldr	r3, [pc, #516]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	4b7d      	ldr	r3, [pc, #500]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a7c      	ldr	r2, [pc, #496]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b7a      	ldr	r3, [pc, #488]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	4b76      	ldr	r3, [pc, #472]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a75      	ldr	r2, [pc, #468]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b73      	ldr	r3, [pc, #460]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b6f      	ldr	r3, [pc, #444]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a6e      	ldr	r2, [pc, #440]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b6c      	ldr	r3, [pc, #432]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b68      	ldr	r3, [pc, #416]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a67      	ldr	r2, [pc, #412]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b65      	ldr	r3, [pc, #404]	; (8000e08 <MX_GPIO_Init+0x248>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2108      	movs	r1, #8
 8000c82:	4862      	ldr	r0, [pc, #392]	; (8000e0c <MX_GPIO_Init+0x24c>)
 8000c84:	f001 fdcc 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4860      	ldr	r0, [pc, #384]	; (8000e10 <MX_GPIO_Init+0x250>)
 8000c8e:	f001 fdc7 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c92:	2200      	movs	r2, #0
 8000c94:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c98:	485e      	ldr	r0, [pc, #376]	; (8000e14 <MX_GPIO_Init+0x254>)
 8000c9a:	f001 fdc1 	bl	8002820 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4855      	ldr	r0, [pc, #340]	; (8000e0c <MX_GPIO_Init+0x24c>)
 8000cb6:	f001 fc17 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	484f      	ldr	r0, [pc, #316]	; (8000e10 <MX_GPIO_Init+0x250>)
 8000cd2:	f001 fc09 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4847      	ldr	r0, [pc, #284]	; (8000e10 <MX_GPIO_Init+0x250>)
 8000cf2:	f001 fbf9 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cfa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4843      	ldr	r0, [pc, #268]	; (8000e18 <MX_GPIO_Init+0x258>)
 8000d0c:	f001 fbec 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d10:	23e0      	movs	r3, #224	; 0xe0
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d20:	2305      	movs	r3, #5
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4619      	mov	r1, r3
 8000d2a:	483b      	ldr	r0, [pc, #236]	; (8000e18 <MX_GPIO_Init+0x258>)
 8000d2c:	f001 fbdc 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d30:	2304      	movs	r3, #4
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4836      	ldr	r0, [pc, #216]	; (8000e1c <MX_GPIO_Init+0x25c>)
 8000d44:	f001 fbd0 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	482d      	ldr	r0, [pc, #180]	; (8000e1c <MX_GPIO_Init+0x25c>)
 8000d66:	f001 fbbf 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD4 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d6a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d6e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4824      	ldr	r0, [pc, #144]	; (8000e14 <MX_GPIO_Init+0x254>)
 8000d84:	f001 fbb0 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481e      	ldr	r0, [pc, #120]	; (8000e18 <MX_GPIO_Init+0x258>)
 8000d9e:	f001 fba3 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000da2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000db4:	230a      	movs	r3, #10
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4816      	ldr	r0, [pc, #88]	; (8000e18 <MX_GPIO_Init+0x258>)
 8000dc0:	f001 fb92 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dc4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dca:	2312      	movs	r3, #18
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 031c 	add.w	r3, r7, #28
 8000dde:	4619      	mov	r1, r3
 8000de0:	480e      	ldr	r0, [pc, #56]	; (8000e1c <MX_GPIO_Init+0x25c>)
 8000de2:	f001 fb81 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000de6:	2302      	movs	r3, #2
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_GPIO_Init+0x24c>)
 8000dfc:	f001 fb74 	bl	80024e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e00:	bf00      	nop
 8000e02:	3730      	adds	r7, #48	; 0x30
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400

08000e20 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_UART_RxCpltCallback+0x6c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d128      	bne.n	8000e84 <HAL_UART_RxCpltCallback+0x64>
//        HAL_UART_Transmit(&huart2, &g_uart_rx_byte, 1, 10);  // In từng byte ra USART2 để xem luồng nhận

        // Chỉ xử lý nếu state machine đang ở trạng thái nghỉ
        if (sender_state == TP_SENDER_IDLE) {
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_UART_RxCpltCallback+0x70>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d11e      	bne.n	8000e7a <HAL_UART_RxCpltCallback+0x5a>
            if (g_uart_rx_byte != '\n' && g_uart_rx_byte != '\r' && g_uart_data_len < sizeof(g_uart_data_buffer) - 1)
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_RxCpltCallback+0x74>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b0a      	cmp	r3, #10
 8000e42:	d013      	beq.n	8000e6c <HAL_UART_RxCpltCallback+0x4c>
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_UART_RxCpltCallback+0x74>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b0d      	cmp	r3, #13
 8000e4a:	d00f      	beq.n	8000e6c <HAL_UART_RxCpltCallback+0x4c>
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_UART_RxCpltCallback+0x78>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b7e      	cmp	r3, #126	; 0x7e
 8000e52:	d80b      	bhi.n	8000e6c <HAL_UART_RxCpltCallback+0x4c>
            {
				g_uart_data_buffer[g_uart_data_len++] = g_uart_rx_byte;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_UART_RxCpltCallback+0x78>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	b291      	uxth	r1, r2
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_UART_RxCpltCallback+0x78>)
 8000e5e:	8011      	strh	r1, [r2, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_UART_RxCpltCallback+0x74>)
 8000e64:	7819      	ldrb	r1, [r3, #0]
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_UART_RxCpltCallback+0x7c>)
 8000e68:	5499      	strb	r1, [r3, r2]
 8000e6a:	e006      	b.n	8000e7a <HAL_UART_RxCpltCallback+0x5a>
            } else {
                if (g_uart_data_len > 0) {
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_UART_RxCpltCallback+0x78>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <HAL_UART_RxCpltCallback+0x5a>
                    g_uart_data_ready = 1; // Báo cho main loop biết có dữ liệu
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_UART_RxCpltCallback+0x80>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
                }
            }
        }

        // Luôn kích hoạt lại ngắt để nhận byte tiếp theo
        HAL_UART_Receive_IT(&huart2, &g_uart_rx_byte, 1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4905      	ldr	r1, [pc, #20]	; (8000e94 <HAL_UART_RxCpltCallback+0x74>)
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <HAL_UART_RxCpltCallback+0x84>)
 8000e80:	f003 f83d 	bl	8003efe <HAL_UART_Receive_IT>
    }
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	2000014c 	.word	0x2000014c
 8000e94:	20000154 	.word	0x20000154
 8000e98:	200001d8 	.word	0x200001d8
 8000e9c:	20000158 	.word	0x20000158
 8000ea0:	200001da 	.word	0x200001da
 8000ea4:	20000100 	.word	0x20000100

08000ea8 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK) {
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	f107 0210 	add.w	r2, r7, #16
 8000eb8:	2100      	movs	r1, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 fdf8 	bl	8001ab0 <HAL_CAN_GetRxMessage>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d15b      	bne.n	8000f7e <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
        return;
    }

    // Chỉ xử lý nếu đang ở trạng thái ch�? Flow Control và ID là chính xác
    if (sender_state == TP_SENDER_WAIT_FC && rx_header.StdId == CAN_TP_FC_RECEIVE_ID) {
 8000ec6:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d157      	bne.n	8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	f240 1225 	movw	r2, #293	; 0x125
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d152      	bne.n	8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
        uint8_t pci_type = (rx_data[0] & 0xF0);
 8000eda:	7a3b      	ldrb	r3, [r7, #8]
 8000edc:	f023 030f 	bic.w	r3, r3, #15
 8000ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        uint8_t flow_status = (rx_data[0] & 0x0F);
 8000ee4:	7a3b      	ldrb	r3, [r7, #8]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

     if (pci_type == PCI_TYPE_FC) {
 8000eee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ef2:	2b30      	cmp	r3, #48	; 0x30
 8000ef4:	d144      	bne.n	8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
    	 // In nội dung frame ra UART2
    	 print_frame("RX FC", rx_data, rx_header.DLC);
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	4822      	ldr	r0, [pc, #136]	; (8000f8c <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000f02:	f7ff fb3b 	bl	800057c <print_frame>

    	if (flow_status == 0x00) { // Continue To Send (CTS)
 8000f06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d117      	bne.n	8000f3e <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
    	   g_fc_block_size = rx_data[1];
 8000f0e:	7a7a      	ldrb	r2, [r7, #9]
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>)
 8000f12:	701a      	strb	r2, [r3, #0]
    	   g_fc_st_min = rx_data[2];
 8000f14:	7aba      	ldrb	r2, [r7, #10]
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000f18:	701a      	strb	r2, [r3, #0]

			 // Chuyển đổi nếu STmin là micro giây (0xF1 - 0xF9)
			 if (g_fc_st_min >= 0xF1 && g_fc_st_min <= 0xF9) {
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2bf0      	cmp	r3, #240	; 0xf0
 8000f20:	d906      	bls.n	8000f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2bf9      	cmp	r3, #249	; 0xf9
 8000f28:	d802      	bhi.n	8000f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			   g_fc_st_min = 1; // Giả định tối thiểu 1ms
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
			 }

    	 g_cf_sent_in_block = 0;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    	 sender_state = TP_SENDER_SEND;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	e020      	b.n	8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>

    	} else if (flow_status == 0x01) { // Wait
 8000f3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d106      	bne.n	8000f54 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
    	  // Có thể xử lý thêm nếu muốn
    	  HAL_UART_Transmit(&huart2, (uint8_t*)"FC = WAIT\r\n", 11, 100);
 8000f46:	2364      	movs	r3, #100	; 0x64
 8000f48:	220b      	movs	r2, #11
 8000f4a:	4914      	ldr	r1, [pc, #80]	; (8000f9c <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000f4c:	4814      	ldr	r0, [pc, #80]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000f4e:	f002 ff4b 	bl	8003de8 <HAL_UART_Transmit>
 8000f52:	e015      	b.n	8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
    	} else if (flow_status == 0x02) { // Overflow/Abort
 8000f54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d109      	bne.n	8000f70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
    	  HAL_UART_Transmit(&huart2, (uint8_t*)"FC = OVERFLOW/ABORT\r\n", 22, 100);
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	2216      	movs	r2, #22
 8000f60:	4910      	ldr	r1, [pc, #64]	; (8000fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000f62:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000f64:	f002 ff40 	bl	8003de8 <HAL_UART_Transmit>
    	  sender_state = TP_SENDER_IDLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	e007      	b.n	8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
    	} else {
    	  HAL_UART_Transmit(&huart2, (uint8_t*)"FC = UNKNOWN\r\n", 15, 100);
 8000f70:	2364      	movs	r3, #100	; 0x64
 8000f72:	220f      	movs	r2, #15
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8000f76:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000f78:	f002 ff36 	bl	8003de8 <HAL_UART_Transmit>
 8000f7c:	e000      	b.n	8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
        return;
 8000f7e:	bf00      	nop
        }
    }
}
}
 8000f80:	3730      	adds	r7, #48	; 0x30
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000014c 	.word	0x2000014c
 8000f8c:	08005868 	.word	0x08005868
 8000f90:	20000261 	.word	0x20000261
 8000f94:	20000262 	.word	0x20000262
 8000f98:	20000268 	.word	0x20000268
 8000f9c:	08005870 	.word	0x08005870
 8000fa0:	20000100 	.word	0x20000100
 8000fa4:	0800587c 	.word	0x0800587c
 8000fa8:	08005894 	.word	0x08005894

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_MspInit+0x4c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f001 f9a2 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <HAL_CAN_MspInit+0xb4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d143      	bne.n	80010b2 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <HAL_CAN_MspInit+0xb8>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <HAL_CAN_MspInit+0xb8>)
 8001034:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_CAN_MspInit+0xb8>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_CAN_MspInit+0xb8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_CAN_MspInit+0xb8>)
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_CAN_MspInit+0xb8>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001062:	2303      	movs	r3, #3
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001072:	2309      	movs	r3, #9
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4811      	ldr	r0, [pc, #68]	; (80010c4 <HAL_CAN_MspInit+0xbc>)
 800107e:	f001 fa33 	bl	80024e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2013      	movs	r0, #19
 8001088:	f001 f965 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800108c:	2013      	movs	r0, #19
 800108e:	f001 f97e 	bl	800238e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	2014      	movs	r0, #20
 8001098:	f001 f95d 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800109c:	2014      	movs	r0, #20
 800109e:	f001 f976 	bl	800238e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	2015      	movs	r0, #21
 80010a8:	f001 f955 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010ac:	2015      	movs	r0, #21
 80010ae:	f001 f96e 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40006400 	.word	0x40006400
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020c00 	.word	0x40020c00

080010c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <HAL_I2S_MspInit+0xf0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d15a      	bne.n	80011ae <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010f8:	2301      	movs	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80010fc:	23c0      	movs	r3, #192	; 0xc0
 80010fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fcdb 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001114:	f7ff ff4a 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_I2S_MspInit+0xf4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a26      	ldr	r2, [pc, #152]	; (80011bc <HAL_I2S_MspInit+0xf4>)
 8001122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_I2S_MspInit+0xf4>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_I2S_MspInit+0xf4>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <HAL_I2S_MspInit+0xf4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_I2S_MspInit+0xf4>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_I2S_MspInit+0xf4>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a18      	ldr	r2, [pc, #96]	; (80011bc <HAL_I2S_MspInit+0xf4>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_I2S_MspInit+0xf4>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800116c:	2310      	movs	r3, #16
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800117c:	2306      	movs	r3, #6
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <HAL_I2S_MspInit+0xf8>)
 8001188:	f001 f9ae 	bl	80024e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800118c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800119e:	2306      	movs	r3, #6
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <HAL_I2S_MspInit+0xfc>)
 80011aa:	f001 f99d 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	; 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40003c00 	.word	0x40003c00
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020800 	.word	0x40020800

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_UART_MspInit+0x94>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d133      	bne.n	8001252 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <HAL_UART_MspInit+0x98>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <HAL_UART_MspInit+0x98>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_UART_MspInit+0x98>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_UART_MspInit+0x98>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_UART_MspInit+0x98>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_UART_MspInit+0x98>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001222:	2360      	movs	r3, #96	; 0x60
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001232:	2307      	movs	r3, #7
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	4619      	mov	r1, r3
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <HAL_UART_MspInit+0x9c>)
 800123e:	f001 f953 	bl	80024e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2026      	movs	r0, #38	; 0x26
 8001248:	f001 f885 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800124c:	2026      	movs	r0, #38	; 0x26
 800124e:	f001 f89e 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40004400 	.word	0x40004400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020c00 	.word	0x40020c00

08001268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800126c:	e7fe      	b.n	800126c <NMI_Handler+0x4>

0800126e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <MemManage_Handler+0x4>

0800127a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <UsageFault_Handler+0x4>

08001286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b4:	f000 f8ee 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <CAN1_TX_IRQHandler+0x10>)
 80012c2:	f000 fd3d 	bl	8001d40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000090 	.word	0x20000090

080012d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <CAN1_RX0_IRQHandler+0x10>)
 80012d6:	f000 fd33 	bl	8001d40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000090 	.word	0x20000090

080012e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <CAN1_RX1_IRQHandler+0x10>)
 80012ea:	f000 fd29 	bl	8001d40 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000090 	.word	0x20000090

080012f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <USART2_IRQHandler+0x10>)
 80012fe:	f002 fe23 	bl	8003f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000100 	.word	0x20000100

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f003 fdc0 	bl	8004ec0 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20020000 	.word	0x20020000
 800136c:	00000400 	.word	0x00000400
 8001370:	2000026c 	.word	0x2000026c
 8001374:	200003c0 	.word	0x200003c0

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013a0:	f7ff ffea 	bl	8001378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a6:	490d      	ldr	r1, [pc, #52]	; (80013dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013bc:	4c0a      	ldr	r4, [pc, #40]	; (80013e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f003 fd7f 	bl	8004ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff fab7 	bl	8000940 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013e0:	08005900 	.word	0x08005900
  ldr r2, =_sbss
 80013e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013e8:	200003bc 	.word	0x200003bc

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_Init+0x40>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_Init+0x40>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x40>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 ff91 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fdc8 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 ffa9 	bl	80023aa <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 ff71 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000018 	.word	0x20000018
 800148c:	20000020 	.word	0x20000020
 8001490:	2000001c 	.word	0x2000001c

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000020 	.word	0x20000020
 80014b8:	20000270 	.word	0x20000270

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000270 	.word	0x20000270

080014d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0ed      	b.n	80016c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fd88 	bl	8001008 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001508:	f7ff ffd8 	bl	80014bc <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800150e:	e012      	b.n	8001536 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001510:	f7ff ffd4 	bl	80014bc <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d90b      	bls.n	8001536 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2205      	movs	r2, #5
 800152e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0c5      	b.n	80016c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0e5      	beq.n	8001510 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0202 	bic.w	r2, r2, #2
 8001552:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001554:	f7ff ffb2 	bl	80014bc <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800155a:	e012      	b.n	8001582 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800155c:	f7ff ffae 	bl	80014bc <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b0a      	cmp	r3, #10
 8001568:	d90b      	bls.n	8001582 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2205      	movs	r2, #5
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e09f      	b.n	80016c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e5      	bne.n	800155c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e1b      	ldrb	r3, [r3, #24]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e007      	b.n	80015ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7e5b      	ldrb	r3, [r3, #25]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e007      	b.n	80015e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7e9b      	ldrb	r3, [r3, #26]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0220 	orr.w	r2, r2, #32
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0220 	bic.w	r2, r2, #32
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7edb      	ldrb	r3, [r3, #27]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0210 	bic.w	r2, r2, #16
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e007      	b.n	8001638 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0210 	orr.w	r2, r2, #16
 8001636:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7f1b      	ldrb	r3, [r3, #28]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0208 	orr.w	r2, r2, #8
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e007      	b.n	8001662 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0208 	bic.w	r2, r2, #8
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7f5b      	ldrb	r3, [r3, #29]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d108      	bne.n	800167c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0204 	orr.w	r2, r2, #4
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e007      	b.n	800168c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0204 	bic.w	r2, r2, #4
 800168a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	ea42 0103 	orr.w	r1, r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	1e5a      	subs	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016dc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d003      	beq.n	80016ec <HAL_CAN_ConfigFilter+0x20>
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	f040 80be 	bne.w	8001868 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80016ec:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_CAN_ConfigFilter+0x1b8>)
 80016ee:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001706:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	431a      	orrs	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	f003 031f 	and.w	r3, r3, #31
 800172c:	2201      	movs	r2, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d123      	bne.n	8001796 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	401a      	ands	r2, r3
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001770:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	3248      	adds	r2, #72	; 0x48
 8001776:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800178a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	3348      	adds	r3, #72	; 0x48
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d122      	bne.n	80017e4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	3248      	adds	r2, #72	; 0x48
 80017c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017da:	6939      	ldr	r1, [r7, #16]
 80017dc:	3348      	adds	r3, #72	; 0x48
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	401a      	ands	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80017fe:	e007      	b.n	8001810 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	431a      	orrs	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800182a:	e007      	b.n	800183c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	431a      	orrs	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d107      	bne.n	8001854 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	431a      	orrs	r2, r3
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800185a:	f023 0201 	bic.w	r2, r3, #1
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e006      	b.n	8001876 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40006400 	.word	0x40006400

08001888 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d12e      	bne.n	80018fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018b4:	f7ff fe02 	bl	80014bc <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ba:	e012      	b.n	80018e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018bc:	f7ff fdfe 	bl	80014bc <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b0a      	cmp	r3, #10
 80018c8:	d90b      	bls.n	80018e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2205      	movs	r2, #5
 80018da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e012      	b.n	8001908 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1e5      	bne.n	80018bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e006      	b.n	8001908 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
  }
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001924:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800192e:	7ffb      	ldrb	r3, [r7, #31]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d003      	beq.n	800193c <HAL_CAN_AddTxMessage+0x2c>
 8001934:	7ffb      	ldrb	r3, [r7, #31]
 8001936:	2b02      	cmp	r3, #2
 8001938:	f040 80ad 	bne.w	8001a96 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10a      	bne.n	800195c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8095 	beq.w	8001a86 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	0e1b      	lsrs	r3, r3, #24
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001966:	2201      	movs	r2, #1
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10d      	bne.n	8001994 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001982:	68f9      	ldr	r1, [r7, #12]
 8001984:	6809      	ldr	r1, [r1, #0]
 8001986:	431a      	orrs	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3318      	adds	r3, #24
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	440b      	add	r3, r1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e00f      	b.n	80019b4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800199e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019a4:	68f9      	ldr	r1, [r7, #12]
 80019a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80019a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3318      	adds	r3, #24
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	440b      	add	r3, r1
 80019b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3318      	adds	r3, #24
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	440b      	add	r3, r1
 80019c4:	3304      	adds	r3, #4
 80019c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	7d1b      	ldrb	r3, [r3, #20]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d111      	bne.n	80019f4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3318      	adds	r3, #24
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4413      	add	r3, r2
 80019dc:	3304      	adds	r3, #4
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	6811      	ldr	r1, [r2, #0]
 80019e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3318      	adds	r3, #24
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	440b      	add	r3, r1
 80019f0:	3304      	adds	r3, #4
 80019f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3307      	adds	r3, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	061a      	lsls	r2, r3, #24
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3306      	adds	r3, #6
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	041b      	lsls	r3, r3, #16
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3305      	adds	r3, #5
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	3204      	adds	r2, #4
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	4610      	mov	r0, r2
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	6811      	ldr	r1, [r2, #0]
 8001a1c:	ea43 0200 	orr.w	r2, r3, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	440b      	add	r3, r1
 8001a26:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001a2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3303      	adds	r3, #3
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	061a      	lsls	r2, r3, #24
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3302      	adds	r3, #2
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	041b      	lsls	r3, r3, #16
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	4313      	orrs	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	6811      	ldr	r1, [r2, #0]
 8001a52:	ea43 0200 	orr.w	r2, r3, r0
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3318      	adds	r3, #24
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	6811      	ldr	r1, [r2, #0]
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3318      	adds	r3, #24
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	440b      	add	r3, r1
 8001a80:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e00e      	b.n	8001aa4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e006      	b.n	8001aa4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
  }
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3724      	adds	r7, #36	; 0x24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d003      	beq.n	8001ad4 <HAL_CAN_GetRxMessage+0x24>
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	f040 8103 	bne.w	8001cda <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10e      	bne.n	8001af8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d116      	bne.n	8001b16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0f7      	b.n	8001ce8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d107      	bne.n	8001b16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0e8      	b.n	8001ce8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	331b      	adds	r3, #27
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	4413      	add	r3, r2
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0204 	and.w	r2, r3, #4
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10c      	bne.n	8001b4e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	331b      	adds	r3, #27
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	4413      	add	r3, r2
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0d5b      	lsrs	r3, r3, #21
 8001b44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e00b      	b.n	8001b66 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	331b      	adds	r3, #27
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	4413      	add	r3, r2
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	08db      	lsrs	r3, r3, #3
 8001b5e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	331b      	adds	r3, #27
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0202 	and.w	r2, r3, #2
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	331b      	adds	r3, #27
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	4413      	add	r3, r2
 8001b88:	3304      	adds	r3, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2208      	movs	r2, #8
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	331b      	adds	r3, #27
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3304      	adds	r3, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 020f 	and.w	r2, r3, #15
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	331b      	adds	r3, #27
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	331b      	adds	r3, #27
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0c1b      	lsrs	r3, r3, #16
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	011b      	lsls	r3, r3, #4
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0a1a      	lsrs	r2, r3, #8
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0c1a      	lsrs	r2, r3, #16
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	3302      	adds	r3, #2
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0e1a      	lsrs	r2, r3, #24
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3303      	adds	r3, #3
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	4413      	add	r3, r2
 8001c6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0a1a      	lsrs	r2, r3, #8
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	3305      	adds	r3, #5
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	4413      	add	r3, r2
 8001c84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	0c1a      	lsrs	r2, r3, #16
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	3306      	adds	r3, #6
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e1a      	lsrs	r2, r3, #24
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	3307      	adds	r3, #7
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d108      	bne.n	8001cc6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0220 	orr.w	r2, r2, #32
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	e007      	b.n	8001cd6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0220 	orr.w	r2, r2, #32
 8001cd4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e006      	b.n	8001ce8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	371c      	adds	r7, #28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d04:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d002      	beq.n	8001d12 <HAL_CAN_ActivateNotification+0x1e>
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d109      	bne.n	8001d26 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6959      	ldr	r1, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e006      	b.n	8001d34 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
  }
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d07c      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d023      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f983 	bl	80020ae <HAL_CAN_TxMailbox0CompleteCallback>
 8001da8:	e016      	b.n	8001dd8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d004      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbc:	e00c      	b.n	8001dd8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd0:	e002      	b.n	8001dd8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f989 	bl	80020ea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d024      	beq.n	8001e2c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f963 	bl	80020c2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001dfc:	e016      	b.n	8001e2c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e10:	e00c      	b.n	8001e2c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
 8001e24:	e002      	b.n	8001e2c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f969 	bl	80020fe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d024      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f943 	bl	80020d6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e50:	e016      	b.n	8001e80 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
 8001e64:	e00c      	b.n	8001e80 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	e002      	b.n	8001e80 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f949 	bl	8002112 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00c      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f930 	bl	8002126 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe ffe2 	bl	8000ea8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00c      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2210      	movs	r2, #16
 8001f06:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2208      	movs	r2, #8
 8001f22:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f912 	bl	800214e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8f9 	bl	800213a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2210      	movs	r2, #16
 8001f62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8fc 	bl	8002162 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2208      	movs	r2, #8
 8001f84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8f5 	bl	8002176 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d07b      	beq.n	800208e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d072      	beq.n	8002086 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d043      	beq.n	8002086 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002004:	2b00      	cmp	r3, #0
 8002006:	d03e      	beq.n	8002086 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800200e:	2b60      	cmp	r3, #96	; 0x60
 8002010:	d02b      	beq.n	800206a <HAL_CAN_IRQHandler+0x32a>
 8002012:	2b60      	cmp	r3, #96	; 0x60
 8002014:	d82e      	bhi.n	8002074 <HAL_CAN_IRQHandler+0x334>
 8002016:	2b50      	cmp	r3, #80	; 0x50
 8002018:	d022      	beq.n	8002060 <HAL_CAN_IRQHandler+0x320>
 800201a:	2b50      	cmp	r3, #80	; 0x50
 800201c:	d82a      	bhi.n	8002074 <HAL_CAN_IRQHandler+0x334>
 800201e:	2b40      	cmp	r3, #64	; 0x40
 8002020:	d019      	beq.n	8002056 <HAL_CAN_IRQHandler+0x316>
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d826      	bhi.n	8002074 <HAL_CAN_IRQHandler+0x334>
 8002026:	2b30      	cmp	r3, #48	; 0x30
 8002028:	d010      	beq.n	800204c <HAL_CAN_IRQHandler+0x30c>
 800202a:	2b30      	cmp	r3, #48	; 0x30
 800202c:	d822      	bhi.n	8002074 <HAL_CAN_IRQHandler+0x334>
 800202e:	2b10      	cmp	r3, #16
 8002030:	d002      	beq.n	8002038 <HAL_CAN_IRQHandler+0x2f8>
 8002032:	2b20      	cmp	r3, #32
 8002034:	d005      	beq.n	8002042 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002036:	e01d      	b.n	8002074 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	f043 0308 	orr.w	r3, r3, #8
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002040:	e019      	b.n	8002076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800204a:	e014      	b.n	8002076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	f043 0320 	orr.w	r3, r3, #32
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002054:	e00f      	b.n	8002076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800205e:	e00a      	b.n	8002076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002068:	e005      	b.n	8002076 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002072:	e000      	b.n	8002076 <HAL_CAN_IRQHandler+0x336>
            break;
 8002074:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002084:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2204      	movs	r2, #4
 800208c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f872 	bl	800218a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff f874 	bl	80014bc <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d008      	beq.n	80023f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e052      	b.n	800249a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0216 	bic.w	r2, r2, #22
 8002402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002412:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <HAL_DMA_Abort+0x62>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0208 	bic.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002444:	e013      	b.n	800246e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002446:	f7ff f839 	bl	80014bc <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b05      	cmp	r3, #5
 8002452:	d90c      	bls.n	800246e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2203      	movs	r2, #3
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e015      	b.n	800249a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e4      	bne.n	8002446 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	223f      	movs	r2, #63	; 0x3f
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e00c      	b.n	80024da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2205      	movs	r2, #5
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e16b      	b.n	80027dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	f040 815a 	bne.w	80027d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d005      	beq.n	800253a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	2b02      	cmp	r3, #2
 8002538:	d130      	bne.n	800259c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 0201 	and.w	r2, r3, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d017      	beq.n	80025d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d123      	bne.n	800262c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80b4 	beq.w	80027d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <HAL_GPIO_Init+0x30c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a5f      	ldr	r2, [pc, #380]	; (80027f4 <HAL_GPIO_Init+0x30c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b5d      	ldr	r3, [pc, #372]	; (80027f4 <HAL_GPIO_Init+0x30c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268a:	4a5b      	ldr	r2, [pc, #364]	; (80027f8 <HAL_GPIO_Init+0x310>)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_GPIO_Init+0x314>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02b      	beq.n	800270e <HAL_GPIO_Init+0x226>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a51      	ldr	r2, [pc, #324]	; (8002800 <HAL_GPIO_Init+0x318>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d025      	beq.n	800270a <HAL_GPIO_Init+0x222>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a50      	ldr	r2, [pc, #320]	; (8002804 <HAL_GPIO_Init+0x31c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01f      	beq.n	8002706 <HAL_GPIO_Init+0x21e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4f      	ldr	r2, [pc, #316]	; (8002808 <HAL_GPIO_Init+0x320>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d019      	beq.n	8002702 <HAL_GPIO_Init+0x21a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4e      	ldr	r2, [pc, #312]	; (800280c <HAL_GPIO_Init+0x324>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_GPIO_Init+0x216>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4d      	ldr	r2, [pc, #308]	; (8002810 <HAL_GPIO_Init+0x328>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00d      	beq.n	80026fa <HAL_GPIO_Init+0x212>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <HAL_GPIO_Init+0x32c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <HAL_GPIO_Init+0x20e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4b      	ldr	r2, [pc, #300]	; (8002818 <HAL_GPIO_Init+0x330>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_GPIO_Init+0x20a>
 80026ee:	2307      	movs	r3, #7
 80026f0:	e00e      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026f2:	2308      	movs	r3, #8
 80026f4:	e00c      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026f6:	2306      	movs	r3, #6
 80026f8:	e00a      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026fa:	2305      	movs	r3, #5
 80026fc:	e008      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026fe:	2304      	movs	r3, #4
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x228>
 8002702:	2303      	movs	r3, #3
 8002704:	e004      	b.n	8002710 <HAL_GPIO_Init+0x228>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <HAL_GPIO_Init+0x228>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x228>
 800270e:	2300      	movs	r3, #0
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f002 0203 	and.w	r2, r2, #3
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4093      	lsls	r3, r2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002720:	4935      	ldr	r1, [pc, #212]	; (80027f8 <HAL_GPIO_Init+0x310>)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_GPIO_Init+0x334>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002752:	4a32      	ldr	r2, [pc, #200]	; (800281c <HAL_GPIO_Init+0x334>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002758:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_GPIO_Init+0x334>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <HAL_GPIO_Init+0x334>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_GPIO_Init+0x334>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_GPIO_Init+0x334>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_GPIO_Init+0x334>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d0:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_GPIO_Init+0x334>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b0f      	cmp	r3, #15
 80027e0:	f67f ae90 	bls.w	8002504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3724      	adds	r7, #36	; 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40020000 	.word	0x40020000
 8002800:	40020400 	.word	0x40020400
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40021400 	.word	0x40021400
 8002814:	40021800 	.word	0x40021800
 8002818:	40021c00 	.word	0x40021c00
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e128      	b.n	8002ab8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a90      	ldr	r2, [pc, #576]	; (8002ac0 <HAL_I2S_Init+0x26c>)
 800287e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fe fc21 	bl	80010c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800289c:	f023 030f 	bic.w	r3, r3, #15
 80028a0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2202      	movs	r2, #2
 80028a8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d060      	beq.n	8002974 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80028ba:	2310      	movs	r3, #16
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e001      	b.n	80028c4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80028c0:	2320      	movs	r3, #32
 80028c2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d802      	bhi.n	80028d2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80028d2:	2001      	movs	r0, #1
 80028d4:	f001 f9d8 	bl	8003c88 <HAL_RCCEx_GetPeriphCLKFreq>
 80028d8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e2:	d125      	bne.n	8002930 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d010      	beq.n	800290e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	3305      	adds	r3, #5
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	e01f      	b.n	800294e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	fbb2 f2f3 	udiv	r2, r2, r3
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	3305      	adds	r3, #5
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	e00e      	b.n	800294e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fbb2 f2f3 	udiv	r2, r2, r3
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	3305      	adds	r3, #5
 800294c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4a5c      	ldr	r2, [pc, #368]	; (8002ac4 <HAL_I2S_Init+0x270>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	08db      	lsrs	r3, r3, #3
 8002958:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	e003      	b.n	800297c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002974:	2302      	movs	r3, #2
 8002976:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d902      	bls.n	8002988 <HAL_I2S_Init+0x134>
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	2bff      	cmp	r3, #255	; 0xff
 8002986:	d907      	bls.n	8002998 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f043 0210 	orr.w	r2, r3, #16
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e08f      	b.n	8002ab8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	ea42 0103 	orr.w	r1, r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029b6:	f023 030f 	bic.w	r3, r3, #15
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6851      	ldr	r1, [r2, #4]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6892      	ldr	r2, [r2, #8]
 80029c2:	4311      	orrs	r1, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68d2      	ldr	r2, [r2, #12]
 80029c8:	4311      	orrs	r1, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6992      	ldr	r2, [r2, #24]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029da:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d161      	bne.n	8002aa8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a38      	ldr	r2, [pc, #224]	; (8002ac8 <HAL_I2S_Init+0x274>)
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a37      	ldr	r2, [pc, #220]	; (8002acc <HAL_I2S_Init+0x278>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_I2S_Init+0x1a4>
 80029f4:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_I2S_Init+0x27c>)
 80029f6:	e001      	b.n	80029fc <HAL_I2S_Init+0x1a8>
 80029f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	4932      	ldr	r1, [pc, #200]	; (8002acc <HAL_I2S_Init+0x278>)
 8002a04:	428a      	cmp	r2, r1
 8002a06:	d101      	bne.n	8002a0c <HAL_I2S_Init+0x1b8>
 8002a08:	4a31      	ldr	r2, [pc, #196]	; (8002ad0 <HAL_I2S_Init+0x27c>)
 8002a0a:	e001      	b.n	8002a10 <HAL_I2S_Init+0x1bc>
 8002a0c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002a10:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a14:	f023 030f 	bic.w	r3, r3, #15
 8002a18:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2b      	ldr	r2, [pc, #172]	; (8002acc <HAL_I2S_Init+0x278>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_I2S_Init+0x1d4>
 8002a24:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <HAL_I2S_Init+0x27c>)
 8002a26:	e001      	b.n	8002a2c <HAL_I2S_Init+0x1d8>
 8002a28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a25      	ldr	r2, [pc, #148]	; (8002acc <HAL_I2S_Init+0x278>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_I2S_Init+0x1ea>
 8002a3a:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_I2S_Init+0x27c>)
 8002a3c:	e001      	b.n	8002a42 <HAL_I2S_Init+0x1ee>
 8002a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4e:	d003      	beq.n	8002a58 <HAL_I2S_Init+0x204>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d103      	bne.n	8002a60 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	e001      	b.n	8002a64 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a82:	4313      	orrs	r3, r2
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a90:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_I2S_Init+0x278>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_I2S_Init+0x24c>
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <HAL_I2S_Init+0x27c>)
 8002a9e:	e001      	b.n	8002aa4 <HAL_I2S_Init+0x250>
 8002aa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aa4:	897a      	ldrh	r2, [r7, #10]
 8002aa6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	08002bcb 	.word	0x08002bcb
 8002ac4:	cccccccd 	.word	0xcccccccd
 8002ac8:	08002ce1 	.word	0x08002ce1
 8002acc:	40003800 	.word	0x40003800
 8002ad0:	40003400 	.word	0x40003400

08002ad4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10e      	bne.n	8002b64 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffb8 	bl	8002ad4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	b292      	uxth	r2, r2
 8002b80:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	1c9a      	adds	r2, r3, #2
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10e      	bne.n	8002bc2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bb2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff93 	bl	8002ae8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d13a      	bne.n	8002c5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d109      	bne.n	8002c04 <I2S_IRQHandler+0x3a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d102      	bne.n	8002c04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff ffb4 	bl	8002b6c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b40      	cmp	r3, #64	; 0x40
 8002c0c:	d126      	bne.n	8002c5c <I2S_IRQHandler+0x92>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d11f      	bne.n	8002c5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	f043 0202 	orr.w	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ff50 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d136      	bne.n	8002cd6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d109      	bne.n	8002c86 <I2S_IRQHandler+0xbc>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d102      	bne.n	8002c86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff45 	bl	8002b10 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d122      	bne.n	8002cd6 <I2S_IRQHandler+0x10c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d11b      	bne.n	8002cd6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff13 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a92      	ldr	r2, [pc, #584]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d101      	bne.n	8002cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002cfa:	4b92      	ldr	r3, [pc, #584]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cfc:	e001      	b.n	8002d02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002cfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a8b      	ldr	r2, [pc, #556]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002d18:	4b8a      	ldr	r3, [pc, #552]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d1a:	e001      	b.n	8002d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002d1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d2c:	d004      	beq.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 8099 	bne.w	8002e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d107      	bne.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f925 	bl	8002f9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f9c8 	bl	80030fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b40      	cmp	r3, #64	; 0x40
 8002d74:	d13a      	bne.n	8002dec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d035      	beq.n	8002dec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002d8a:	4b6e      	ldr	r3, [pc, #440]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d8c:	e001      	b.n	8002d92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002d8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4969      	ldr	r1, [pc, #420]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d9a:	428b      	cmp	r3, r1
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d9e:	4b69      	ldr	r3, [pc, #420]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002da0:	e001      	b.n	8002da6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002daa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f043 0202 	orr.w	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fe88 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	f040 80c3 	bne.w	8002f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80bd 	beq.w	8002f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a49      	ldr	r2, [pc, #292]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002e1e:	4b49      	ldr	r3, [pc, #292]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e20:	e001      	b.n	8002e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002e22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4944      	ldr	r1, [pc, #272]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e2e:	428b      	cmp	r3, r1
 8002e30:	d101      	bne.n	8002e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002e32:	4b44      	ldr	r3, [pc, #272]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e34:	e001      	b.n	8002e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002e36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e3e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fe4a 	bl	8002afc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e68:	e089      	b.n	8002f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d107      	bne.n	8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8be 	bl	8003000 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f8fd 	bl	8003098 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d12f      	bne.n	8002f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d02a      	beq.n	8002f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ec0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d101      	bne.n	8002ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ece:	e001      	b.n	8002ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4919      	ldr	r1, [pc, #100]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002edc:	428b      	cmp	r3, r1
 8002ede:	d101      	bne.n	8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ee2:	e001      	b.n	8002ee8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f043 0202 	orr.w	r2, r3, #2
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff fdfa 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d136      	bne.n	8002f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d031      	beq.n	8002f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002f26:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f28:	e001      	b.n	8002f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002f2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4902      	ldr	r1, [pc, #8]	; (8002f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f36:	428b      	cmp	r3, r1
 8002f38:	d106      	bne.n	8002f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002f3a:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f3c:	e006      	b.n	8002f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002f3e:	bf00      	nop
 8002f40:	40003800 	.word	0x40003800
 8002f44:	40003400 	.word	0x40003400
 8002f48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f50:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f043 0204 	orr.w	r2, r3, #4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fdc0 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f7c:	e000      	b.n	8002f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f7e:	bf00      	nop
}
 8002f80:	bf00      	nop
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	1c99      	adds	r1, r3, #2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6251      	str	r1, [r2, #36]	; 0x24
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d113      	bne.n	8002ff6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fdc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ffc9 	bl	8002f88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c99      	adds	r1, r3, #2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6251      	str	r1, [r2, #36]	; 0x24
 8003012:	8819      	ldrh	r1, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <I2SEx_TxISR_I2SExt+0x90>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <I2SEx_TxISR_I2SExt+0x22>
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <I2SEx_TxISR_I2SExt+0x94>)
 8003020:	e001      	b.n	8003026 <I2SEx_TxISR_I2SExt+0x26>
 8003022:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003026:	460a      	mov	r2, r1
 8003028:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d121      	bne.n	8003086 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a12      	ldr	r2, [pc, #72]	; (8003090 <I2SEx_TxISR_I2SExt+0x90>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d101      	bne.n	8003050 <I2SEx_TxISR_I2SExt+0x50>
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <I2SEx_TxISR_I2SExt+0x94>)
 800304e:	e001      	b.n	8003054 <I2SEx_TxISR_I2SExt+0x54>
 8003050:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	490d      	ldr	r1, [pc, #52]	; (8003090 <I2SEx_TxISR_I2SExt+0x90>)
 800305c:	428b      	cmp	r3, r1
 800305e:	d101      	bne.n	8003064 <I2SEx_TxISR_I2SExt+0x64>
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <I2SEx_TxISR_I2SExt+0x94>)
 8003062:	e001      	b.n	8003068 <I2SEx_TxISR_I2SExt+0x68>
 8003064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003068:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800306c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff81 	bl	8002f88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40003800 	.word	0x40003800
 8003094:	40003400 	.word	0x40003400

08003098 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68d8      	ldr	r0, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	1c99      	adds	r1, r3, #2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	62d1      	str	r1, [r2, #44]	; 0x2c
 80030b0:	b282      	uxth	r2, r0
 80030b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d113      	bne.n	80030f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ff4a 	bl	8002f88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a20      	ldr	r2, [pc, #128]	; (800318c <I2SEx_RxISR_I2SExt+0x90>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <I2SEx_RxISR_I2SExt+0x16>
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <I2SEx_RxISR_I2SExt+0x94>)
 8003110:	e001      	b.n	8003116 <I2SEx_RxISR_I2SExt+0x1a>
 8003112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003116:	68d8      	ldr	r0, [r3, #12]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	1c99      	adds	r1, r3, #2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003122:	b282      	uxth	r2, r0
 8003124:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d121      	bne.n	8003182 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <I2SEx_RxISR_I2SExt+0x90>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <I2SEx_RxISR_I2SExt+0x50>
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <I2SEx_RxISR_I2SExt+0x94>)
 800314a:	e001      	b.n	8003150 <I2SEx_RxISR_I2SExt+0x54>
 800314c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	490d      	ldr	r1, [pc, #52]	; (800318c <I2SEx_RxISR_I2SExt+0x90>)
 8003158:	428b      	cmp	r3, r1
 800315a:	d101      	bne.n	8003160 <I2SEx_RxISR_I2SExt+0x64>
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <I2SEx_RxISR_I2SExt+0x94>)
 800315e:	e001      	b.n	8003164 <I2SEx_RxISR_I2SExt+0x68>
 8003160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003164:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003168:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff03 	bl	8002f88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40003800 	.word	0x40003800
 8003190:	40003400 	.word	0x40003400

08003194 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e267      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d075      	beq.n	800329e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031b2:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d00c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031be:	4b85      	ldr	r3, [pc, #532]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d112      	bne.n	80031f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ca:	4b82      	ldr	r3, [pc, #520]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d6:	d10b      	bne.n	80031f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	4b7e      	ldr	r3, [pc, #504]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d05b      	beq.n	800329c <HAL_RCC_OscConfig+0x108>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d157      	bne.n	800329c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e242      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x74>
 80031fa:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a75      	ldr	r2, [pc, #468]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e01d      	b.n	8003244 <HAL_RCC_OscConfig+0xb0>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003210:	d10c      	bne.n	800322c <HAL_RCC_OscConfig+0x98>
 8003212:	4b70      	ldr	r3, [pc, #448]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6f      	ldr	r2, [pc, #444]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b6d      	ldr	r3, [pc, #436]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a6c      	ldr	r2, [pc, #432]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e00b      	b.n	8003244 <HAL_RCC_OscConfig+0xb0>
 800322c:	4b69      	ldr	r3, [pc, #420]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a68      	ldr	r2, [pc, #416]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a65      	ldr	r2, [pc, #404]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 800323e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fe f936 	bl	80014bc <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003254:	f7fe f932 	bl	80014bc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e207      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	4b5b      	ldr	r3, [pc, #364]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCC_OscConfig+0xc0>
 8003272:	e014      	b.n	800329e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe f922 	bl	80014bc <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe f91e 	bl	80014bc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1f3      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	4b51      	ldr	r3, [pc, #324]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCC_OscConfig+0xe8>
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d063      	beq.n	8003372 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032aa:	4b4a      	ldr	r3, [pc, #296]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d11c      	bne.n	80032fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032c2:	4b44      	ldr	r3, [pc, #272]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ce:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_RCC_OscConfig+0x152>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e1c7      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4937      	ldr	r1, [pc, #220]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	e03a      	b.n	8003372 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d020      	beq.n	8003346 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003304:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_OscConfig+0x244>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe f8d7 	bl	80014bc <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003312:	f7fe f8d3 	bl	80014bc <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1a8      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003330:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4925      	ldr	r1, [pc, #148]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
 8003344:	e015      	b.n	8003372 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_RCC_OscConfig+0x244>)
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f8b6 	bl	80014bc <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003354:	f7fe f8b2 	bl	80014bc <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e187      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d036      	beq.n	80033ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d016      	beq.n	80033b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_RCC_OscConfig+0x248>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe f896 	bl	80014bc <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003394:	f7fe f892 	bl	80014bc <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e167      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_OscConfig+0x240>)
 80033a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x200>
 80033b2:	e01b      	b.n	80033ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b4:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_RCC_OscConfig+0x248>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ba:	f7fe f87f 	bl	80014bc <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	e00e      	b.n	80033e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe f87b 	bl	80014bc <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d907      	bls.n	80033e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e150      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
 80033d4:	40023800 	.word	0x40023800
 80033d8:	42470000 	.word	0x42470000
 80033dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	4b88      	ldr	r3, [pc, #544]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 80033e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ea      	bne.n	80033c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8097 	beq.w	8003528 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fe:	4b81      	ldr	r3, [pc, #516]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10f      	bne.n	800342a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	4b7d      	ldr	r3, [pc, #500]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a7c      	ldr	r2, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b7a      	ldr	r3, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	4b77      	ldr	r3, [pc, #476]	; (8003608 <HAL_RCC_OscConfig+0x474>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d118      	bne.n	8003468 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003436:	4b74      	ldr	r3, [pc, #464]	; (8003608 <HAL_RCC_OscConfig+0x474>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a73      	ldr	r2, [pc, #460]	; (8003608 <HAL_RCC_OscConfig+0x474>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003442:	f7fe f83b 	bl	80014bc <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344a:	f7fe f837 	bl	80014bc <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e10c      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b6a      	ldr	r3, [pc, #424]	; (8003608 <HAL_RCC_OscConfig+0x474>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x2ea>
 8003470:	4b64      	ldr	r3, [pc, #400]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	4a63      	ldr	r2, [pc, #396]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6713      	str	r3, [r2, #112]	; 0x70
 800347c:	e01c      	b.n	80034b8 <HAL_RCC_OscConfig+0x324>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b05      	cmp	r3, #5
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x30c>
 8003486:	4b5f      	ldr	r3, [pc, #380]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a5e      	ldr	r2, [pc, #376]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
 8003492:	4b5c      	ldr	r3, [pc, #368]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a5b      	ldr	r2, [pc, #364]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
 800349e:	e00b      	b.n	80034b8 <HAL_RCC_OscConfig+0x324>
 80034a0:	4b58      	ldr	r3, [pc, #352]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a57      	ldr	r2, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	4b55      	ldr	r3, [pc, #340]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	4a54      	ldr	r2, [pc, #336]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 80034b2:	f023 0304 	bic.w	r3, r3, #4
 80034b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d015      	beq.n	80034ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fd fffc 	bl	80014bc <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fd fff8 	bl	80014bc <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0cb      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	4b49      	ldr	r3, [pc, #292]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0ee      	beq.n	80034c8 <HAL_RCC_OscConfig+0x334>
 80034ea:	e014      	b.n	8003516 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ec:	f7fd ffe6 	bl	80014bc <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f2:	e00a      	b.n	800350a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fd ffe2 	bl	80014bc <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0b5      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350a:	4b3e      	ldr	r3, [pc, #248]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ee      	bne.n	80034f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003516:	7dfb      	ldrb	r3, [r7, #23]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351c:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	4a38      	ldr	r2, [pc, #224]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80a1 	beq.w	8003674 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003532:	4b34      	ldr	r3, [pc, #208]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b08      	cmp	r3, #8
 800353c:	d05c      	beq.n	80035f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d141      	bne.n	80035ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <HAL_RCC_OscConfig+0x478>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7fd ffb6 	bl	80014bc <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fd ffb2 	bl	80014bc <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e087      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	019b      	lsls	r3, r3, #6
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	3b01      	subs	r3, #1
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	061b      	lsls	r3, r3, #24
 8003596:	491b      	ldr	r1, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x478>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fd ff8b 	bl	80014bc <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fd ff87 	bl	80014bc <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e05c      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x416>
 80035c8:	e054      	b.n	8003674 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_RCC_OscConfig+0x478>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fd ff74 	bl	80014bc <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fd ff70 	bl	80014bc <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e045      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_OscConfig+0x470>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x444>
 80035f6:	e03d      	b.n	8003674 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e038      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
 8003604:	40023800 	.word	0x40023800
 8003608:	40007000 	.word	0x40007000
 800360c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_RCC_OscConfig+0x4ec>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d028      	beq.n	8003670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d121      	bne.n	8003670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d11a      	bne.n	8003670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003640:	4013      	ands	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003648:	4293      	cmp	r3, r2
 800364a:	d111      	bne.n	8003670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003656:	085b      	lsrs	r3, r3, #1
 8003658:	3b01      	subs	r3, #1
 800365a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d107      	bne.n	8003670 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800

08003684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0cc      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d90c      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d044      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d119      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d003      	beq.n	8003742 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	2b03      	cmp	r3, #3
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e067      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4934      	ldr	r1, [pc, #208]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003774:	f7fd fea2 	bl	80014bc <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fd fe9e 	bl	80014bc <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e04f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d20c      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f821 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fd fe02 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00
 8003840:	40023800 	.word	0x40023800
 8003844:	080058a4 	.word	0x080058a4
 8003848:	20000018 	.word	0x20000018
 800384c:	2000001c 	.word	0x2000001c

08003850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003854:	b094      	sub	sp, #80	; 0x50
 8003856:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003868:	4b79      	ldr	r3, [pc, #484]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d00d      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x40>
 8003874:	2b08      	cmp	r3, #8
 8003876:	f200 80e1 	bhi.w	8003a3c <HAL_RCC_GetSysClockFreq+0x1ec>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x34>
 800387e:	2b04      	cmp	r3, #4
 8003880:	d003      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x3a>
 8003882:	e0db      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b73      	ldr	r3, [pc, #460]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003888:	e0db      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800388a:	4b73      	ldr	r3, [pc, #460]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x208>)
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800388e:	e0d8      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003890:	4b6f      	ldr	r3, [pc, #444]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003898:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389a:	4b6d      	ldr	r3, [pc, #436]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d063      	beq.n	800396e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b6a      	ldr	r3, [pc, #424]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	2200      	movs	r2, #0
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ba:	2300      	movs	r3, #0
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
 80038be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	f04f 0000 	mov.w	r0, #0
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	0159      	lsls	r1, r3, #5
 80038d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d4:	0150      	lsls	r0, r2, #5
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4621      	mov	r1, r4
 80038dc:	1a51      	subs	r1, r2, r1
 80038de:	6139      	str	r1, [r7, #16]
 80038e0:	4629      	mov	r1, r5
 80038e2:	eb63 0301 	sbc.w	r3, r3, r1
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f4:	4659      	mov	r1, fp
 80038f6:	018b      	lsls	r3, r1, #6
 80038f8:	4651      	mov	r1, sl
 80038fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fe:	4651      	mov	r1, sl
 8003900:	018a      	lsls	r2, r1, #6
 8003902:	4651      	mov	r1, sl
 8003904:	ebb2 0801 	subs.w	r8, r2, r1
 8003908:	4659      	mov	r1, fp
 800390a:	eb63 0901 	sbc.w	r9, r3, r1
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800391a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800391e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003922:	4690      	mov	r8, r2
 8003924:	4699      	mov	r9, r3
 8003926:	4623      	mov	r3, r4
 8003928:	eb18 0303 	adds.w	r3, r8, r3
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	462b      	mov	r3, r5
 8003930:	eb49 0303 	adc.w	r3, r9, r3
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003942:	4629      	mov	r1, r5
 8003944:	024b      	lsls	r3, r1, #9
 8003946:	4621      	mov	r1, r4
 8003948:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800394c:	4621      	mov	r1, r4
 800394e:	024a      	lsls	r2, r1, #9
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003956:	2200      	movs	r2, #0
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
 800395a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800395c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003960:	f7fc fc8e 	bl	8000280 <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4613      	mov	r3, r2
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396c:	e058      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396e:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	099b      	lsrs	r3, r3, #6
 8003974:	2200      	movs	r2, #0
 8003976:	4618      	mov	r0, r3
 8003978:	4611      	mov	r1, r2
 800397a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	2300      	movs	r3, #0
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	f04f 0000 	mov.w	r0, #0
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	0159      	lsls	r1, r3, #5
 8003996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399a:	0150      	lsls	r0, r2, #5
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4641      	mov	r1, r8
 80039a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039a6:	4649      	mov	r1, r9
 80039a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039c0:	ebb2 040a 	subs.w	r4, r2, sl
 80039c4:	eb63 050b 	sbc.w	r5, r3, fp
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	00eb      	lsls	r3, r5, #3
 80039d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d6:	00e2      	lsls	r2, r4, #3
 80039d8:	4614      	mov	r4, r2
 80039da:	461d      	mov	r5, r3
 80039dc:	4643      	mov	r3, r8
 80039de:	18e3      	adds	r3, r4, r3
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	464b      	mov	r3, r9
 80039e4:	eb45 0303 	adc.w	r3, r5, r3
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039f6:	4629      	mov	r1, r5
 80039f8:	028b      	lsls	r3, r1, #10
 80039fa:	4621      	mov	r1, r4
 80039fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a00:	4621      	mov	r1, r4
 8003a02:	028a      	lsls	r2, r1, #10
 8003a04:	4610      	mov	r0, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	61fa      	str	r2, [r7, #28]
 8003a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a14:	f7fc fc34 	bl	8000280 <__aeabi_uldivmod>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003a30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3750      	adds	r7, #80	; 0x50
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	00f42400 	.word	0x00f42400
 8003a58:	007a1200 	.word	0x007a1200

08003a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000018 	.word	0x20000018

08003a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a78:	f7ff fff0 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	0a9b      	lsrs	r3, r3, #10
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	080058b4 	.word	0x080058b4

08003a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003aa0:	f7ff ffdc 	bl	8003a5c <HAL_RCC_GetHCLKFreq>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0b5b      	lsrs	r3, r3, #13
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	4903      	ldr	r1, [pc, #12]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab2:	5ccb      	ldrb	r3, [r1, r3]
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	080058b4 	.word	0x080058b4

08003ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d035      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003aec:	4b62      	ldr	r3, [pc, #392]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003af2:	f7fd fce3 	bl	80014bc <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003afa:	f7fd fcdf 	bl	80014bc <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0b0      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b0c:	4b5b      	ldr	r3, [pc, #364]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	019a      	lsls	r2, r3, #6
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	071b      	lsls	r3, r3, #28
 8003b24:	4955      	ldr	r1, [pc, #340]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b2c:	4b52      	ldr	r3, [pc, #328]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b32:	f7fd fcc3 	bl	80014bc <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b3a:	f7fd fcbf 	bl	80014bc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e090      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8083 	beq.w	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4b44      	ldr	r3, [pc, #272]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	4a43      	ldr	r2, [pc, #268]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	6413      	str	r3, [r2, #64]	; 0x40
 8003b76:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b82:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3e      	ldr	r2, [pc, #248]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b8e:	f7fd fc95 	bl	80014bc <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fd fc91 	bl	80014bc <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e062      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ba8:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02f      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bdc:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003be2:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003be8:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d114      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003bfa:	f7fd fc5f 	bl	80014bc <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	e00a      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fd fc5b 	bl	80014bc <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e02a      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ee      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c30:	d10d      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c46:	490d      	ldr	r1, [pc, #52]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	608b      	str	r3, [r1, #8]
 8003c4c:	e005      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c58:	6093      	str	r3, [r2, #8]
 8003c5a:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c66:	4905      	ldr	r1, [pc, #20]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	670b      	str	r3, [r1, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	42470068 	.word	0x42470068
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470e40 	.word	0x42470e40

08003c88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d13f      	bne.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003ca6:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cbc:	d12f      	bne.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003cbe:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003cc0:	617b      	str	r3, [r7, #20]
          break;
 8003cc2:	e02f      	b.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cc4:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd0:	d108      	bne.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003cd2:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cda:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	e007      	b.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cec:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003cf4:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfa:	099b      	lsrs	r3, r3, #6
 8003cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0e:	0f1b      	lsrs	r3, r3, #28
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	617b      	str	r3, [r7, #20]
          break;
 8003d1c:	e002      	b.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
          break;
 8003d22:	bf00      	nop
        }
      }
      break;
 8003d24:	e000      	b.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8003d26:	bf00      	nop
    }
  }
  return frequency;
 8003d28:	697b      	ldr	r3, [r7, #20]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	00bb8000 	.word	0x00bb8000
 8003d40:	007a1200 	.word	0x007a1200
 8003d44:	00f42400 	.word	0x00f42400

08003d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e042      	b.n	8003de0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fa2a 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fdd3 	bl	8004938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d175      	bne.n	8003ef4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Transmit+0x2c>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e06e      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2221      	movs	r2, #33	; 0x21
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e26:	f7fd fb49 	bl	80014bc <HAL_GetTick>
 8003e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e40:	d108      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e003      	b.n	8003e5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e5c:	e02e      	b.n	8003ebc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fb37 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e03a      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	3302      	adds	r3, #2
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e007      	b.n	8003eae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1cb      	bne.n	8003e5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2140      	movs	r1, #64	; 0x40
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 fb03 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e006      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d112      	bne.n	8003f3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_UART_Receive_IT+0x26>
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e00b      	b.n	8003f40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fb2a 	bl	800458e <UART_Start_Receive_IT>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	e000      	b.n	8003f40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0ba      	sub	sp, #232	; 0xe8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_UART_IRQHandler+0x66>
 8003f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fc07 	bl	80047ba <UART_Receive_IT>
      return;
 8003fac:	e273      	b.n	8004496 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80de 	beq.w	8004174 <HAL_UART_IRQHandler+0x22c>
 8003fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80d1 	beq.w	8004174 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xae>
 8003fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_UART_IRQHandler+0xd2>
 8004002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f043 0202 	orr.w	r2, r3, #2
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_UART_IRQHandler+0xf6>
 8004026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <HAL_UART_IRQHandler+0x126>
 800404a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d105      	bne.n	8004062 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	f043 0208 	orr.w	r2, r3, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 820a 	beq.w	800448c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_UART_IRQHandler+0x14e>
 8004084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fb92 	bl	80047ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b40      	cmp	r3, #64	; 0x40
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_UART_IRQHandler+0x17a>
 80040ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04f      	beq.n	8004162 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa9d 	bl	8004602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d141      	bne.n	800415a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3314      	adds	r3, #20
 80040fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004102:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800410e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800411a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1d9      	bne.n	80040d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d013      	beq.n	8004152 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	4a8a      	ldr	r2, [pc, #552]	; (8004358 <HAL_UART_IRQHandler+0x410>)
 8004130:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe f9b3 	bl	80024a2 <HAL_DMA_Abort_IT>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800414c:	4610      	mov	r0, r2
 800414e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	e00e      	b.n	8004170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f9ac 	bl	80044b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	e00a      	b.n	8004170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f9a8 	bl	80044b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	e006      	b.n	8004170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f9a4 	bl	80044b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800416e:	e18d      	b.n	800448c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	bf00      	nop
    return;
 8004172:	e18b      	b.n	800448c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	2b01      	cmp	r3, #1
 800417a:	f040 8167 	bne.w	800444c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8160 	beq.w	800444c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8159 	beq.w	800444c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	f040 80ce 	bne.w	800435c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80a9 	beq.w	8004328 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041de:	429a      	cmp	r2, r3
 80041e0:	f080 80a2 	bcs.w	8004328 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f6:	f000 8088 	beq.w	800430a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004210:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004218:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004226:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800422a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004232:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800423e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1d9      	bne.n	80041fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3314      	adds	r3, #20
 800424c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3314      	adds	r3, #20
 8004266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800426a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800426e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800427c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e1      	bne.n	8004246 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004298:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e3      	bne.n	8004282 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042da:	f023 0310 	bic.w	r3, r3, #16
 80042de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80042ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e3      	bne.n	80042c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe f85c 	bl	80023c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004318:	b29b      	uxth	r3, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	b29b      	uxth	r3, r3
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8cf 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004326:	e0b3      	b.n	8004490 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800432c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004330:	429a      	cmp	r2, r3
 8004332:	f040 80ad 	bne.w	8004490 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004340:	f040 80a6 	bne.w	8004490 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	635a      	str	r2, [r3, #52]	; 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8b7 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
      return;
 8004356:	e09b      	b.n	8004490 <HAL_UART_IRQHandler+0x548>
 8004358:	080046c9 	.word	0x080046c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004364:	b29b      	uxth	r3, r3
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 808e 	beq.w	8004494 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8089 	beq.w	8004494 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80043a6:	647a      	str	r2, [r7, #68]	; 0x44
 80043a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e3      	bne.n	8004382 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	623b      	str	r3, [r7, #32]
   return(result);
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043de:	633a      	str	r2, [r7, #48]	; 0x30
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e3      	bne.n	80043ba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0310 	bic.w	r3, r3, #16
 8004416:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004424:	61fa      	str	r2, [r7, #28]
 8004426:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	69b9      	ldr	r1, [r7, #24]
 800442a:	69fa      	ldr	r2, [r7, #28]
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	617b      	str	r3, [r7, #20]
   return(result);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e3      	bne.n	8004400 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800443e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004442:	4619      	mov	r1, r3
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f83d 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800444a:	e023      	b.n	8004494 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800444c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_UART_IRQHandler+0x524>
 8004458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f940 	bl	80046ea <UART_Transmit_IT>
    return;
 800446a:	e014      	b.n	8004496 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800446c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00e      	beq.n	8004496 <HAL_UART_IRQHandler+0x54e>
 8004478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f980 	bl	800478a <UART_EndTransmit_IT>
    return;
 800448a:	e004      	b.n	8004496 <HAL_UART_IRQHandler+0x54e>
    return;
 800448c:	bf00      	nop
 800448e:	e002      	b.n	8004496 <HAL_UART_IRQHandler+0x54e>
      return;
 8004490:	bf00      	nop
 8004492:	e000      	b.n	8004496 <HAL_UART_IRQHandler+0x54e>
      return;
 8004494:	bf00      	nop
  }
}
 8004496:	37e8      	adds	r7, #232	; 0xe8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ec:	e03b      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d037      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f6:	f7fc ffe1 	bl	80014bc <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	6a3a      	ldr	r2, [r7, #32]
 8004502:	429a      	cmp	r2, r3
 8004504:	d302      	bcc.n	800450c <UART_WaitOnFlagUntilTimeout+0x30>
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e03a      	b.n	8004586 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d023      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b80      	cmp	r3, #128	; 0x80
 8004522:	d020      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d01d      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b08      	cmp	r3, #8
 8004536:	d116      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f857 	bl	8004602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2208      	movs	r2, #8
 8004558:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e00f      	b.n	8004586 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d0b4      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	4613      	mov	r3, r2
 800459a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2222      	movs	r2, #34	; 0x22
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004602:	b480      	push	{r7}
 8004604:	b095      	sub	sp, #84	; 0x54
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004620:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800462a:	643a      	str	r2, [r7, #64]	; 0x40
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004630:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e5      	bne.n	800460a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3314      	adds	r3, #20
 8004644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	61fb      	str	r3, [r7, #28]
   return(result);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	64bb      	str	r3, [r7, #72]	; 0x48
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3314      	adds	r3, #20
 800465c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800465e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e5      	bne.n	800463e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	2b01      	cmp	r3, #1
 8004678:	d119      	bne.n	80046ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	60bb      	str	r3, [r7, #8]
   return(result);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f023 0310 	bic.w	r3, r3, #16
 8004690:	647b      	str	r3, [r7, #68]	; 0x44
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800469a:	61ba      	str	r2, [r7, #24]
 800469c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6979      	ldr	r1, [r7, #20]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	613b      	str	r3, [r7, #16]
   return(result);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e5      	bne.n	800467a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046bc:	bf00      	nop
 80046be:	3754      	adds	r7, #84	; 0x54
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff fee7 	bl	80044b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b21      	cmp	r3, #33	; 0x21
 80046fc:	d13e      	bne.n	800477c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004706:	d114      	bne.n	8004732 <UART_Transmit_IT+0x48>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d110      	bne.n	8004732 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004724:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	1c9a      	adds	r2, r3, #2
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	621a      	str	r2, [r3, #32]
 8004730:	e008      	b.n	8004744 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	1c59      	adds	r1, r3, #1
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6211      	str	r1, [r2, #32]
 800473c:	781a      	ldrb	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29b      	uxth	r3, r3
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	4619      	mov	r1, r3
 8004752:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10f      	bne.n	8004778 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004766:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004776:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	e000      	b.n	800477e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800477c:	2302      	movs	r3, #2
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff fe76 	bl	800449c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b08c      	sub	sp, #48	; 0x30
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t *pdata16bits = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b22      	cmp	r3, #34	; 0x22
 80047d4:	f040 80aa 	bne.w	800492c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d115      	bne.n	800480e <UART_Receive_IT+0x54>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d111      	bne.n	800480e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	1c9a      	adds	r2, r3, #2
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	; 0x28
 800480c:	e024      	b.n	8004858 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d007      	beq.n	800482e <UART_Receive_IT+0x74>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <UART_Receive_IT+0x82>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	e008      	b.n	800484e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004848:	b2da      	uxtb	r2, r3
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29b      	uxth	r3, r3
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	4619      	mov	r1, r3
 8004866:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004868:	2b00      	cmp	r3, #0
 800486a:	d15d      	bne.n	8004928 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0220 	bic.w	r2, r2, #32
 800487a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800488a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d135      	bne.n	800491e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	613b      	str	r3, [r7, #16]
   return(result);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d8:	623a      	str	r2, [r7, #32]
 80048da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	69f9      	ldr	r1, [r7, #28]
 80048de:	6a3a      	ldr	r2, [r7, #32]
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e5      	bne.n	80048b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d10a      	bne.n	8004910 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fdd4 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
 800491c:	e002      	b.n	8004924 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc fa7e 	bl	8000e20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e002      	b.n	800492e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3730      	adds	r7, #48	; 0x30
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b0c0      	sub	sp, #256	; 0x100
 800493e:	af00      	add	r7, sp, #0
 8004940:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004954:	68d9      	ldr	r1, [r3, #12]
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	ea40 0301 	orr.w	r3, r0, r1
 8004960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	431a      	orrs	r2, r3
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	431a      	orrs	r2, r3
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004990:	f021 010c 	bic.w	r1, r1, #12
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800499e:	430b      	orrs	r3, r1
 80049a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b2:	6999      	ldr	r1, [r3, #24]
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	ea40 0301 	orr.w	r3, r0, r1
 80049be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b8f      	ldr	r3, [pc, #572]	; (8004c04 <UART_SetConfig+0x2cc>)
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d005      	beq.n	80049d8 <UART_SetConfig+0xa0>
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b8d      	ldr	r3, [pc, #564]	; (8004c08 <UART_SetConfig+0x2d0>)
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d104      	bne.n	80049e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049d8:	f7ff f860 	bl	8003a9c <HAL_RCC_GetPCLK2Freq>
 80049dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049e0:	e003      	b.n	80049ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049e2:	f7ff f847 	bl	8003a74 <HAL_RCC_GetPCLK1Freq>
 80049e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f4:	f040 810c 	bne.w	8004c10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	462b      	mov	r3, r5
 8004a0e:	1891      	adds	r1, r2, r2
 8004a10:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a12:	415b      	adcs	r3, r3
 8004a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	eb12 0801 	adds.w	r8, r2, r1
 8004a20:	4629      	mov	r1, r5
 8004a22:	eb43 0901 	adc.w	r9, r3, r1
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a3a:	4690      	mov	r8, r2
 8004a3c:	4699      	mov	r9, r3
 8004a3e:	4623      	mov	r3, r4
 8004a40:	eb18 0303 	adds.w	r3, r8, r3
 8004a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a48:	462b      	mov	r3, r5
 8004a4a:	eb49 0303 	adc.w	r3, r9, r3
 8004a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a66:	460b      	mov	r3, r1
 8004a68:	18db      	adds	r3, r3, r3
 8004a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	eb42 0303 	adc.w	r3, r2, r3
 8004a72:	657b      	str	r3, [r7, #84]	; 0x54
 8004a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a7c:	f7fb fc00 	bl	8000280 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004a86:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	011c      	lsls	r4, r3, #4
 8004a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	464b      	mov	r3, r9
 8004aa4:	1891      	adds	r1, r2, r2
 8004aa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004aa8:	415b      	adcs	r3, r3
 8004aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	eb43 0b01 	adc.w	fp, r3, r1
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ad0:	4692      	mov	sl, r2
 8004ad2:	469b      	mov	fp, r3
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8004ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ade:	464b      	mov	r3, r9
 8004ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004af4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004afc:	460b      	mov	r3, r1
 8004afe:	18db      	adds	r3, r3, r3
 8004b00:	643b      	str	r3, [r7, #64]	; 0x40
 8004b02:	4613      	mov	r3, r2
 8004b04:	eb42 0303 	adc.w	r3, r2, r3
 8004b08:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b12:	f7fb fbb5 	bl	8000280 <__aeabi_uldivmod>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	2264      	movs	r2, #100	; 0x64
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	1acb      	subs	r3, r1, r3
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004b34:	fba3 2302 	umull	r2, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b40:	441c      	add	r4, r3
 8004b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b54:	4642      	mov	r2, r8
 8004b56:	464b      	mov	r3, r9
 8004b58:	1891      	adds	r1, r2, r2
 8004b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b5c:	415b      	adcs	r3, r3
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b64:	4641      	mov	r1, r8
 8004b66:	1851      	adds	r1, r2, r1
 8004b68:	6339      	str	r1, [r7, #48]	; 0x30
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	414b      	adcs	r3, r1
 8004b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b7c:	4659      	mov	r1, fp
 8004b7e:	00cb      	lsls	r3, r1, #3
 8004b80:	4651      	mov	r1, sl
 8004b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b86:	4651      	mov	r1, sl
 8004b88:	00ca      	lsls	r2, r1, #3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4642      	mov	r2, r8
 8004b92:	189b      	adds	r3, r3, r2
 8004b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b98:	464b      	mov	r3, r9
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bb8:	460b      	mov	r3, r1
 8004bba:	18db      	adds	r3, r3, r3
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bce:	f7fb fb57 	bl	8000280 <__aeabi_uldivmod>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	2164      	movs	r1, #100	; 0x64
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	3332      	adds	r3, #50	; 0x32
 8004bea:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <UART_SetConfig+0x2d4>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	f003 0207 	and.w	r2, r3, #7
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4422      	add	r2, r4
 8004bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c00:	e106      	b.n	8004e10 <UART_SetConfig+0x4d8>
 8004c02:	bf00      	nop
 8004c04:	40011000 	.word	0x40011000
 8004c08:	40011400 	.word	0x40011400
 8004c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c22:	4642      	mov	r2, r8
 8004c24:	464b      	mov	r3, r9
 8004c26:	1891      	adds	r1, r2, r2
 8004c28:	6239      	str	r1, [r7, #32]
 8004c2a:	415b      	adcs	r3, r3
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c32:	4641      	mov	r1, r8
 8004c34:	1854      	adds	r4, r2, r1
 8004c36:	4649      	mov	r1, r9
 8004c38:	eb43 0501 	adc.w	r5, r3, r1
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	00eb      	lsls	r3, r5, #3
 8004c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c4a:	00e2      	lsls	r2, r4, #3
 8004c4c:	4614      	mov	r4, r2
 8004c4e:	461d      	mov	r5, r3
 8004c50:	4643      	mov	r3, r8
 8004c52:	18e3      	adds	r3, r4, r3
 8004c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c58:	464b      	mov	r3, r9
 8004c5a:	eb45 0303 	adc.w	r3, r5, r3
 8004c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c7e:	4629      	mov	r1, r5
 8004c80:	008b      	lsls	r3, r1, #2
 8004c82:	4621      	mov	r1, r4
 8004c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c88:	4621      	mov	r1, r4
 8004c8a:	008a      	lsls	r2, r1, #2
 8004c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c90:	f7fb faf6 	bl	8000280 <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4b60      	ldr	r3, [pc, #384]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	011c      	lsls	r4, r3, #4
 8004ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	1891      	adds	r1, r2, r2
 8004cba:	61b9      	str	r1, [r7, #24]
 8004cbc:	415b      	adcs	r3, r3
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	1851      	adds	r1, r2, r1
 8004cc8:	6139      	str	r1, [r7, #16]
 8004cca:	4649      	mov	r1, r9
 8004ccc:	414b      	adcs	r3, r1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	f04f 0300 	mov.w	r3, #0
 8004cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cdc:	4659      	mov	r1, fp
 8004cde:	00cb      	lsls	r3, r1, #3
 8004ce0:	4651      	mov	r1, sl
 8004ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ce6:	4651      	mov	r1, sl
 8004ce8:	00ca      	lsls	r2, r1, #3
 8004cea:	4610      	mov	r0, r2
 8004cec:	4619      	mov	r1, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cf8:	464b      	mov	r3, r9
 8004cfa:	460a      	mov	r2, r1
 8004cfc:	eb42 0303 	adc.w	r3, r2, r3
 8004d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	008b      	lsls	r3, r1, #2
 8004d20:	4641      	mov	r1, r8
 8004d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d26:	4641      	mov	r1, r8
 8004d28:	008a      	lsls	r2, r1, #2
 8004d2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d2e:	f7fb faa7 	bl	8000280 <__aeabi_uldivmod>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d3e:	095b      	lsrs	r3, r3, #5
 8004d40:	2264      	movs	r2, #100	; 0x64
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	1acb      	subs	r3, r1, r3
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	3332      	adds	r3, #50	; 0x32
 8004d4c:	4a33      	ldr	r2, [pc, #204]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d58:	441c      	add	r4, r3
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	673b      	str	r3, [r7, #112]	; 0x70
 8004d62:	677a      	str	r2, [r7, #116]	; 0x74
 8004d64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d68:	4642      	mov	r2, r8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	1891      	adds	r1, r2, r2
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	415b      	adcs	r3, r3
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d78:	4641      	mov	r1, r8
 8004d7a:	1851      	adds	r1, r2, r1
 8004d7c:	6039      	str	r1, [r7, #0]
 8004d7e:	4649      	mov	r1, r9
 8004d80:	414b      	adcs	r3, r1
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d90:	4659      	mov	r1, fp
 8004d92:	00cb      	lsls	r3, r1, #3
 8004d94:	4651      	mov	r1, sl
 8004d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	00ca      	lsls	r2, r1, #3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4619      	mov	r1, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	4642      	mov	r2, r8
 8004da6:	189b      	adds	r3, r3, r2
 8004da8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004daa:	464b      	mov	r3, r9
 8004dac:	460a      	mov	r2, r1
 8004dae:	eb42 0303 	adc.w	r3, r2, r3
 8004db2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dbe:	667a      	str	r2, [r7, #100]	; 0x64
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004dcc:	4649      	mov	r1, r9
 8004dce:	008b      	lsls	r3, r1, #2
 8004dd0:	4641      	mov	r1, r8
 8004dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	008a      	lsls	r2, r1, #2
 8004dda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dde:	f7fb fa4f 	bl	8000280 <__aeabi_uldivmod>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004de8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	2164      	movs	r1, #100	; 0x64
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	3332      	adds	r3, #50	; 0x32
 8004dfa:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <UART_SetConfig+0x4e4>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	f003 020f 	and.w	r2, r3, #15
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4422      	add	r2, r4
 8004e0e:	609a      	str	r2, [r3, #8]
}
 8004e10:	bf00      	nop
 8004e12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e16:	46bd      	mov	sp, r7
 8004e18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1c:	51eb851f 	.word	0x51eb851f

08004e20 <sniprintf>:
 8004e20:	b40c      	push	{r2, r3}
 8004e22:	b530      	push	{r4, r5, lr}
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <sniprintf+0x64>)
 8004e26:	1e0c      	subs	r4, r1, #0
 8004e28:	681d      	ldr	r5, [r3, #0]
 8004e2a:	b09d      	sub	sp, #116	; 0x74
 8004e2c:	da08      	bge.n	8004e40 <sniprintf+0x20>
 8004e2e:	238b      	movs	r3, #139	; 0x8b
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	f04f 30ff 	mov.w	r0, #4294967295
 8004e36:	b01d      	add	sp, #116	; 0x74
 8004e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e3c:	b002      	add	sp, #8
 8004e3e:	4770      	bx	lr
 8004e40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004e44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004e48:	bf14      	ite	ne
 8004e4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e4e:	4623      	moveq	r3, r4
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	9307      	str	r3, [sp, #28]
 8004e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e58:	9002      	str	r0, [sp, #8]
 8004e5a:	9006      	str	r0, [sp, #24]
 8004e5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004e60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e62:	ab21      	add	r3, sp, #132	; 0x84
 8004e64:	a902      	add	r1, sp, #8
 8004e66:	4628      	mov	r0, r5
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	f000 f9b5 	bl	80051d8 <_svfiprintf_r>
 8004e6e:	1c43      	adds	r3, r0, #1
 8004e70:	bfbc      	itt	lt
 8004e72:	238b      	movlt	r3, #139	; 0x8b
 8004e74:	602b      	strlt	r3, [r5, #0]
 8004e76:	2c00      	cmp	r4, #0
 8004e78:	d0dd      	beq.n	8004e36 <sniprintf+0x16>
 8004e7a:	9b02      	ldr	r3, [sp, #8]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	e7d9      	b.n	8004e36 <sniprintf+0x16>
 8004e82:	bf00      	nop
 8004e84:	20000070 	.word	0x20000070

08004e88 <memset>:
 8004e88:	4402      	add	r2, r0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d100      	bne.n	8004e92 <memset+0xa>
 8004e90:	4770      	bx	lr
 8004e92:	f803 1b01 	strb.w	r1, [r3], #1
 8004e96:	e7f9      	b.n	8004e8c <memset+0x4>

08004e98 <strncat>:
 8004e98:	b530      	push	{r4, r5, lr}
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	7825      	ldrb	r5, [r4, #0]
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	3401      	adds	r4, #1
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	d1fa      	bne.n	8004e9c <strncat+0x4>
 8004ea6:	3a01      	subs	r2, #1
 8004ea8:	d304      	bcc.n	8004eb4 <strncat+0x1c>
 8004eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eae:	f803 4b01 	strb.w	r4, [r3], #1
 8004eb2:	b904      	cbnz	r4, 8004eb6 <strncat+0x1e>
 8004eb4:	bd30      	pop	{r4, r5, pc}
 8004eb6:	2a00      	cmp	r2, #0
 8004eb8:	d1f5      	bne.n	8004ea6 <strncat+0xe>
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	e7f3      	b.n	8004ea6 <strncat+0xe>
	...

08004ec0 <__errno>:
 8004ec0:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <__errno+0x8>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000070 	.word	0x20000070

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4d0d      	ldr	r5, [pc, #52]	; (8004f04 <__libc_init_array+0x38>)
 8004ed0:	4c0d      	ldr	r4, [pc, #52]	; (8004f08 <__libc_init_array+0x3c>)
 8004ed2:	1b64      	subs	r4, r4, r5
 8004ed4:	10a4      	asrs	r4, r4, #2
 8004ed6:	2600      	movs	r6, #0
 8004ed8:	42a6      	cmp	r6, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	4d0b      	ldr	r5, [pc, #44]	; (8004f0c <__libc_init_array+0x40>)
 8004ede:	4c0c      	ldr	r4, [pc, #48]	; (8004f10 <__libc_init_array+0x44>)
 8004ee0:	f000 fc6a 	bl	80057b8 <_init>
 8004ee4:	1b64      	subs	r4, r4, r5
 8004ee6:	10a4      	asrs	r4, r4, #2
 8004ee8:	2600      	movs	r6, #0
 8004eea:	42a6      	cmp	r6, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef4:	4798      	blx	r3
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efe:	4798      	blx	r3
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	080058f8 	.word	0x080058f8
 8004f08:	080058f8 	.word	0x080058f8
 8004f0c:	080058f8 	.word	0x080058f8
 8004f10:	080058fc 	.word	0x080058fc

08004f14 <__retarget_lock_acquire_recursive>:
 8004f14:	4770      	bx	lr

08004f16 <__retarget_lock_release_recursive>:
 8004f16:	4770      	bx	lr

08004f18 <memcpy>:
 8004f18:	440a      	add	r2, r1
 8004f1a:	4291      	cmp	r1, r2
 8004f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f20:	d100      	bne.n	8004f24 <memcpy+0xc>
 8004f22:	4770      	bx	lr
 8004f24:	b510      	push	{r4, lr}
 8004f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f2e:	4291      	cmp	r1, r2
 8004f30:	d1f9      	bne.n	8004f26 <memcpy+0xe>
 8004f32:	bd10      	pop	{r4, pc}

08004f34 <_free_r>:
 8004f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f36:	2900      	cmp	r1, #0
 8004f38:	d044      	beq.n	8004fc4 <_free_r+0x90>
 8004f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3e:	9001      	str	r0, [sp, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f1a1 0404 	sub.w	r4, r1, #4
 8004f46:	bfb8      	it	lt
 8004f48:	18e4      	addlt	r4, r4, r3
 8004f4a:	f000 f8df 	bl	800510c <__malloc_lock>
 8004f4e:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <_free_r+0x94>)
 8004f50:	9801      	ldr	r0, [sp, #4]
 8004f52:	6813      	ldr	r3, [r2, #0]
 8004f54:	b933      	cbnz	r3, 8004f64 <_free_r+0x30>
 8004f56:	6063      	str	r3, [r4, #4]
 8004f58:	6014      	str	r4, [r2, #0]
 8004f5a:	b003      	add	sp, #12
 8004f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f60:	f000 b8da 	b.w	8005118 <__malloc_unlock>
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	d908      	bls.n	8004f7a <_free_r+0x46>
 8004f68:	6825      	ldr	r5, [r4, #0]
 8004f6a:	1961      	adds	r1, r4, r5
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	bf01      	itttt	eq
 8004f70:	6819      	ldreq	r1, [r3, #0]
 8004f72:	685b      	ldreq	r3, [r3, #4]
 8004f74:	1949      	addeq	r1, r1, r5
 8004f76:	6021      	streq	r1, [r4, #0]
 8004f78:	e7ed      	b.n	8004f56 <_free_r+0x22>
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	b10b      	cbz	r3, 8004f84 <_free_r+0x50>
 8004f80:	42a3      	cmp	r3, r4
 8004f82:	d9fa      	bls.n	8004f7a <_free_r+0x46>
 8004f84:	6811      	ldr	r1, [r2, #0]
 8004f86:	1855      	adds	r5, r2, r1
 8004f88:	42a5      	cmp	r5, r4
 8004f8a:	d10b      	bne.n	8004fa4 <_free_r+0x70>
 8004f8c:	6824      	ldr	r4, [r4, #0]
 8004f8e:	4421      	add	r1, r4
 8004f90:	1854      	adds	r4, r2, r1
 8004f92:	42a3      	cmp	r3, r4
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	d1e0      	bne.n	8004f5a <_free_r+0x26>
 8004f98:	681c      	ldr	r4, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	6053      	str	r3, [r2, #4]
 8004f9e:	440c      	add	r4, r1
 8004fa0:	6014      	str	r4, [r2, #0]
 8004fa2:	e7da      	b.n	8004f5a <_free_r+0x26>
 8004fa4:	d902      	bls.n	8004fac <_free_r+0x78>
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	6003      	str	r3, [r0, #0]
 8004faa:	e7d6      	b.n	8004f5a <_free_r+0x26>
 8004fac:	6825      	ldr	r5, [r4, #0]
 8004fae:	1961      	adds	r1, r4, r5
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	bf04      	itt	eq
 8004fb4:	6819      	ldreq	r1, [r3, #0]
 8004fb6:	685b      	ldreq	r3, [r3, #4]
 8004fb8:	6063      	str	r3, [r4, #4]
 8004fba:	bf04      	itt	eq
 8004fbc:	1949      	addeq	r1, r1, r5
 8004fbe:	6021      	streq	r1, [r4, #0]
 8004fc0:	6054      	str	r4, [r2, #4]
 8004fc2:	e7ca      	b.n	8004f5a <_free_r+0x26>
 8004fc4:	b003      	add	sp, #12
 8004fc6:	bd30      	pop	{r4, r5, pc}
 8004fc8:	200003b4 	.word	0x200003b4

08004fcc <sbrk_aligned>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4e0e      	ldr	r6, [pc, #56]	; (8005008 <sbrk_aligned+0x3c>)
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	6831      	ldr	r1, [r6, #0]
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	b911      	cbnz	r1, 8004fde <sbrk_aligned+0x12>
 8004fd8:	f000 fba6 	bl	8005728 <_sbrk_r>
 8004fdc:	6030      	str	r0, [r6, #0]
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 fba1 	bl	8005728 <_sbrk_r>
 8004fe6:	1c43      	adds	r3, r0, #1
 8004fe8:	d00a      	beq.n	8005000 <sbrk_aligned+0x34>
 8004fea:	1cc4      	adds	r4, r0, #3
 8004fec:	f024 0403 	bic.w	r4, r4, #3
 8004ff0:	42a0      	cmp	r0, r4
 8004ff2:	d007      	beq.n	8005004 <sbrk_aligned+0x38>
 8004ff4:	1a21      	subs	r1, r4, r0
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fb96 	bl	8005728 <_sbrk_r>
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d101      	bne.n	8005004 <sbrk_aligned+0x38>
 8005000:	f04f 34ff 	mov.w	r4, #4294967295
 8005004:	4620      	mov	r0, r4
 8005006:	bd70      	pop	{r4, r5, r6, pc}
 8005008:	200003b8 	.word	0x200003b8

0800500c <_malloc_r>:
 800500c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005010:	1ccd      	adds	r5, r1, #3
 8005012:	f025 0503 	bic.w	r5, r5, #3
 8005016:	3508      	adds	r5, #8
 8005018:	2d0c      	cmp	r5, #12
 800501a:	bf38      	it	cc
 800501c:	250c      	movcc	r5, #12
 800501e:	2d00      	cmp	r5, #0
 8005020:	4607      	mov	r7, r0
 8005022:	db01      	blt.n	8005028 <_malloc_r+0x1c>
 8005024:	42a9      	cmp	r1, r5
 8005026:	d905      	bls.n	8005034 <_malloc_r+0x28>
 8005028:	230c      	movs	r3, #12
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	2600      	movs	r6, #0
 800502e:	4630      	mov	r0, r6
 8005030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005034:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005108 <_malloc_r+0xfc>
 8005038:	f000 f868 	bl	800510c <__malloc_lock>
 800503c:	f8d8 3000 	ldr.w	r3, [r8]
 8005040:	461c      	mov	r4, r3
 8005042:	bb5c      	cbnz	r4, 800509c <_malloc_r+0x90>
 8005044:	4629      	mov	r1, r5
 8005046:	4638      	mov	r0, r7
 8005048:	f7ff ffc0 	bl	8004fcc <sbrk_aligned>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	4604      	mov	r4, r0
 8005050:	d155      	bne.n	80050fe <_malloc_r+0xf2>
 8005052:	f8d8 4000 	ldr.w	r4, [r8]
 8005056:	4626      	mov	r6, r4
 8005058:	2e00      	cmp	r6, #0
 800505a:	d145      	bne.n	80050e8 <_malloc_r+0xdc>
 800505c:	2c00      	cmp	r4, #0
 800505e:	d048      	beq.n	80050f2 <_malloc_r+0xe6>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	4631      	mov	r1, r6
 8005064:	4638      	mov	r0, r7
 8005066:	eb04 0903 	add.w	r9, r4, r3
 800506a:	f000 fb5d 	bl	8005728 <_sbrk_r>
 800506e:	4581      	cmp	r9, r0
 8005070:	d13f      	bne.n	80050f2 <_malloc_r+0xe6>
 8005072:	6821      	ldr	r1, [r4, #0]
 8005074:	1a6d      	subs	r5, r5, r1
 8005076:	4629      	mov	r1, r5
 8005078:	4638      	mov	r0, r7
 800507a:	f7ff ffa7 	bl	8004fcc <sbrk_aligned>
 800507e:	3001      	adds	r0, #1
 8005080:	d037      	beq.n	80050f2 <_malloc_r+0xe6>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	442b      	add	r3, r5
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	f8d8 3000 	ldr.w	r3, [r8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d038      	beq.n	8005102 <_malloc_r+0xf6>
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	42a2      	cmp	r2, r4
 8005094:	d12b      	bne.n	80050ee <_malloc_r+0xe2>
 8005096:	2200      	movs	r2, #0
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	e00f      	b.n	80050bc <_malloc_r+0xb0>
 800509c:	6822      	ldr	r2, [r4, #0]
 800509e:	1b52      	subs	r2, r2, r5
 80050a0:	d41f      	bmi.n	80050e2 <_malloc_r+0xd6>
 80050a2:	2a0b      	cmp	r2, #11
 80050a4:	d917      	bls.n	80050d6 <_malloc_r+0xca>
 80050a6:	1961      	adds	r1, r4, r5
 80050a8:	42a3      	cmp	r3, r4
 80050aa:	6025      	str	r5, [r4, #0]
 80050ac:	bf18      	it	ne
 80050ae:	6059      	strne	r1, [r3, #4]
 80050b0:	6863      	ldr	r3, [r4, #4]
 80050b2:	bf08      	it	eq
 80050b4:	f8c8 1000 	streq.w	r1, [r8]
 80050b8:	5162      	str	r2, [r4, r5]
 80050ba:	604b      	str	r3, [r1, #4]
 80050bc:	4638      	mov	r0, r7
 80050be:	f104 060b 	add.w	r6, r4, #11
 80050c2:	f000 f829 	bl	8005118 <__malloc_unlock>
 80050c6:	f026 0607 	bic.w	r6, r6, #7
 80050ca:	1d23      	adds	r3, r4, #4
 80050cc:	1af2      	subs	r2, r6, r3
 80050ce:	d0ae      	beq.n	800502e <_malloc_r+0x22>
 80050d0:	1b9b      	subs	r3, r3, r6
 80050d2:	50a3      	str	r3, [r4, r2]
 80050d4:	e7ab      	b.n	800502e <_malloc_r+0x22>
 80050d6:	42a3      	cmp	r3, r4
 80050d8:	6862      	ldr	r2, [r4, #4]
 80050da:	d1dd      	bne.n	8005098 <_malloc_r+0x8c>
 80050dc:	f8c8 2000 	str.w	r2, [r8]
 80050e0:	e7ec      	b.n	80050bc <_malloc_r+0xb0>
 80050e2:	4623      	mov	r3, r4
 80050e4:	6864      	ldr	r4, [r4, #4]
 80050e6:	e7ac      	b.n	8005042 <_malloc_r+0x36>
 80050e8:	4634      	mov	r4, r6
 80050ea:	6876      	ldr	r6, [r6, #4]
 80050ec:	e7b4      	b.n	8005058 <_malloc_r+0x4c>
 80050ee:	4613      	mov	r3, r2
 80050f0:	e7cc      	b.n	800508c <_malloc_r+0x80>
 80050f2:	230c      	movs	r3, #12
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	4638      	mov	r0, r7
 80050f8:	f000 f80e 	bl	8005118 <__malloc_unlock>
 80050fc:	e797      	b.n	800502e <_malloc_r+0x22>
 80050fe:	6025      	str	r5, [r4, #0]
 8005100:	e7dc      	b.n	80050bc <_malloc_r+0xb0>
 8005102:	605b      	str	r3, [r3, #4]
 8005104:	deff      	udf	#255	; 0xff
 8005106:	bf00      	nop
 8005108:	200003b4 	.word	0x200003b4

0800510c <__malloc_lock>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__malloc_lock+0x8>)
 800510e:	f7ff bf01 	b.w	8004f14 <__retarget_lock_acquire_recursive>
 8005112:	bf00      	nop
 8005114:	200003b0 	.word	0x200003b0

08005118 <__malloc_unlock>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__malloc_unlock+0x8>)
 800511a:	f7ff befc 	b.w	8004f16 <__retarget_lock_release_recursive>
 800511e:	bf00      	nop
 8005120:	200003b0 	.word	0x200003b0

08005124 <__ssputs_r>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	688e      	ldr	r6, [r1, #8]
 800512a:	461f      	mov	r7, r3
 800512c:	42be      	cmp	r6, r7
 800512e:	680b      	ldr	r3, [r1, #0]
 8005130:	4682      	mov	sl, r0
 8005132:	460c      	mov	r4, r1
 8005134:	4690      	mov	r8, r2
 8005136:	d82c      	bhi.n	8005192 <__ssputs_r+0x6e>
 8005138:	898a      	ldrh	r2, [r1, #12]
 800513a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800513e:	d026      	beq.n	800518e <__ssputs_r+0x6a>
 8005140:	6965      	ldr	r5, [r4, #20]
 8005142:	6909      	ldr	r1, [r1, #16]
 8005144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005148:	eba3 0901 	sub.w	r9, r3, r1
 800514c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005150:	1c7b      	adds	r3, r7, #1
 8005152:	444b      	add	r3, r9
 8005154:	106d      	asrs	r5, r5, #1
 8005156:	429d      	cmp	r5, r3
 8005158:	bf38      	it	cc
 800515a:	461d      	movcc	r5, r3
 800515c:	0553      	lsls	r3, r2, #21
 800515e:	d527      	bpl.n	80051b0 <__ssputs_r+0x8c>
 8005160:	4629      	mov	r1, r5
 8005162:	f7ff ff53 	bl	800500c <_malloc_r>
 8005166:	4606      	mov	r6, r0
 8005168:	b360      	cbz	r0, 80051c4 <__ssputs_r+0xa0>
 800516a:	6921      	ldr	r1, [r4, #16]
 800516c:	464a      	mov	r2, r9
 800516e:	f7ff fed3 	bl	8004f18 <memcpy>
 8005172:	89a3      	ldrh	r3, [r4, #12]
 8005174:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	6126      	str	r6, [r4, #16]
 8005180:	6165      	str	r5, [r4, #20]
 8005182:	444e      	add	r6, r9
 8005184:	eba5 0509 	sub.w	r5, r5, r9
 8005188:	6026      	str	r6, [r4, #0]
 800518a:	60a5      	str	r5, [r4, #8]
 800518c:	463e      	mov	r6, r7
 800518e:	42be      	cmp	r6, r7
 8005190:	d900      	bls.n	8005194 <__ssputs_r+0x70>
 8005192:	463e      	mov	r6, r7
 8005194:	6820      	ldr	r0, [r4, #0]
 8005196:	4632      	mov	r2, r6
 8005198:	4641      	mov	r1, r8
 800519a:	f000 faab 	bl	80056f4 <memmove>
 800519e:	68a3      	ldr	r3, [r4, #8]
 80051a0:	1b9b      	subs	r3, r3, r6
 80051a2:	60a3      	str	r3, [r4, #8]
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	4433      	add	r3, r6
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	2000      	movs	r0, #0
 80051ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b0:	462a      	mov	r2, r5
 80051b2:	f000 fac9 	bl	8005748 <_realloc_r>
 80051b6:	4606      	mov	r6, r0
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d1e0      	bne.n	800517e <__ssputs_r+0x5a>
 80051bc:	6921      	ldr	r1, [r4, #16]
 80051be:	4650      	mov	r0, sl
 80051c0:	f7ff feb8 	bl	8004f34 <_free_r>
 80051c4:	230c      	movs	r3, #12
 80051c6:	f8ca 3000 	str.w	r3, [sl]
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d0:	81a3      	strh	r3, [r4, #12]
 80051d2:	f04f 30ff 	mov.w	r0, #4294967295
 80051d6:	e7e9      	b.n	80051ac <__ssputs_r+0x88>

080051d8 <_svfiprintf_r>:
 80051d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051dc:	4698      	mov	r8, r3
 80051de:	898b      	ldrh	r3, [r1, #12]
 80051e0:	061b      	lsls	r3, r3, #24
 80051e2:	b09d      	sub	sp, #116	; 0x74
 80051e4:	4607      	mov	r7, r0
 80051e6:	460d      	mov	r5, r1
 80051e8:	4614      	mov	r4, r2
 80051ea:	d50e      	bpl.n	800520a <_svfiprintf_r+0x32>
 80051ec:	690b      	ldr	r3, [r1, #16]
 80051ee:	b963      	cbnz	r3, 800520a <_svfiprintf_r+0x32>
 80051f0:	2140      	movs	r1, #64	; 0x40
 80051f2:	f7ff ff0b 	bl	800500c <_malloc_r>
 80051f6:	6028      	str	r0, [r5, #0]
 80051f8:	6128      	str	r0, [r5, #16]
 80051fa:	b920      	cbnz	r0, 8005206 <_svfiprintf_r+0x2e>
 80051fc:	230c      	movs	r3, #12
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	e0d0      	b.n	80053a8 <_svfiprintf_r+0x1d0>
 8005206:	2340      	movs	r3, #64	; 0x40
 8005208:	616b      	str	r3, [r5, #20]
 800520a:	2300      	movs	r3, #0
 800520c:	9309      	str	r3, [sp, #36]	; 0x24
 800520e:	2320      	movs	r3, #32
 8005210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005214:	f8cd 800c 	str.w	r8, [sp, #12]
 8005218:	2330      	movs	r3, #48	; 0x30
 800521a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053c0 <_svfiprintf_r+0x1e8>
 800521e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005222:	f04f 0901 	mov.w	r9, #1
 8005226:	4623      	mov	r3, r4
 8005228:	469a      	mov	sl, r3
 800522a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800522e:	b10a      	cbz	r2, 8005234 <_svfiprintf_r+0x5c>
 8005230:	2a25      	cmp	r2, #37	; 0x25
 8005232:	d1f9      	bne.n	8005228 <_svfiprintf_r+0x50>
 8005234:	ebba 0b04 	subs.w	fp, sl, r4
 8005238:	d00b      	beq.n	8005252 <_svfiprintf_r+0x7a>
 800523a:	465b      	mov	r3, fp
 800523c:	4622      	mov	r2, r4
 800523e:	4629      	mov	r1, r5
 8005240:	4638      	mov	r0, r7
 8005242:	f7ff ff6f 	bl	8005124 <__ssputs_r>
 8005246:	3001      	adds	r0, #1
 8005248:	f000 80a9 	beq.w	800539e <_svfiprintf_r+0x1c6>
 800524c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800524e:	445a      	add	r2, fp
 8005250:	9209      	str	r2, [sp, #36]	; 0x24
 8005252:	f89a 3000 	ldrb.w	r3, [sl]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80a1 	beq.w	800539e <_svfiprintf_r+0x1c6>
 800525c:	2300      	movs	r3, #0
 800525e:	f04f 32ff 	mov.w	r2, #4294967295
 8005262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005266:	f10a 0a01 	add.w	sl, sl, #1
 800526a:	9304      	str	r3, [sp, #16]
 800526c:	9307      	str	r3, [sp, #28]
 800526e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005272:	931a      	str	r3, [sp, #104]	; 0x68
 8005274:	4654      	mov	r4, sl
 8005276:	2205      	movs	r2, #5
 8005278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800527c:	4850      	ldr	r0, [pc, #320]	; (80053c0 <_svfiprintf_r+0x1e8>)
 800527e:	f7fa ffaf 	bl	80001e0 <memchr>
 8005282:	9a04      	ldr	r2, [sp, #16]
 8005284:	b9d8      	cbnz	r0, 80052be <_svfiprintf_r+0xe6>
 8005286:	06d0      	lsls	r0, r2, #27
 8005288:	bf44      	itt	mi
 800528a:	2320      	movmi	r3, #32
 800528c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005290:	0711      	lsls	r1, r2, #28
 8005292:	bf44      	itt	mi
 8005294:	232b      	movmi	r3, #43	; 0x2b
 8005296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800529a:	f89a 3000 	ldrb.w	r3, [sl]
 800529e:	2b2a      	cmp	r3, #42	; 0x2a
 80052a0:	d015      	beq.n	80052ce <_svfiprintf_r+0xf6>
 80052a2:	9a07      	ldr	r2, [sp, #28]
 80052a4:	4654      	mov	r4, sl
 80052a6:	2000      	movs	r0, #0
 80052a8:	f04f 0c0a 	mov.w	ip, #10
 80052ac:	4621      	mov	r1, r4
 80052ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052b2:	3b30      	subs	r3, #48	; 0x30
 80052b4:	2b09      	cmp	r3, #9
 80052b6:	d94d      	bls.n	8005354 <_svfiprintf_r+0x17c>
 80052b8:	b1b0      	cbz	r0, 80052e8 <_svfiprintf_r+0x110>
 80052ba:	9207      	str	r2, [sp, #28]
 80052bc:	e014      	b.n	80052e8 <_svfiprintf_r+0x110>
 80052be:	eba0 0308 	sub.w	r3, r0, r8
 80052c2:	fa09 f303 	lsl.w	r3, r9, r3
 80052c6:	4313      	orrs	r3, r2
 80052c8:	9304      	str	r3, [sp, #16]
 80052ca:	46a2      	mov	sl, r4
 80052cc:	e7d2      	b.n	8005274 <_svfiprintf_r+0x9c>
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	1d19      	adds	r1, r3, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	9103      	str	r1, [sp, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bfbb      	ittet	lt
 80052da:	425b      	neglt	r3, r3
 80052dc:	f042 0202 	orrlt.w	r2, r2, #2
 80052e0:	9307      	strge	r3, [sp, #28]
 80052e2:	9307      	strlt	r3, [sp, #28]
 80052e4:	bfb8      	it	lt
 80052e6:	9204      	strlt	r2, [sp, #16]
 80052e8:	7823      	ldrb	r3, [r4, #0]
 80052ea:	2b2e      	cmp	r3, #46	; 0x2e
 80052ec:	d10c      	bne.n	8005308 <_svfiprintf_r+0x130>
 80052ee:	7863      	ldrb	r3, [r4, #1]
 80052f0:	2b2a      	cmp	r3, #42	; 0x2a
 80052f2:	d134      	bne.n	800535e <_svfiprintf_r+0x186>
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	1d1a      	adds	r2, r3, #4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	9203      	str	r2, [sp, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	bfb8      	it	lt
 8005300:	f04f 33ff 	movlt.w	r3, #4294967295
 8005304:	3402      	adds	r4, #2
 8005306:	9305      	str	r3, [sp, #20]
 8005308:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80053d0 <_svfiprintf_r+0x1f8>
 800530c:	7821      	ldrb	r1, [r4, #0]
 800530e:	2203      	movs	r2, #3
 8005310:	4650      	mov	r0, sl
 8005312:	f7fa ff65 	bl	80001e0 <memchr>
 8005316:	b138      	cbz	r0, 8005328 <_svfiprintf_r+0x150>
 8005318:	9b04      	ldr	r3, [sp, #16]
 800531a:	eba0 000a 	sub.w	r0, r0, sl
 800531e:	2240      	movs	r2, #64	; 0x40
 8005320:	4082      	lsls	r2, r0
 8005322:	4313      	orrs	r3, r2
 8005324:	3401      	adds	r4, #1
 8005326:	9304      	str	r3, [sp, #16]
 8005328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800532c:	4825      	ldr	r0, [pc, #148]	; (80053c4 <_svfiprintf_r+0x1ec>)
 800532e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005332:	2206      	movs	r2, #6
 8005334:	f7fa ff54 	bl	80001e0 <memchr>
 8005338:	2800      	cmp	r0, #0
 800533a:	d038      	beq.n	80053ae <_svfiprintf_r+0x1d6>
 800533c:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <_svfiprintf_r+0x1f0>)
 800533e:	bb1b      	cbnz	r3, 8005388 <_svfiprintf_r+0x1b0>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	3307      	adds	r3, #7
 8005344:	f023 0307 	bic.w	r3, r3, #7
 8005348:	3308      	adds	r3, #8
 800534a:	9303      	str	r3, [sp, #12]
 800534c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800534e:	4433      	add	r3, r6
 8005350:	9309      	str	r3, [sp, #36]	; 0x24
 8005352:	e768      	b.n	8005226 <_svfiprintf_r+0x4e>
 8005354:	fb0c 3202 	mla	r2, ip, r2, r3
 8005358:	460c      	mov	r4, r1
 800535a:	2001      	movs	r0, #1
 800535c:	e7a6      	b.n	80052ac <_svfiprintf_r+0xd4>
 800535e:	2300      	movs	r3, #0
 8005360:	3401      	adds	r4, #1
 8005362:	9305      	str	r3, [sp, #20]
 8005364:	4619      	mov	r1, r3
 8005366:	f04f 0c0a 	mov.w	ip, #10
 800536a:	4620      	mov	r0, r4
 800536c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005370:	3a30      	subs	r2, #48	; 0x30
 8005372:	2a09      	cmp	r2, #9
 8005374:	d903      	bls.n	800537e <_svfiprintf_r+0x1a6>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0c6      	beq.n	8005308 <_svfiprintf_r+0x130>
 800537a:	9105      	str	r1, [sp, #20]
 800537c:	e7c4      	b.n	8005308 <_svfiprintf_r+0x130>
 800537e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005382:	4604      	mov	r4, r0
 8005384:	2301      	movs	r3, #1
 8005386:	e7f0      	b.n	800536a <_svfiprintf_r+0x192>
 8005388:	ab03      	add	r3, sp, #12
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	462a      	mov	r2, r5
 800538e:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <_svfiprintf_r+0x1f4>)
 8005390:	a904      	add	r1, sp, #16
 8005392:	4638      	mov	r0, r7
 8005394:	f3af 8000 	nop.w
 8005398:	1c42      	adds	r2, r0, #1
 800539a:	4606      	mov	r6, r0
 800539c:	d1d6      	bne.n	800534c <_svfiprintf_r+0x174>
 800539e:	89ab      	ldrh	r3, [r5, #12]
 80053a0:	065b      	lsls	r3, r3, #25
 80053a2:	f53f af2d 	bmi.w	8005200 <_svfiprintf_r+0x28>
 80053a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053a8:	b01d      	add	sp, #116	; 0x74
 80053aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	ab03      	add	r3, sp, #12
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	462a      	mov	r2, r5
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <_svfiprintf_r+0x1f4>)
 80053b6:	a904      	add	r1, sp, #16
 80053b8:	4638      	mov	r0, r7
 80053ba:	f000 f879 	bl	80054b0 <_printf_i>
 80053be:	e7eb      	b.n	8005398 <_svfiprintf_r+0x1c0>
 80053c0:	080058bc 	.word	0x080058bc
 80053c4:	080058c6 	.word	0x080058c6
 80053c8:	00000000 	.word	0x00000000
 80053cc:	08005125 	.word	0x08005125
 80053d0:	080058c2 	.word	0x080058c2

080053d4 <_printf_common>:
 80053d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d8:	4616      	mov	r6, r2
 80053da:	4699      	mov	r9, r3
 80053dc:	688a      	ldr	r2, [r1, #8]
 80053de:	690b      	ldr	r3, [r1, #16]
 80053e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053e4:	4293      	cmp	r3, r2
 80053e6:	bfb8      	it	lt
 80053e8:	4613      	movlt	r3, r2
 80053ea:	6033      	str	r3, [r6, #0]
 80053ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053f0:	4607      	mov	r7, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	b10a      	cbz	r2, 80053fa <_printf_common+0x26>
 80053f6:	3301      	adds	r3, #1
 80053f8:	6033      	str	r3, [r6, #0]
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	0699      	lsls	r1, r3, #26
 80053fe:	bf42      	ittt	mi
 8005400:	6833      	ldrmi	r3, [r6, #0]
 8005402:	3302      	addmi	r3, #2
 8005404:	6033      	strmi	r3, [r6, #0]
 8005406:	6825      	ldr	r5, [r4, #0]
 8005408:	f015 0506 	ands.w	r5, r5, #6
 800540c:	d106      	bne.n	800541c <_printf_common+0x48>
 800540e:	f104 0a19 	add.w	sl, r4, #25
 8005412:	68e3      	ldr	r3, [r4, #12]
 8005414:	6832      	ldr	r2, [r6, #0]
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	42ab      	cmp	r3, r5
 800541a:	dc26      	bgt.n	800546a <_printf_common+0x96>
 800541c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005420:	1e13      	subs	r3, r2, #0
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	bf18      	it	ne
 8005426:	2301      	movne	r3, #1
 8005428:	0692      	lsls	r2, r2, #26
 800542a:	d42b      	bmi.n	8005484 <_printf_common+0xb0>
 800542c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005430:	4649      	mov	r1, r9
 8005432:	4638      	mov	r0, r7
 8005434:	47c0      	blx	r8
 8005436:	3001      	adds	r0, #1
 8005438:	d01e      	beq.n	8005478 <_printf_common+0xa4>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	6922      	ldr	r2, [r4, #16]
 800543e:	f003 0306 	and.w	r3, r3, #6
 8005442:	2b04      	cmp	r3, #4
 8005444:	bf02      	ittt	eq
 8005446:	68e5      	ldreq	r5, [r4, #12]
 8005448:	6833      	ldreq	r3, [r6, #0]
 800544a:	1aed      	subeq	r5, r5, r3
 800544c:	68a3      	ldr	r3, [r4, #8]
 800544e:	bf0c      	ite	eq
 8005450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005454:	2500      	movne	r5, #0
 8005456:	4293      	cmp	r3, r2
 8005458:	bfc4      	itt	gt
 800545a:	1a9b      	subgt	r3, r3, r2
 800545c:	18ed      	addgt	r5, r5, r3
 800545e:	2600      	movs	r6, #0
 8005460:	341a      	adds	r4, #26
 8005462:	42b5      	cmp	r5, r6
 8005464:	d11a      	bne.n	800549c <_printf_common+0xc8>
 8005466:	2000      	movs	r0, #0
 8005468:	e008      	b.n	800547c <_printf_common+0xa8>
 800546a:	2301      	movs	r3, #1
 800546c:	4652      	mov	r2, sl
 800546e:	4649      	mov	r1, r9
 8005470:	4638      	mov	r0, r7
 8005472:	47c0      	blx	r8
 8005474:	3001      	adds	r0, #1
 8005476:	d103      	bne.n	8005480 <_printf_common+0xac>
 8005478:	f04f 30ff 	mov.w	r0, #4294967295
 800547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005480:	3501      	adds	r5, #1
 8005482:	e7c6      	b.n	8005412 <_printf_common+0x3e>
 8005484:	18e1      	adds	r1, r4, r3
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	2030      	movs	r0, #48	; 0x30
 800548a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800548e:	4422      	add	r2, r4
 8005490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005498:	3302      	adds	r3, #2
 800549a:	e7c7      	b.n	800542c <_printf_common+0x58>
 800549c:	2301      	movs	r3, #1
 800549e:	4622      	mov	r2, r4
 80054a0:	4649      	mov	r1, r9
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c0      	blx	r8
 80054a6:	3001      	adds	r0, #1
 80054a8:	d0e6      	beq.n	8005478 <_printf_common+0xa4>
 80054aa:	3601      	adds	r6, #1
 80054ac:	e7d9      	b.n	8005462 <_printf_common+0x8e>
	...

080054b0 <_printf_i>:
 80054b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054b4:	7e0f      	ldrb	r7, [r1, #24]
 80054b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054b8:	2f78      	cmp	r7, #120	; 0x78
 80054ba:	4691      	mov	r9, r2
 80054bc:	4680      	mov	r8, r0
 80054be:	460c      	mov	r4, r1
 80054c0:	469a      	mov	sl, r3
 80054c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054c6:	d807      	bhi.n	80054d8 <_printf_i+0x28>
 80054c8:	2f62      	cmp	r7, #98	; 0x62
 80054ca:	d80a      	bhi.n	80054e2 <_printf_i+0x32>
 80054cc:	2f00      	cmp	r7, #0
 80054ce:	f000 80d4 	beq.w	800567a <_printf_i+0x1ca>
 80054d2:	2f58      	cmp	r7, #88	; 0x58
 80054d4:	f000 80c0 	beq.w	8005658 <_printf_i+0x1a8>
 80054d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054e0:	e03a      	b.n	8005558 <_printf_i+0xa8>
 80054e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054e6:	2b15      	cmp	r3, #21
 80054e8:	d8f6      	bhi.n	80054d8 <_printf_i+0x28>
 80054ea:	a101      	add	r1, pc, #4	; (adr r1, 80054f0 <_printf_i+0x40>)
 80054ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054f0:	08005549 	.word	0x08005549
 80054f4:	0800555d 	.word	0x0800555d
 80054f8:	080054d9 	.word	0x080054d9
 80054fc:	080054d9 	.word	0x080054d9
 8005500:	080054d9 	.word	0x080054d9
 8005504:	080054d9 	.word	0x080054d9
 8005508:	0800555d 	.word	0x0800555d
 800550c:	080054d9 	.word	0x080054d9
 8005510:	080054d9 	.word	0x080054d9
 8005514:	080054d9 	.word	0x080054d9
 8005518:	080054d9 	.word	0x080054d9
 800551c:	08005661 	.word	0x08005661
 8005520:	08005589 	.word	0x08005589
 8005524:	0800561b 	.word	0x0800561b
 8005528:	080054d9 	.word	0x080054d9
 800552c:	080054d9 	.word	0x080054d9
 8005530:	08005683 	.word	0x08005683
 8005534:	080054d9 	.word	0x080054d9
 8005538:	08005589 	.word	0x08005589
 800553c:	080054d9 	.word	0x080054d9
 8005540:	080054d9 	.word	0x080054d9
 8005544:	08005623 	.word	0x08005623
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	1d1a      	adds	r2, r3, #4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	602a      	str	r2, [r5, #0]
 8005550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005558:	2301      	movs	r3, #1
 800555a:	e09f      	b.n	800569c <_printf_i+0x1ec>
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	682b      	ldr	r3, [r5, #0]
 8005560:	0607      	lsls	r7, r0, #24
 8005562:	f103 0104 	add.w	r1, r3, #4
 8005566:	6029      	str	r1, [r5, #0]
 8005568:	d501      	bpl.n	800556e <_printf_i+0xbe>
 800556a:	681e      	ldr	r6, [r3, #0]
 800556c:	e003      	b.n	8005576 <_printf_i+0xc6>
 800556e:	0646      	lsls	r6, r0, #25
 8005570:	d5fb      	bpl.n	800556a <_printf_i+0xba>
 8005572:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005576:	2e00      	cmp	r6, #0
 8005578:	da03      	bge.n	8005582 <_printf_i+0xd2>
 800557a:	232d      	movs	r3, #45	; 0x2d
 800557c:	4276      	negs	r6, r6
 800557e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005582:	485a      	ldr	r0, [pc, #360]	; (80056ec <_printf_i+0x23c>)
 8005584:	230a      	movs	r3, #10
 8005586:	e012      	b.n	80055ae <_printf_i+0xfe>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	6820      	ldr	r0, [r4, #0]
 800558c:	1d19      	adds	r1, r3, #4
 800558e:	6029      	str	r1, [r5, #0]
 8005590:	0605      	lsls	r5, r0, #24
 8005592:	d501      	bpl.n	8005598 <_printf_i+0xe8>
 8005594:	681e      	ldr	r6, [r3, #0]
 8005596:	e002      	b.n	800559e <_printf_i+0xee>
 8005598:	0641      	lsls	r1, r0, #25
 800559a:	d5fb      	bpl.n	8005594 <_printf_i+0xe4>
 800559c:	881e      	ldrh	r6, [r3, #0]
 800559e:	4853      	ldr	r0, [pc, #332]	; (80056ec <_printf_i+0x23c>)
 80055a0:	2f6f      	cmp	r7, #111	; 0x6f
 80055a2:	bf0c      	ite	eq
 80055a4:	2308      	moveq	r3, #8
 80055a6:	230a      	movne	r3, #10
 80055a8:	2100      	movs	r1, #0
 80055aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ae:	6865      	ldr	r5, [r4, #4]
 80055b0:	60a5      	str	r5, [r4, #8]
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	bfa2      	ittt	ge
 80055b6:	6821      	ldrge	r1, [r4, #0]
 80055b8:	f021 0104 	bicge.w	r1, r1, #4
 80055bc:	6021      	strge	r1, [r4, #0]
 80055be:	b90e      	cbnz	r6, 80055c4 <_printf_i+0x114>
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	d04b      	beq.n	800565c <_printf_i+0x1ac>
 80055c4:	4615      	mov	r5, r2
 80055c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80055ca:	fb03 6711 	mls	r7, r3, r1, r6
 80055ce:	5dc7      	ldrb	r7, [r0, r7]
 80055d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055d4:	4637      	mov	r7, r6
 80055d6:	42bb      	cmp	r3, r7
 80055d8:	460e      	mov	r6, r1
 80055da:	d9f4      	bls.n	80055c6 <_printf_i+0x116>
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d10b      	bne.n	80055f8 <_printf_i+0x148>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	07de      	lsls	r6, r3, #31
 80055e4:	d508      	bpl.n	80055f8 <_printf_i+0x148>
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	6861      	ldr	r1, [r4, #4]
 80055ea:	4299      	cmp	r1, r3
 80055ec:	bfde      	ittt	le
 80055ee:	2330      	movle	r3, #48	; 0x30
 80055f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055f8:	1b52      	subs	r2, r2, r5
 80055fa:	6122      	str	r2, [r4, #16]
 80055fc:	f8cd a000 	str.w	sl, [sp]
 8005600:	464b      	mov	r3, r9
 8005602:	aa03      	add	r2, sp, #12
 8005604:	4621      	mov	r1, r4
 8005606:	4640      	mov	r0, r8
 8005608:	f7ff fee4 	bl	80053d4 <_printf_common>
 800560c:	3001      	adds	r0, #1
 800560e:	d14a      	bne.n	80056a6 <_printf_i+0x1f6>
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	b004      	add	sp, #16
 8005616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	f043 0320 	orr.w	r3, r3, #32
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	4833      	ldr	r0, [pc, #204]	; (80056f0 <_printf_i+0x240>)
 8005624:	2778      	movs	r7, #120	; 0x78
 8005626:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	6829      	ldr	r1, [r5, #0]
 800562e:	061f      	lsls	r7, r3, #24
 8005630:	f851 6b04 	ldr.w	r6, [r1], #4
 8005634:	d402      	bmi.n	800563c <_printf_i+0x18c>
 8005636:	065f      	lsls	r7, r3, #25
 8005638:	bf48      	it	mi
 800563a:	b2b6      	uxthmi	r6, r6
 800563c:	07df      	lsls	r7, r3, #31
 800563e:	bf48      	it	mi
 8005640:	f043 0320 	orrmi.w	r3, r3, #32
 8005644:	6029      	str	r1, [r5, #0]
 8005646:	bf48      	it	mi
 8005648:	6023      	strmi	r3, [r4, #0]
 800564a:	b91e      	cbnz	r6, 8005654 <_printf_i+0x1a4>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	f023 0320 	bic.w	r3, r3, #32
 8005652:	6023      	str	r3, [r4, #0]
 8005654:	2310      	movs	r3, #16
 8005656:	e7a7      	b.n	80055a8 <_printf_i+0xf8>
 8005658:	4824      	ldr	r0, [pc, #144]	; (80056ec <_printf_i+0x23c>)
 800565a:	e7e4      	b.n	8005626 <_printf_i+0x176>
 800565c:	4615      	mov	r5, r2
 800565e:	e7bd      	b.n	80055dc <_printf_i+0x12c>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	6826      	ldr	r6, [r4, #0]
 8005664:	6961      	ldr	r1, [r4, #20]
 8005666:	1d18      	adds	r0, r3, #4
 8005668:	6028      	str	r0, [r5, #0]
 800566a:	0635      	lsls	r5, r6, #24
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	d501      	bpl.n	8005674 <_printf_i+0x1c4>
 8005670:	6019      	str	r1, [r3, #0]
 8005672:	e002      	b.n	800567a <_printf_i+0x1ca>
 8005674:	0670      	lsls	r0, r6, #25
 8005676:	d5fb      	bpl.n	8005670 <_printf_i+0x1c0>
 8005678:	8019      	strh	r1, [r3, #0]
 800567a:	2300      	movs	r3, #0
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	4615      	mov	r5, r2
 8005680:	e7bc      	b.n	80055fc <_printf_i+0x14c>
 8005682:	682b      	ldr	r3, [r5, #0]
 8005684:	1d1a      	adds	r2, r3, #4
 8005686:	602a      	str	r2, [r5, #0]
 8005688:	681d      	ldr	r5, [r3, #0]
 800568a:	6862      	ldr	r2, [r4, #4]
 800568c:	2100      	movs	r1, #0
 800568e:	4628      	mov	r0, r5
 8005690:	f7fa fda6 	bl	80001e0 <memchr>
 8005694:	b108      	cbz	r0, 800569a <_printf_i+0x1ea>
 8005696:	1b40      	subs	r0, r0, r5
 8005698:	6060      	str	r0, [r4, #4]
 800569a:	6863      	ldr	r3, [r4, #4]
 800569c:	6123      	str	r3, [r4, #16]
 800569e:	2300      	movs	r3, #0
 80056a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a4:	e7aa      	b.n	80055fc <_printf_i+0x14c>
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	462a      	mov	r2, r5
 80056aa:	4649      	mov	r1, r9
 80056ac:	4640      	mov	r0, r8
 80056ae:	47d0      	blx	sl
 80056b0:	3001      	adds	r0, #1
 80056b2:	d0ad      	beq.n	8005610 <_printf_i+0x160>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	079b      	lsls	r3, r3, #30
 80056b8:	d413      	bmi.n	80056e2 <_printf_i+0x232>
 80056ba:	68e0      	ldr	r0, [r4, #12]
 80056bc:	9b03      	ldr	r3, [sp, #12]
 80056be:	4298      	cmp	r0, r3
 80056c0:	bfb8      	it	lt
 80056c2:	4618      	movlt	r0, r3
 80056c4:	e7a6      	b.n	8005614 <_printf_i+0x164>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4632      	mov	r2, r6
 80056ca:	4649      	mov	r1, r9
 80056cc:	4640      	mov	r0, r8
 80056ce:	47d0      	blx	sl
 80056d0:	3001      	adds	r0, #1
 80056d2:	d09d      	beq.n	8005610 <_printf_i+0x160>
 80056d4:	3501      	adds	r5, #1
 80056d6:	68e3      	ldr	r3, [r4, #12]
 80056d8:	9903      	ldr	r1, [sp, #12]
 80056da:	1a5b      	subs	r3, r3, r1
 80056dc:	42ab      	cmp	r3, r5
 80056de:	dcf2      	bgt.n	80056c6 <_printf_i+0x216>
 80056e0:	e7eb      	b.n	80056ba <_printf_i+0x20a>
 80056e2:	2500      	movs	r5, #0
 80056e4:	f104 0619 	add.w	r6, r4, #25
 80056e8:	e7f5      	b.n	80056d6 <_printf_i+0x226>
 80056ea:	bf00      	nop
 80056ec:	080058cd 	.word	0x080058cd
 80056f0:	080058de 	.word	0x080058de

080056f4 <memmove>:
 80056f4:	4288      	cmp	r0, r1
 80056f6:	b510      	push	{r4, lr}
 80056f8:	eb01 0402 	add.w	r4, r1, r2
 80056fc:	d902      	bls.n	8005704 <memmove+0x10>
 80056fe:	4284      	cmp	r4, r0
 8005700:	4623      	mov	r3, r4
 8005702:	d807      	bhi.n	8005714 <memmove+0x20>
 8005704:	1e43      	subs	r3, r0, #1
 8005706:	42a1      	cmp	r1, r4
 8005708:	d008      	beq.n	800571c <memmove+0x28>
 800570a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800570e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005712:	e7f8      	b.n	8005706 <memmove+0x12>
 8005714:	4402      	add	r2, r0
 8005716:	4601      	mov	r1, r0
 8005718:	428a      	cmp	r2, r1
 800571a:	d100      	bne.n	800571e <memmove+0x2a>
 800571c:	bd10      	pop	{r4, pc}
 800571e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005726:	e7f7      	b.n	8005718 <memmove+0x24>

08005728 <_sbrk_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4d06      	ldr	r5, [pc, #24]	; (8005744 <_sbrk_r+0x1c>)
 800572c:	2300      	movs	r3, #0
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	f7fb fdea 	bl	800130c <_sbrk>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_sbrk_r+0x1a>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_sbrk_r+0x1a>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	200003ac 	.word	0x200003ac

08005748 <_realloc_r>:
 8005748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574c:	4680      	mov	r8, r0
 800574e:	4614      	mov	r4, r2
 8005750:	460e      	mov	r6, r1
 8005752:	b921      	cbnz	r1, 800575e <_realloc_r+0x16>
 8005754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	4611      	mov	r1, r2
 800575a:	f7ff bc57 	b.w	800500c <_malloc_r>
 800575e:	b92a      	cbnz	r2, 800576c <_realloc_r+0x24>
 8005760:	f7ff fbe8 	bl	8004f34 <_free_r>
 8005764:	4625      	mov	r5, r4
 8005766:	4628      	mov	r0, r5
 8005768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800576c:	f000 f81b 	bl	80057a6 <_malloc_usable_size_r>
 8005770:	4284      	cmp	r4, r0
 8005772:	4607      	mov	r7, r0
 8005774:	d802      	bhi.n	800577c <_realloc_r+0x34>
 8005776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800577a:	d812      	bhi.n	80057a2 <_realloc_r+0x5a>
 800577c:	4621      	mov	r1, r4
 800577e:	4640      	mov	r0, r8
 8005780:	f7ff fc44 	bl	800500c <_malloc_r>
 8005784:	4605      	mov	r5, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	d0ed      	beq.n	8005766 <_realloc_r+0x1e>
 800578a:	42bc      	cmp	r4, r7
 800578c:	4622      	mov	r2, r4
 800578e:	4631      	mov	r1, r6
 8005790:	bf28      	it	cs
 8005792:	463a      	movcs	r2, r7
 8005794:	f7ff fbc0 	bl	8004f18 <memcpy>
 8005798:	4631      	mov	r1, r6
 800579a:	4640      	mov	r0, r8
 800579c:	f7ff fbca 	bl	8004f34 <_free_r>
 80057a0:	e7e1      	b.n	8005766 <_realloc_r+0x1e>
 80057a2:	4635      	mov	r5, r6
 80057a4:	e7df      	b.n	8005766 <_realloc_r+0x1e>

080057a6 <_malloc_usable_size_r>:
 80057a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057aa:	1f18      	subs	r0, r3, #4
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bfbc      	itt	lt
 80057b0:	580b      	ldrlt	r3, [r1, r0]
 80057b2:	18c0      	addlt	r0, r0, r3
 80057b4:	4770      	bx	lr
	...

080057b8 <_init>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr

080057c4 <_fini>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr
